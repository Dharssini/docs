(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{117:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"metadata",(function(){return c})),t.d(a,"toc",(function(){return s})),t.d(a,"default",(function(){return d}));var n=t(3),r=t(7),i=(t(0),t(130)),o={title:"Snippets & Sample Code"},c={unversionedId:"appendix",id:"appendix",isDocsHomePage:!1,title:"Snippets & Sample Code",description:"Filters",source:"@site/docs/appendix.md",slug:"/appendix",permalink:"/docs/appendix",editUrl:"https://github.com/openfn/docs/edit/master/docs/appendix.md",version:"current",sidebar:"docs",previous:{title:"Troubleshooting",permalink:"/docs/trouble-shooting"},next:{title:"Release Notes",permalink:"/docs/release-notes"}},s=[{value:"Filters",id:"filters",children:[{value:"Match messages <code>WHERE</code> the <code>formId</code> is <code>&quot;Robot_Photo_21.04.2015&quot;</code>:",id:"match-messages-where-the-formid-is-robot_photo_21042015",children:[]},{value:"Match a message <code>WHERE</code> this <code>AND</code> that are both included:",id:"match-a-message-where-this-and-that-are-both-included",children:[]},{value:"Match a message with two fragments inside an array called <code>data</code>:",id:"match-a-message-with-two-fragments-inside-an-array-called-data",children:[]},{value:"Match a message with a fragment inside another object called <code>form</code>:",id:"match-a-message-with-a-fragment-inside-another-object-called-form",children:[]}]},{value:"Job Expressions",id:"job-expressions",children:[{value:"Job expression (for CommCare to SF)",id:"job-expression-for-commcare-to-sf",children:[]},{value:"Accessing the &quot;data array&quot; in Open Data Kit submissions",id:"accessing-the-data-array-in-open-data-kit-submissions",children:[]},{value:"ODK to Salesforce: create parent record with many children from parent data",id:"odk-to-salesforce-create-parent-record-with-many-children-from-parent-data",children:[]},{value:"Create many child records WITHOUT a repeat group in ODK",id:"create-many-child-records-without-a-repeat-group-in-odk",children:[]},{value:"Salesforce: perform an update",id:"salesforce-perform-an-update",children:[]},{value:"Salesforce: Set record type using &#39;relationship(...)&#39;",id:"salesforce-set-record-type-using-relationship",children:[]},{value:"Salesforce: Set record type using record Type ID",id:"salesforce-set-record-type-using-record-type-id",children:[]},{value:"Telerivet: Send SMS based on Salesforce workflow alert",id:"telerivet-send-sms-based-on-salesforce-workflow-alert",children:[]},{value:"HTTP: fetch but don&#39;t fail!",id:"http-fetch-but-dont-fail",children:[]},{value:"Sample DHIS2 events API job:",id:"sample-dhis2-events-api-job",children:[]},{value:"Sample DHIS2 data value sets API job:",id:"sample-dhis2-data-value-sets-api-job",children:[]},{value:"sample openMRS expression, creates a person and then a patient",id:"sample-openmrs-expression-creates-a-person-and-then-a-patient",children:[]},{value:"merge many values into a child path",id:"merge-many-values-into-a-child-path",children:[]},{value:"arrayToString",id:"arraytostring",children:[]},{value:"access an image URL from an ODK submission",id:"access-an-image-url-from-an-odk-submission",children:[]},{value:"alterState (alter state) to make sure data is in an array",id:"alterstate-alter-state-to-make-sure-data-is-in-an-array",children:[]},{value:"Login in to a server with a custom SSL Certificate",id:"login-in-to-a-server-with-a-custom-ssl-certificate",children:[]}]},{value:"Anonymous Functions",id:"anonymous-functions",children:[{value:"Custom replacer",id:"custom-replacer",children:[]},{value:"Custom arrayToString",id:"custom-arraytostring",children:[]},{value:"Custom concatenation",id:"custom-concatenation",children:[]},{value:"Concatenation of null values",id:"concatenation-of-null-values",children:[]},{value:"Custom Nth reference ID",id:"custom-nth-reference-id",children:[]},{value:"Convert date string to standard ISO date for Salesforce",id:"convert-date-string-to-standard-iso-date-for-salesforce",children:[]},{value:"Use external ID fields for relationships during a bulk load in Salesforce",id:"use-external-id-fields-for-relationships-during-a-bulk-load-in-salesforce",children:[]},{value:"Bulk upsert with an external ID in salesforce",id:"bulk-upsert-with-an-external-id-in-salesforce",children:[]}]}],l={toc:s};function d(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"filters"},"Filters"),Object(i.b)("h3",{id:"match-messages-where-the-formid-is-robot_photo_21042015"},"Match messages ",Object(i.b)("inlineCode",{parentName:"h3"},"WHERE")," the ",Object(i.b)("inlineCode",{parentName:"h3"},"formId")," is ",Object(i.b)("inlineCode",{parentName:"h3"},'"Robot_Photo_21.04.2015"'),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{ "formId": "Robot_Photo_21.04.2015" }\n')),Object(i.b)("h3",{id:"match-a-message-where-this-and-that-are-both-included"},"Match a message ",Object(i.b)("inlineCode",{parentName:"h3"},"WHERE")," this ",Object(i.b)("inlineCode",{parentName:"h3"},"AND")," that are both included:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{ "formId": "Robot_Photo_21.04.2015", "secret_number": 8 }\n')),Object(i.b)("h3",{id:"match-a-message-with-two-fragments-inside-an-array-called-data"},"Match a message with two fragments inside an array called ",Object(i.b)("inlineCode",{parentName:"h3"},"data"),":"),Object(i.b)("p",null,"(This is useful when gathering data via ODK)"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{ "data": [{ "outlet_call": "TRUE", "new_existing": "Existing" }] }\n')),Object(i.b)("h3",{id:"match-a-message-with-a-fragment-inside-another-object-called-form"},"Match a message with a fragment inside another object called ",Object(i.b)("inlineCode",{parentName:"h3"},"form"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "form": {\n    "@xmlns": "http://openrosa.org/formdesigner/F732194-3278-nota-ReAL-one"\n  }\n}\n')),Object(i.b)("h2",{id:"job-expressions"},"Job Expressions"),Object(i.b)("p",null,"Below you can find some examples of block code for different functions and data\nhandling contexts."),Object(i.b)("h3",{id:"job-expression-for-commcare-to-sf"},"Job expression (for CommCare to SF)"),Object(i.b)("p",null,"The following job expression will take a matching receipt and use data from that\nreceipt to upsert a ",Object(i.b)("inlineCode",{parentName:"p"},"Patient__c")," record in Salesforce and create multiple new\n",Object(i.b)("inlineCode",{parentName:"p"},"Patient_Visit__c")," (child to Patient) records."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"upsert(\n  'Patient__c',\n  'Patient_Id__c',\n  fields(\n    field('Patient_Id__c', dataValue('form.patient_ID')),\n    relationship('Nurse__r', 'Nurse_ID_code__c', dataValue('form.staff_id')),\n    field('Phone_Number__c', dataValue('form.mobile_phone'))\n  )\n),\n  each(\n    join('$.data.form.visits[*]', '$.references[0].id', 'Id'),\n    create(\n      'Visit__c',\n      fields(\n        field('Patient__c', dataValue('Id')),\n        field('Date__c', dataValue('date')),\n        field('Reason__c', dataValue('why_did_they_see_doctor'))\n      )\n    )\n  );\n")),Object(i.b)("h3",{id:"accessing-the-data-array-in-open-data-kit-submissions"},'Accessing the "data array" in Open Data Kit submissions'),Object(i.b)("p",null,'Notice how we use "each" to get data from each item inside the "data array" in\nODK.'),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"each(\n  '$.data.data[*]',\n  create(\n    'ODK_Submission__c',\n    fields(\n      field('Site_School_ID_Number__c', dataValue('school')),\n      field('Date_Completed__c', dataValue('date')),\n      field('comments__c', dataValue('comments')),\n      field('ODK_Key__c', dataValue('*meta-instance-id*'))\n    )\n  )\n);\n")),Object(i.b)("h3",{id:"odk-to-salesforce-create-parent-record-with-many-children-from-parent-data"},"ODK to Salesforce: create parent record with many children from parent data"),Object(i.b)("p",null,"Here, the user brings ",Object(i.b)("inlineCode",{parentName:"p"},"time_end")," and ",Object(i.b)("inlineCode",{parentName:"p"},"parentId")," onto the line items from the\nparent object."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"each(\n  dataPath('data[*]'),\n  combine(\n    create(\n      'transaction__c',\n      fields(\n        field('Transaction_Date__c', dataValue('today')),\n        relationship(\n          'Person_Responsible__r',\n          'Staff_ID_Code__c',\n          dataValue('person_code')\n        ),\n        field('metainstanceid__c', dataValue('*meta-instance-id*'))\n      )\n    ),\n    each(\n      merge(\n        dataPath('line_items[*]'),\n        fields(\n          field('end', dataValue('time_end')),\n          field('parentId', lastReferenceValue('id'))\n        )\n      ),\n      create(\n        'line_item__c',\n        fields(\n          field('transaction__c', dataValue('parentId')),\n          field('Barcode__c', dataValue('product_barcode')),\n          field('ODK_Form_Completed__c', dataValue('end'))\n        )\n      )\n    )\n  )\n);\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"NB - there was a known bug with the ",Object(i.b)("inlineCode",{parentName:"strong"},"combine")," function which has been\nresolved. ",Object(i.b)("inlineCode",{parentName:"strong"},"combine")," can be used to combine two operations into one and is\ncommonly used to run multiple ",Object(i.b)("inlineCode",{parentName:"strong"},"create"),"'s inside an ",Object(i.b)("inlineCode",{parentName:"strong"},"each(path, operation)"),".\nThe source code for combine can be found here:\n",Object(i.b)("a",Object(n.a)({parentName:"strong"},{href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L204-L222"}),"language-common: combine")))),Object(i.b)("h3",{id:"create-many-child-records-without-a-repeat-group-in-odk"},"Create many child records WITHOUT a repeat group in ODK"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"beta.each(\n  '$.data.data[*]',\n  upsert(\n    'Outlet__c',\n    'Outlet_Code__c',\n    fields(\n      field('Outlet_Code__c', dataValue('outlet_code')),\n      field('Location__Latitude__s', dataValue('gps:Latitude')),\n      field('Location__Longitude__s', dataValue('gps:Longitude'))\n    )\n  )\n),\n  beta.each(\n    '$.data.data[*]',\n    upsert(\n      'Outlet_Call__c',\n      'Invoice_Number__c',\n      fields(\n        field('Invoice_Number__c', dataValue('invoice_number')),\n        relationship('Outlet__r', 'Outlet_Code__c', dataValue('outlet_code')),\n        relationship('RecordType', 'name', 'No Call Card'),\n        field('Trip__c', 'a0FN0000008jPue'),\n        relationship(\n          'Sales_Person__r',\n          'Sales_Rep_Code__c',\n          dataValue('sales_rep_code')\n        ),\n        field('Date__c', dataValue('date')),\n        field('Comments__c', dataValue('comments'))\n      )\n    )\n  );\n")),Object(i.b)("h3",{id:"salesforce-perform-an-update"},"Salesforce: perform an update"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'update("Patient__c", fields(\n  field("Id", dataValue("pathToSalesforceId")),\n  field("Name__c", dataValue("patient.first_name")),\n  field(...)\n));\n')),Object(i.b)("h3",{id:"salesforce-set-record-type-using-relationship"},"Salesforce: Set record type using 'relationship(...)'"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"create(\n  'custom_obj__c',\n  fields(\n    relationship(\n      'RecordType',\n      'name',\n      dataValue('submission_type'),\n      field('name', dataValue('Name'))\n    )\n  )\n);\n")),Object(i.b)("h3",{id:"salesforce-set-record-type-using-record-type-id"},"Salesforce: Set record type using record Type ID"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"each(\n  '$.data.data[*]',\n  create(\n    'fancy_object__c',\n    fields(\n      field('RecordTypeId', '012110000008s19'),\n      field('site_size', dataValue('size'))\n    )\n  )\n);\n")),Object(i.b)("h3",{id:"telerivet-send-sms-based-on-salesforce-workflow-alert"},"Telerivet: Send SMS based on Salesforce workflow alert"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"send(\n  fields(\n    field(\n      'to_number',\n      dataValue(\n        'Envelope.Body.notifications.Notification.sObject.phone_number__c'\n      )\n    ),\n    field('message_type', 'sms'),\n    field('route_id', ''),\n    field('content', function (state) {\n      return 'Hey there. Your name is '.concat(\n        dataValue('Envelope.Body.notifications.Notification.sObject.name__c')(\n          state\n        ),\n        '.'\n      );\n    })\n  )\n);\n")),Object(i.b)("h3",{id:"http-fetch-but-dont-fail"},"HTTP: fetch but don't fail!"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'// =============\n// We use "fetchWithErrors(...)" so that when the\n// SMS gateway returns an error the run does not "fail".\n// It "succeeds" and then delivers that error message\n// back to Salesforce with the "Update SMS Status" job.\n// =============\nfetchWithErrors({\n  getEndpoint: \'send_to_contact\',\n  query: function (state) {\n    return {\n      msisdn:\n        state.data.Envelope.Body.notifications.Notification.sObject\n          .SMS__Phone_Number__c,\n      message:\n        state.data.Envelope.Body.notifications.Notification.sObject\n          .SMS__Message__c,\n      api_key: \'some-secret-key\',\n    };\n  },\n  externalId: state.data.Envelope.Body.notifications.Notification.sObject.Id,\n  postUrl: \'https://www.openfn.org/inbox/another-secret-key\',\n});\n')),Object(i.b)("h3",{id:"sample-dhis2-events-api-job"},"Sample DHIS2 events API job:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"event(\n  fields(\n    field('program', 'eBAyeGv0exc'),\n    field('orgUnit', 'DiszpKrYNg8'),\n    field('eventDate', dataValue('properties.date')),\n    field('status', 'COMPLETED'),\n    field('storedBy', 'admin'),\n    field('coordinate', {\n      latitude: '59.8',\n      longitude: '10.9',\n    }),\n    field('dataValues', function (state) {\n      return [\n        {\n          dataElement: 'qrur9Dvnyt5',\n          value: dataValue('properties.prop_a')(state),\n        },\n        {\n          dataElement: 'oZg33kd9taw',\n          value: dataValue('properties.prop_b')(state),\n        },\n        {\n          dataElement: 'msodh3rEMJa',\n          value: dataValue('properties.prop_c')(state),\n        },\n      ];\n    })\n  )\n);\n")),Object(i.b)("h3",{id:"sample-dhis2-data-value-sets-api-job"},"Sample DHIS2 data value sets API job:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"dataValueSet(\n  fields(\n    field('dataSet', 'pBOMPrpg1QX'),\n    field('orgUnit', 'DiszpKrYNg8'),\n    field('period', '201401'),\n    field('completeData', dataValue('date')),\n    field('dataValues', function (state) {\n      return [\n        { dataElement: 'f7n9E0hX8qk', value: dataValue('prop_a')(state) },\n        { dataElement: 'Ix2HsbDMLea', value: dataValue('prop_b')(state) },\n        { dataElement: 'eY5ehpbEsB7', value: dataValue('prop_c')(state) },\n      ];\n    })\n  )\n);\n")),Object(i.b)("h3",{id:"sample-openmrs-expression-creates-a-person-and-then-a-patient"},"sample openMRS expression, creates a person and then a patient"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"person(\n  fields(\n    field('gender', 'F'),\n    field('names', function (state) {\n      return [\n        {\n          givenName: dataValue('form.first_name')(state),\n          familyName: dataValue('form.last_name')(state),\n        },\n      ];\n    })\n  )\n),\n  patient(\n    fields(\n      field('person', lastReferenceValue('uuid')),\n      field('identifiers', function (state) {\n        return [\n          {\n            identifier: '1234',\n            identifierType: '8d79403a-c2cc-11de-8d13-0010c6dffd0f',\n            location: '8d6c993e-c2cc-11de-8d13-0010c6dffd0f',\n            preferred: true,\n          },\n        ];\n      })\n    )\n  );\n")),Object(i.b)("h3",{id:"merge-many-values-into-a-child-path"},"merge many values into a child path"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'each(\n  merge(\n    dataPath("CHILD_ARRAY[*]"),\n    fields(\n      field("metaId", dataValue("*meta-instance-id*")),\n      field("parentId", lastReferenceValue("id"))\n    )\n  ),\n  create(...)\n)\n')),Object(i.b)("h3",{id:"arraytostring"},"arrayToString"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"arrayToString(arr, separator_string);\n")),Object(i.b)("h3",{id:"access-an-image-url-from-an-odk-submission"},"access an image URL from an ODK submission"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'// In ODK the image URL is inside an image object...\nfield("Photo_URL_text__c", dataValue("image.url")),\n')),Object(i.b)("h3",{id:"alterstate-alter-state-to-make-sure-data-is-in-an-array"},"alterState (alter state) to make sure data is in an array"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// Here, we make sure CommCare gives us an array to use in each(merge(...), ...)\nalterState(state => {\n  const idCards = state.data.form.ID_cards_given_to_vendor;\n  if (!Array.isArray(idCards)) {\n    state.data.form.ID_cards_given_to_vendor = [idCards];\n  }\n  return state;\n});\n\n// Now state has been changed, and we carry on...\neach(\n  merge(\n    dataPath('form.ID_cards_given_to_vendor[*]'),\n    fields(\n      field('Vendor_Id', dataValue('form.ID_vendor')),\n      field('form_finished_time', dataValue('form.meta.timeEnd'))\n    )\n  ),\n  upsert(\n    'Small_Packet__c',\n    'sp_id__c',\n    fields(\n      field('sp_id__c', dataValue('ID_cards_given_to_vendor')),\n      relationship('Vendor__r', 'Badge_Code__c', dataValue('Vendor_Id')),\n      field(\n        'Small_Packet_Distribution_Date__c',\n        dataValue('form_finished_time')\n      )\n    )\n  )\n);\n")),Object(i.b)("h3",{id:"login-in-to-a-server-with-a-custom-ssl-certificate"},"Login in to a server with a custom SSL Certificate"),Object(i.b)("p",null,"This snippet describes how you would connect to a secure server ignoring SSL\ncertificate verification. Set ",Object(i.b)("inlineCode",{parentName:"p"},"strictSSL: false")," in the options argument of the\n",Object(i.b)("inlineCode",{parentName:"p"},"post")," function in ",Object(i.b)("inlineCode",{parentName:"p"},"language-http"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"post(\n  `${state.configuration.url}/${path}`,\n  {\n    headers: { 'content-type': 'application/json' },\n    body: {\n      email: 'Luka',\n      password: 'somethingSecret',\n    },\n    strictSSL: false,\n  },\n  callback\n);\n")),Object(i.b)("h2",{id:"anonymous-functions"},"Anonymous Functions"),Object(i.b)("p",null,"Different to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/documentation#named-functions"}),"Named Functions"),", Anonymous\nfunctions are generic pieces of javascript which you can write to suit your\nneeds. Here are some examples of these custom functions:"),Object(i.b)("h3",{id:"custom-replacer"},"Custom replacer"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"field('destination__c', state => {\n  console.log(something);\n  return dataValue('path_to_data')(state).toString().replace('cats', 'dogs');\n});\n")),Object(i.b)("p",null,'This will replace all "cats" with "dogs" in the string that lives at\n',Object(i.b)("inlineCode",{parentName:"p"},"path_to_data"),"."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"NOTE:")," The JavaScript ",Object(i.b)("inlineCode",{parentName:"p"},"replace()")," function only replaces the first instance\nof whatever argument you specify. If you're looking for a way to replace all\ninstances, we suggest you use a regex like we did in the\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#custom-concatenation-of-null-values"}),"example")," below.")),Object(i.b)("h3",{id:"custom-arraytostring"},"Custom arrayToString"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'field("target_specie_list__c", function(state) {\n  return Array.apply(\n    null, sourceValue("$.data.target_specie_list")(state)\n  ).join(\', \')\n}),\n')),Object(i.b)("p",null,'It will take an array, and concatenate each item into a string with a ", "\nseparator.'),Object(i.b)("h3",{id:"custom-concatenation"},"Custom concatenation"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"field('ODK_Key__c', function (state) {\n  return dataValue('metaId')(state).concat('(', dataValue('index')(state), ')');\n});\n")),Object(i.b)("p",null,"This will concatenate two values."),Object(i.b)("h3",{id:"concatenation-of-null-values"},"Concatenation of null values"),Object(i.b)("p",null,"This will concatenate many values, even if one or more are null, writing them to\na field called Main_Office_City_c."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'...\n  field("Main_Office_City__c", function(state) {\n    return arrayToString([\n      dataValue("Main_Office_City_a")(state) === null ? "" : dataValue("Main_Office_City_a")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_b")(state) === null ? "" : dataValue("Main_Office_City_b")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_c")(state) === null ? "" : dataValue("Main_Office_City_c")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_d")(state) === null ? "" : dataValue("Main_Office_City_d")(state).toString().replace(/-/g, " "),\n    ].filter(Boolean), \',\')\n  })\n')),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Notice how this custom function makes use of the ",Object(i.b)("strong",{parentName:"p"},"regex")," ",Object(i.b)("inlineCode",{parentName:"p"},"/-/g")," to ensure\nthat all instances are accounted for (g = global search).")),Object(i.b)("h3",{id:"custom-nth-reference-id"},"Custom Nth reference ID"),Object(i.b)("p",null,"If you ever want to retrieve the FIRST object you created, or the SECOND, or the\nNth, for that matter, a function like this will do the trick."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"field('parent__c', function (state) {\n  return state.references[state.references.length - 1].id;\n});\n")),Object(i.b)("p",null,'See how instead of taking the id of the "last" thing that was created in\nSalesforce, you\'re taking the id of the 1st thing, or 2nd thing if you replace\n"length-1" with "length-2".'),Object(i.b)("h3",{id:"convert-date-string-to-standard-iso-date-for-salesforce"},"Convert date string to standard ISO date for Salesforce"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"field('Payment_Date__c', function (state) {\n  return new Date(dataValue('payment_date')(state)).toISOString();\n});\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("strong",{parentName:"p"},"NOTE"),": The output of this function will always be formatted according to\nGMT time-zone.")),Object(i.b)("h3",{id:"use-external-id-fields-for-relationships-during-a-bulk-load-in-salesforce"},"Use external ID fields for relationships during a bulk load in Salesforce"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"array.map(item => {\n  return {\n    Patient_Name__c: item.fullName,\n    'Clinic__r.Unique_Clinic_Identifier__c': item.clinicId,\n    'RecordType.Name': item.type,\n  };\n});\n")),Object(i.b)("h3",{id:"bulk-upsert-with-an-external-id-in-salesforce"},"Bulk upsert with an external ID in salesforce"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"bulk(\n  'Visit_new__c',\n  'upsert',\n  {\n    extIdField: 'commcare_case_id__c',\n    failOnError: true,\n    allowNoOp: true,\n  },\n  dataValue('patients')\n);\n")))}d.isMDXComponent=!0},130:function(e,a,t){"use strict";t.d(a,"a",(function(){return u})),t.d(a,"b",(function(){return m}));var n=t(0),r=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),d=function(e){var a=r.a.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):c(c({},a),e)),t},u=function(e){var a=d(e.components);return r.a.createElement(l.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},b=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(t),b=n,m=u["".concat(o,".").concat(b)]||u[b]||p[b]||i;return t?r.a.createElement(m,c(c({ref:a},l),{},{components:t})):r.a.createElement(m,c({ref:a},l))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=b;var c={};for(var s in a)hasOwnProperty.call(a,s)&&(c[s]=a[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);