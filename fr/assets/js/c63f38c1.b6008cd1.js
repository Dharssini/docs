(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[107],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},47136:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var r=t(22122),o=t(19756),a=(t(67294),t(3905)),i={title:"Deploiements du Do-it-yourself",sidebar_label:"DIY"},s={unversionedId:"deploy/diy",id:"deploy/diy",isDocsHomePage:!1,title:"Deploiements du Do-it-yourself",description:"\xcates-vous s\xfbr de vouloir construire une nouvelle application en utilisant core ou engine\xa0? L'offre microservice, d'OpenFn enti\xe8rement gratuite et open-source, constitue une assez bonne base dans dans le cas o\xf9 vous voudriez \xe9tendre nos fonctionnalit\xe9s existantes pour vos propres besoins.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/deploy/diy.md",sourceDirName:"deploy",slug:"/deploy/diy",permalink:"/fr/documentation/deploy/diy",editUrl:"https://github.com/openfn/docs/edit/main/docs/deploy/diy.md",version:"current",sidebar_label:"DIY",frontMatter:{title:"Deploiements du Do-it-yourself",sidebar_label:"DIY"},sidebar:"docs",previous:{title:"OpenHIE instantan\xe9",permalink:"/fr/documentation/instant-openhie"},next:{title:"Gestion de projet",permalink:"/fr/documentation/manage/platform-mgmt"}},l=[{value:"Utilisation directe de <code>core</code> et <code>engine</code>",id:"utilisation-directe-de-core-et-engine",children:[{value:"Par o\xf9 commencer",id:"par-o\xf9-commencer",children:[]},{value:"Sample files for DIY getting started",id:"sample-files-for-diy-getting-started",children:[]}]}],p={toc:l};function u(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,":::avertissement"),(0,a.kt)("p",null,"\xcates-vous s\xfbr de vouloir construire une nouvelle application en utilisant ",(0,a.kt)("strong",{parentName:"p"},"core")," ou ",(0,a.kt)("strong",{parentName:"p"},"engine"),"\xa0? L'offre ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/documentation/microservice/home"},"microservice")),", d'OpenFn enti\xe8rement gratuite et open-source, constitue une assez bonne base dans dans le cas o\xf9 vous voudriez \xe9tendre nos fonctionnalit\xe9s existantes pour vos propres besoins."),(0,a.kt)("p",null,":::"),(0,a.kt)("p",null,":::remarque"),(0,a.kt)("p",null,"Nous sommes en train de migrer la documentation pour ",(0,a.kt)("strong",{parentName:"p"},"OpenFn/core")," et ",(0,a.kt)("strong",{parentName:"p"},"OpenFn/engine")," ici."),(0,a.kt)("p",null,"Entre-temps, consultez\xa0:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/core"},"https://github.com/OpenFn/core")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/engine"},"https://github.com/OpenFn/engine"))),(0,a.kt)("p",null,":::"),(0,a.kt)("h2",{id:"utilisation-directe-de-core-et-engine"},"Utilisation directe de ",(0,a.kt)("inlineCode",{parentName:"h2"},"core")," et ",(0,a.kt)("inlineCode",{parentName:"h2"},"engine")),(0,a.kt)("h3",{id:"par-o\xf9-commencer"},"Par o\xf9 commencer"),(0,a.kt)("p",null,"OpenFn's core ETL tools are all open-source, and here we will explain how those tools can be used to perform ETL operations from your command line. You can even take this further and wrap them together in your own hosted service!"),(0,a.kt)("p",null,"To create an integration service like ",(0,a.kt)("inlineCode",{parentName:"p"},"platform")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"microservice"),", you will need to build a REST endpoint that allows JSON or XML to be posted to it, returning a ",(0,a.kt)("inlineCode",{parentName:"p"},"2XX")," and checking the body of that message to see if it matches some criteria. If the criteria match for that message, you must perform ",(0,a.kt)("inlineCode",{parentName:"p"},"execute")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"core"),", using the message data and some stored configuration as state. See a sample state.json below:"),(0,a.kt)("h4",{id:"statejson"},"State.json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "word_count": 284,\n    "last_update": "2016-11-10 13:58:47",\n    "folder_name": "Civil Disobedience",\n    "file_owner": "student@school.org.za",\n    "file_name": "Mock Journal Article"\n  },\n  "configuration": {\n    "host": "109.XXX.11X.2XX",\n    "port": "5432",\n    "database": "data-warehouse",\n    "user": "postgres",\n    "password": "secret-password",\n    "ssl": true\n  }\n}\n')),(0,a.kt)("p",null,"Make sure to store your logs. If you'd like to be able to retry transactions, persist the message data and provide an interface for manipulating that data by hand, or re-running certain transactions after the job expression has been altered."),(0,a.kt)("p",null,"Make sure that a single inbound message can kick off the running of multiple jobs."),(0,a.kt)("p",null,"To get started, or just run fn-lang manually, from your command line, check out ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OpenFn/openfn-devtools"},"openfn-devtools"),". With windows and linux install scripts, it's the fastest way to get up and running with OpenFn on your local machine."),(0,a.kt)("h3",{id:"sample-files-for-diy-getting-started"},"Sample files for DIY getting started"),(0,a.kt)("p",null,"Below you can find sample code to fill the 3 files required to run fn-lang - ",(0,a.kt)("inlineCode",{parentName:"p"},"message.json"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"expression.js")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"config.json"),"."),(0,a.kt)("h4",{id:"messagejson"},"message.json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "xform_ids": [],\n  "version": null,\n  "user_id": "user1",\n  "server_date_opened": null,\n  "server_date_modified": null,\n  "properties": {\n    "prop_c": "2013-05-18",\n    "prop_b": "Female",\n    "prop_a": 99,\n    "owner_id": null,\n    "external_id": null,\n    "date_opened": null,\n    "date": "2013-05-17",\n    "case_type": "case_type",\n    "case_name": "Demo"\n  },\n  "indices": {}\n}\n')),(0,a.kt)("h4",{id:"expressionjs"},"expression.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"event(\n  fields(\n    field('program', 'eBAyeGv0exc'),\n    field('orgUnit', 'DiszpKrYNg8'),\n    field('eventDate', dataValue('properties.date')),\n    field('status', 'COMPLETED'),\n    field('storedBy', 'admin'),\n    field('coordinate', {\n      latitude: '59.8',\n      longitude: '10.9',\n    }),\n    field('dataValues', function (state) {\n      return [\n        {\n          dataElement: 'qrur9Dvnyt5',\n          value: dataValue('properties.prop_a')(state),\n        },\n        {\n          dataElement: 'oZg33kd9taw',\n          value: dataValue('properties.prop_b')(state),\n        },\n        {\n          dataElement: 'msodh3rEMJa',\n          value: dataValue('properties.prop_c')(state),\n        },\n      ];\n    })\n  )\n);\n")),(0,a.kt)("h4",{id:"configjson"},"config.json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "username": "admin",\n  "password": "district",\n  "apiUrl": "https://play.dhis2.org/demo"\n}\n')))}u.isMDXComponent=!0}}]);