(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[4343],{3905:function(e,a,t){"use strict";t.d(a,{Zo:function(){return p},kt:function(){return f}});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),u=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=u(e.components);return n.createElement(l.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(t),f=r,y=d["".concat(l,".").concat(f)]||d[f]||c[f]||i;return t?n.createElement(y,o(o({ref:a},p),{},{components:t})):n.createElement(y,o({ref:a},p))}));function f(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},91778:function(e,a,t){"use strict";t.r(a),t.d(a,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l},default:function(){return p}});var n=t(22122),r=t(19756),i=(t(67294),t(3905)),o={title:"Using findValue with an array of data",sidebar_label:"\ud83d\udcdc Using findValue with an array of data",id:"async-findValue",keywords:["library","job","expression","postgresql","alterState","findValue","upsertMany","async","await"]},s={unversionedId:"jobs/auto/async-findValue",id:"jobs/auto/async-findValue",isDocsHomePage:!1,title:"Using findValue with an array of data",description:"\ud83d\udcdc This job is an official example from OpenFn.",source:"@site/library/jobs/auto/async-findValue.md",sourceDirName:"jobs/auto",slug:"/jobs/auto/async-findValue",permalink:"/fr/library/jobs/auto/async-findValue",version:"current",sidebar_label:"\ud83d\udcdc Using findValue with an array of data",frontMatter:{title:"Using findValue with an array of data",sidebar_label:"\ud83d\udcdc Using findValue with an array of data",id:"async-findValue",keywords:["library","job","expression","postgresql","alterState","findValue","upsertMany","async","await"]},sidebar:"library",previous:{title:"mBrana",permalink:"/fr/library/jobs/auto/mBrana-2021-05-11"},next:{title:"1. Create Payment in SF",permalink:"/fr/library/jobs/auto/1-Create-Payment-in-SF-2018-09-03"}},l=[{value:"Metadata",id:"metadata",children:[]},{value:"Key Functions",id:"key-functions",children:[]},{value:"Expression",id:"expression",children:[]}],u={toc:l};function p(e){var a=e.components,t=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\ud83d\udcdc ",(0,i.kt)("em",null,"This job is an official example from OpenFn.")),(0,i.kt)("h2",{id:"metadata"},"Metadata"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Name: Using findValue with an array of data"),(0,i.kt)("li",{parentName:"ul"},"Adaptor: ",(0,i.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-postgresql"},(0,i.kt)("inlineCode",{parentName:"a"},"@openfn/language-postgresql"))),(0,i.kt)("li",{parentName:"ul"},"Adaptor Version: ",(0,i.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-postgresql"},(0,i.kt)("inlineCode",{parentName:"a"},"latest"))),(0,i.kt)("li",{parentName:"ul"},"Created date unknown"),(0,i.kt)("li",{parentName:"ul"},"Updated date unknown"),(0,i.kt)("li",{parentName:"ul"},"Score: ",(0,i.kt)("b",null,"100")," (an ",(0,i.kt)("a",{parentName:"li",href:"/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,i.kt)("h2",{id:"key-functions"},"Key Functions"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"alterState"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"findValue"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"upsertMany"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"async"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"await")),(0,i.kt)("h2",{id:"expression"},"Expression"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'alterState(async state => {\n  const dataArray =\n    state.data.body.st_grass_repeat ||\n    state.data.body["plot_forest_area/st_grass_repeat"] ||\n    [];\n  const dataGrass = [];\n  const path = state.data.body.st_grass_repeat\n    ? "st_grass_repeat"\n    : "plot_forest_area/st_grass_repeat";\n\n  for (let data of uniqueGrass) {\n    dataGrass.push({\n      WCSPROGRAMS_TaxaID: await findValue({\n        uuid: "WCSPROGRAMS_TaxaID",\n        relation: "WCSPROGRAMS_Taxa",\n        where: {\n          ScientificName: `%${state.handleValue(\n            data["st_grass_repeat/grass_species"]\n          )}%`,\n        },\n        operator: { ScientificName: "like" },\n      })(state),\n      UnknownSpeciesImage: data[`${path}/noknown`],\n      GrassPercent: data[`${path}/grass_perc`],\n      GrassHeight: data[`${path}/grass_height`],\n      AnswerId: state.data.body._id,\n    });\n  }\n  return upsertMany(\n    "WCSPROGRAMS_VegetationGrass",\n    "WCSPROGRAMS_VegetationGrassCode",\n    () => dataGrass\n  )(state);\n});\n\n')))}p.isMDXComponent=!0}}]);