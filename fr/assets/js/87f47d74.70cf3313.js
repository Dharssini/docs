"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[3976],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>k});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=i,k=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(k,a(a({ref:n},s),{},{components:t})):r.createElement(k,a({ref:n},s))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9798:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(87462),i=(t(67294),t(3905));const o={title:"Microservice"},a=void 0,l={unversionedId:"microservice/home",id:"microservice/home",title:"Microservice",description:"Please note that OpenFn/microservice and OpenFn/devtools are being deprecated and replaced by OpenFn/Lightning, When lighting is released.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/microservice/home.md",sourceDirName:"microservice",slug:"/microservice/home",permalink:"/fr/documentation/microservice/home",draft:!1,editUrl:"https://github.com/openfn/docs/edit/main/docs/microservice/home.md",tags:[],version:"current",frontMatter:{title:"Microservice"},sidebar:"docs",previous:{title:"Devtools",permalink:"/fr/documentation/devtools/home"},next:{title:"Planification du d\xe9ploiement",permalink:"/fr/documentation/deploy/options"}},p={},c=[{value:"But",id:"but",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Pr\xe9requis",id:"pr\xe9requis",level:2},{value:"Docker op\xe9rationnel",id:"docker-op\xe9rationnel",level:2},{value:"Guide de d\xe9veloppement et de fonctionnement",id:"guide-de-d\xe9veloppement-et-de-fonctionnement",level:2},{value:"Fonctionnement dans Docker",id:"fonctionnement-dans-docker",level:3},{value:"Configuration de projet",id:"configuration-de-projet",level:2},{value:"Premi\xe8re configuration en utilisant l&#39;exemple de configuration",id:"premi\xe8re-configuration-en-utilisant-lexemple-de-configuration",level:3},{value:"Configuration depuis votre projet de plateforme OpenFn existant",id:"configuration-depuis-votre-projet-de-plateforme-openfn-existant",level:3}],s={toc:c},m="wrapper";function u(e){let{components:n,...o}=e;return(0,i.kt)(m,(0,r.Z)({},s,o,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Microservice and devtools are being replaced by Lightning",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Please note that ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/OpenFn/microservice"},"OpenFn/microservice")," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/OpenFn/devtools"},"OpenFn/devtools")," are being deprecated and replaced by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/OpenFn/lightning"},"OpenFn/Lightning"),", When lighting is released.")),(0,i.kt)("h2",{id:"but"},"But"),(0,i.kt)("p",null,"OpenFn is used by numerous health and humanitarian organizations around the world to scale their programs through real-time interoperability, systems integration, and workflow automation. ",(0,i.kt)("strong",{parentName:"p"},"OpenFn/microservice")," makes use of OpenFn's open-core technology\u2014namely ",(0,i.kt)("strong",{parentName:"p"},"OpenFn/core"),", ",(0,i.kt)("strong",{parentName:"p"},"OpenFn/engine"),", and the various OpenFn ",(0,i.kt)("strong",{parentName:"p"},"adaptors"),"\u2014to create standalone microservices which can be deployed on any hardware."),(0,i.kt)("p",null,"This microservice approach helps to ensure that governments and NGOs are never locked-in to OpenFn's SaaS offering, and can port their existing jobs, triggers, and credentials from ",(0,i.kt)("a",{parentName:"p",href:"https://www.openfn.org"},"OpenFn.org")," to their own infrastructure easily."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"platform"),", OpenFn/microservice runs on ",(0,i.kt)("inlineCode",{parentName:"p"},"project.yaml")," files. This means that when organizations or governments have an open-source license requirement, all their jobs, credentials, and project configurations can be exported from OpenFn's iPaaS and used to create a microservice deployment."),(0,i.kt)("p",null,"While this approach doesn't provide the OpenFn platform front-end with its various project management and configuration features, it's perfect for groups with DevOps experience and 100% compatible with the platform. You can even build and test entire projects on ",(0,i.kt)("inlineCode",{parentName:"p"},"platform")," and then export the ",(0,i.kt)("inlineCode",{parentName:"p"},"project.yaml")," file to run on your own servers using ",(0,i.kt)("inlineCode",{parentName:"p"},"microservice"),"."),(0,i.kt)("p",null,"This microservice approach provides flexibility to governments and NGOs, so they are never locked-in to OpenFn's SaaS platform offering. At any time, an organization can port their existing jobs, triggers, and credentials from OpenFn.org to run with our FOSS integration toolkit, using their own infrastructure."),(0,i.kt)("h2",{id:"pr\xe9requis"},"Pr\xe9requis"),(0,i.kt)("p",null,"Familiarity with other elements of OpenFn's open source integration toolkit is helpful when considering the microservice approach."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.openfn.org/"},"OpenFn/docs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/openfn/engine"},"OpenFn/engine")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/openFn/core"},"OpenFn/core")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://openfn.github.io/devtools/"},"OpenFn/devtools"))),(0,i.kt)("h2",{id:"docker-op\xe9rationnel"},"Docker op\xe9rationnel"),(0,i.kt)("p",null,"Assuming you've got an ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," and a sample project at ",(0,i.kt)("inlineCode",{parentName:"p"},"./sample-project")," directory with a ",(0,i.kt)("inlineCode",{parentName:"p"},"project.yaml")," spec:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose up\n")),(0,i.kt)("p",null,"You can configure either the compose file or the .env, or run the container using ",(0,i.kt)("inlineCode",{parentName:"p"},"docker run"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker run -v <path-to-your-project-folder>:/home/microservice/<path-to-your-project-folder> \\\n  --env-file <path-to-your-env-file> \\\n  --network host \\\n  openfn/microservice:v0.3.2\n")),(0,i.kt)("h2",{id:"guide-de-d\xe9veloppement-et-de-fonctionnement"},"Guide de d\xe9veloppement et de fonctionnement"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cloner ce d\xe9p\xf4t avec ",(0,i.kt)("inlineCode",{parentName:"li"},"git clone git@github.com:OpenFn/microservice.git")),(0,i.kt)("li",{parentName:"ul"},"Entrez le r\xe9pertoire avec ",(0,i.kt)("inlineCode",{parentName:"li"},"cd microservice")),(0,i.kt)("li",{parentName:"ul"},"Installez les d\xe9pendances avec ",(0,i.kt)("inlineCode",{parentName:"li"},"mix setup")),(0,i.kt)("li",{parentName:"ul"},"Ex\xe9cutez les tests avec ",(0,i.kt)("inlineCode",{parentName:"li"},"mix test")),(0,i.kt)("li",{parentName:"ul"},"Cr\xe9ez un r\xe9pertoire de projet pour conserver les artefacts de votre projet ",(0,i.kt)("inlineCode",{parentName:"li"},"mkdir sample-project")),(0,i.kt)("li",{parentName:"ul"},"Cr\xe9ez une nouvelle sp\xe9cification de projet avec ",(0,i.kt)("inlineCode",{parentName:"li"},"cp project.yaml.example ./sample-project/project.yaml")),(0,i.kt)("li",{parentName:"ul"},"Cr\xe9ez un fichier ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," avec ",(0,i.kt)("inlineCode",{parentName:"li"},"cp .env.example .env")),(0,i.kt)("li",{parentName:"ul"},"Installez les adaptateurs n\xe9cessaires via ",(0,i.kt)("inlineCode",{parentName:"li"},"npm install @openfn/language-http --prefix priv/openfn/runtime/node_modules --no-save --no-package-lock --global-style")),(0,i.kt)("li",{parentName:"ul"},"D\xe9marrez votre serveur de microservice avec ",(0,i.kt)("inlineCode",{parentName:"li"},'env $(cat .env | grep -v "#" | xargs ) iex -S mix phx.server'))),(0,i.kt)("h3",{id:"fonctionnement-dans-docker"},"Fonctionnement dans Docker"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Construire une image de docker avec ",(0,i.kt)("inlineCode",{parentName:"li"},"docker build -t openfn/microservice:v0.3.0 .")),(0,i.kt)("li",{parentName:"ul"},"Ex\xe9cutez avec ",(0,i.kt)("a",{parentName:"li",href:"#Docker-run"},"docker run command"))),(0,i.kt)("h2",{id:"configuration-de-projet"},"Configuration de projet"),(0,i.kt)("p",null,"You can configure the jobs, triggers, credentials and language packs used in your microservice in the ",(0,i.kt)("inlineCode",{parentName:"p"},"project.yaml")," config file."),(0,i.kt)("h3",{id:"premi\xe8re-configuration-en-utilisant-lexemple-de-configuration"},"Premi\xe8re configuration en utilisant l'exemple de configuration"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/OpenFn/microservice/blob/main/project.yaml.example"},"sample project configuration file")," describes an example project setup to help you get acquainted with this structure."),(0,i.kt)("p",null,"By default microservice is configured with 4 sample jobs:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"job-1")," est d\xe9clench\xe9 lorsqu'un message correspondant arrive \xe0 l'inbox (voir ",(0,i.kt)("inlineCode",{parentName:"li"},"trigger-1"),")."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"recurring-job")," est un job programm\xe9 pour s'ex\xe9cuter toutes les minutes et est li\xe9e au trigger cron ",(0,i.kt)("inlineCode",{parentName:"li"},"every-minute"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"flow-job")," et ",(0,i.kt)("inlineCode",{parentName:"li"},"catch-job")," s'ex\xe9cutent respectivement apr\xe8s ",(0,i.kt)("inlineCode",{parentName:"li"},"success")," et ",(0,i.kt)("inlineCode",{parentName:"li"},"failure")," de job-1.")),(0,i.kt)("p",null,"All of the jobs are configured with the language pack ",(0,i.kt)("inlineCode",{parentName:"p"},"openfn/language-common"),"."),(0,i.kt)("p",null,"In the default sample configuration a new message posted to ",(0,i.kt)("inlineCode",{parentName:"p"},"localhost:4000/inbox")," that matches ",(0,i.kt)("inlineCode",{parentName:"p"},"trigger-1")," (i.e. the message contains ",(0,i.kt)("inlineCode",{parentName:"p"},'"number":2'),") is greeted with an asynchronous acknowledgement receipt (",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP 202")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Data accepted and processing has begun"),") and will trigger ",(0,i.kt)("inlineCode",{parentName:"p"},"job-1")," to run."),(0,i.kt)("p",null,"You can try this out with the following snippet:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'curl -X POST -H "Content-Type: application/json" \\\n -d \'{\n  "number":2,\n  "surveyId": 37479\n}\' \\\n http://localhost:4000/inbox\n')),(0,i.kt)("p",null,"Posting a message not matching any of the triggers (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"\u201cnumber\u201d:3"),") equally prompts an acknowledgement but doesn\u2019t trigger any jobs."),(0,i.kt)("p",null,"Example message post for this non-match scenario:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'curl -X POST -H "Content-Type: application/json" \\\n -d \'{\n  "number":3,\n  "surveyId": 37479\n}\' \\\n http://localhost:4000/inbox\n')),(0,i.kt)("p",null,"HTTP ",(0,i.kt)("inlineCode",{parentName:"p"},"post")," requests made to ",(0,i.kt)("a",{parentName:"p",href:"http://localhost:4000/inbox"},(0,i.kt)("inlineCode",{parentName:"a"},"localhost:4000/inbox"))," will be processed by the ",(0,i.kt)("inlineCode",{parentName:"p"},"Receiver"),", according to the ",(0,i.kt)("inlineCode",{parentName:"p"},"credential"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"expression"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"adaptor")," defined in the project configuration ",(0,i.kt)("inlineCode",{parentName:"p"},"YAML")," file."),(0,i.kt)("p",null,"Time-based jobs will be run by ",(0,i.kt)("inlineCode",{parentName:"p"},"Engine")," according to the ",(0,i.kt)("inlineCode",{parentName:"p"},"credential"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"expression"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"adaptor")," defined in your ",(0,i.kt)("inlineCode",{parentName:"p"},"project.yaml")," file."),(0,i.kt)("h3",{id:"configuration-depuis-votre-projet-de-plateforme-openfn-existant"},"Configuration depuis votre projet de plateforme OpenFn existant"),(0,i.kt)("p",null,"If you have a project configured on OpenFn, you have two ways for exporting your config on the Project Settings page and running your project in microservice."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Si vous exportez en tant que ",(0,i.kt)("inlineCode",{parentName:"p"},"project.yaml"),", vous pouvez t\xe9l\xe9charger vos param\xe8tres au format ",(0,i.kt)("inlineCode",{parentName:"p"},"yaml")," \xe0 partir de la page de t\xe9l\xe9chargement de votre projet de plateforme ou \xe0 partir d'un lien dans l'e-mail g\xe9n\xe9r\xe9 automatiquement envoy\xe9 \xe0 votre adresse. Vous pouvez ins\xe9rer ce fichier dans votre environnement tel que configur\xe9 en utilisant le ",(0,i.kt)("a",{parentName:"p",href:"#Development-up-and-running-guide"},"Development Up and Running Guide"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Si vous exportez en tant que ",(0,i.kt)("inlineCode",{parentName:"p"},"microservice.zip"),", vous obtiendrez votre dossier microservice pr\xeat \xe0 fonctionner avec ",(0,i.kt)("inlineCode",{parentName:"p"},"docker"),", contenant"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"un fichier de configuration ",(0,i.kt)("inlineCode",{parentName:"li"},"docker-compose.yaml")),(0,i.kt)("li",{parentName:"ul"},"un dossier du projet contenant ",(0,i.kt)("inlineCode",{parentName:"li"},"project.yaml")),(0,i.kt)("li",{parentName:"ul"},"Fichier ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," avec les variables d'environnement par d\xe9faut pour docker"),(0,i.kt)("li",{parentName:"ul"},"un fichier ",(0,i.kt)("inlineCode",{parentName:"li"},"Readme"))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"cd")," into the folder and run the project with ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose up"),". If you don't have the docker image, it will be auto-pulled from ",(0,i.kt)("inlineCode",{parentName:"p"},"hub.docker.com"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Export Microservice Zip",src:t(46899).Z,width:"480",height:"257"})))}u.isMDXComponent=!0},46899:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/microservice_zip_export-9ae611d479650754fcb804c827f42f5c.gif"}}]);