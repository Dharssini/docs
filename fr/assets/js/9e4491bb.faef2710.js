(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[806],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return u},kt:function(){return m}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(a),m=r,f=p["".concat(l,".").concat(m)]||p[m]||c[m]||i;return a?n.createElement(f,o(o({ref:t},u),{},{components:a})):n.createElement(f,o({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},79919:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l},default:function(){return u}});var n=a(22122),r=a(19756),i=(a(67294),a(3905)),o={title:"Introduction aux Jobs"},s={unversionedId:"build/jobs",id:"build/jobs",isDocsHomePage:!1,title:"Introduction aux Jobs",description:"Un job d\xe9finit la s\xe9rie sp\xe9cifique de t\xe2ches ou d'actions de base de donn\xe9es \xe0 ex\xe9cuter lorsqu'un message d\xe9clencheur est re\xe7u (\xe0 partir d'un \xe9v\xe9nement) ou lorsqu'une heure pr\xe9programm\xe9e (et r\xe9currente) est atteinte.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/build/jobs.md",sourceDirName:"build",slug:"/build/jobs",permalink:"/fr/documentation/build/jobs",editUrl:"https://github.com/openfn/docs/edit/main/docs/build/jobs.md",version:"current",frontMatter:{title:"Introduction aux Jobs"},sidebar:"docs",previous:{title:"The Integration Toolkit",permalink:"/fr/documentation/getting-started/integration-toolkit"},next:{title:"A closer look at jobs",permalink:"/fr/documentation/jobs/understanding"}},l=[{value:"Les propri\xe9t\xe9s d&#39;un job",id:"les-propri\xe9t\xe9s-dun-job",children:[{value:"Adaptateurs",id:"adaptateurs",children:[]}]},{value:"Formulation d&#39;expressions de job",id:"formulation-dexpressions-de-job",children:[{value:"Une expression fondamentale",id:"une-expression-fondamentale",children:[]},{value:"dataValue",id:"datavalue",children:[]},{value:"An expression with custom Javascript",id:"an-expression-with-custom-javascript",children:[]}]},{value:"Available Javascript Globals",id:"available-javascript-globals",children:[]},{value:"Examples of adaptor-specific functions",id:"examples-of-adaptor-specific-functions",children:[{value:"language-common",id:"language-common",children:[]},{value:"Salesforce",id:"salesforce",children:[]},{value:"dhis2",id:"dhis2",children:[]},{value:"OpenMRS",id:"openmrs",children:[]}]},{value:"Snippets and samples",id:"snippets-and-samples",children:[{value:"Job expression (for CommCare to SF)",id:"job-expression-for-commcare-to-sf",children:[]},{value:"Accessing the &quot;data array&quot; in Open Data Kit submissions",id:"accessing-the-data-array-in-open-data-kit-submissions",children:[]},{value:"ODK to Salesforce: create parent record with many children from parent data",id:"odk-to-salesforce-create-parent-record-with-many-children-from-parent-data",children:[]},{value:"Create many child records WITHOUT a repeat group in ODK",id:"create-many-child-records-without-a-repeat-group-in-odk",children:[]},{value:"Salesforce: perform an update",id:"salesforce-perform-an-update",children:[]},{value:"Salesforce: Set record type using &#39;relationship(...)&#39;",id:"salesforce-set-record-type-using-relationship",children:[]},{value:"Salesforce: Set record type using record Type ID",id:"salesforce-set-record-type-using-record-type-id",children:[]},{value:"Telerivet: Send SMS based on Salesforce workflow alert",id:"telerivet-send-sms-based-on-salesforce-workflow-alert",children:[]},{value:"HTTP: fetch but don&#39;t fail!",id:"http-fetch-but-dont-fail",children:[]},{value:"Sample DHIS2 events API job:",id:"sample-dhis2-events-api-job",children:[]},{value:"Sample DHIS2 data value sets API job:",id:"sample-dhis2-data-value-sets-api-job",children:[]},{value:"sample openMRS expression, creates a person and then a patient",id:"sample-openmrs-expression-creates-a-person-and-then-a-patient",children:[]},{value:"merge many values into a child path",id:"merge-many-values-into-a-child-path",children:[]},{value:"arrayToString",id:"arraytostring",children:[]},{value:"access an image URL from an ODK submission",id:"access-an-image-url-from-an-odk-submission",children:[]},{value:"alterState (alter state) to make sure data is in an array",id:"alterstate-alter-state-to-make-sure-data-is-in-an-array",children:[]},{value:"Login in to a server with a custom SSL Certificate",id:"login-in-to-a-server-with-a-custom-ssl-certificate",children:[]}]},{value:"Anonymous Functions",id:"anonymous-functions",children:[{value:"Custom replacer",id:"custom-replacer",children:[]},{value:"Custom arrayToString",id:"custom-arraytostring",children:[]},{value:"Custom concatenation",id:"custom-concatenation",children:[]},{value:"Concatenation of null values",id:"concatenation-of-null-values",children:[]},{value:"Custom Nth reference ID",id:"custom-nth-reference-id",children:[]},{value:"Convert date string to standard ISO date for Salesforce",id:"convert-date-string-to-standard-iso-date-for-salesforce",children:[]},{value:"Use external ID fields for relationships during a bulk load in Salesforce",id:"use-external-id-fields-for-relationships-during-a-bulk-load-in-salesforce",children:[]},{value:"Bulk upsert with an external ID in salesforce",id:"bulk-upsert-with-an-external-id-in-salesforce",children:[]}]}],d={toc:l};function u(e){var t=e.components,a=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Un job d\xe9finit la s\xe9rie sp\xe9cifique de t\xe2ches ou d'actions de base de donn\xe9es \xe0 ex\xe9cuter lorsqu'un message d\xe9clencheur est re\xe7u (\xe0 partir d'un \xe9v\xe9nement) ou lorsqu'une heure pr\xe9programm\xe9e (et r\xe9currente) est atteinte."),(0,i.kt)("h2",{id:"les-propri\xe9t\xe9s-dun-job"},"Les propri\xe9t\xe9s d'un job"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Name")," (Nom)\xa0- un nom lisible par l'homme"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Project")," (Projet)\xa0-\xa0le projet auquel le job appartient"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Trigger"),"\xa0- le trigger utilis\xe9 pour contr\xf4ler le d\xe9marrage du job"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Adaptor")," (Adaptateur)\xa0-\xa0l'adaptateur utilis\xe9 pour apporter une fonctionnalit\xe9 sp\xe9cifique \xe0 l'outil pour ce job (p. ex., ",(0,i.kt)("inlineCode",{parentName:"li"},"language-dhis2")," ou ",(0,i.kt)("inlineCode",{parentName:"li"},"language-commcare"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Auto-process?")," (Traitement automatique ?)\xa0- un commutateur vrai/faux qui configure le job pour qu'il s'ex\xe9cute automatiquement sur les messages correspondants lorsqu'ils arrivent."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Expression")," - le \xab\xa0script\xa0\xbb du job lui-m\xeame, une s\xe9quence d'op\xe9rations qui indiquent au job ce qu'il doit faire.")),(0,i.kt)("p",null,"Ici, concentrons nous sur l'expression."),(0,i.kt)("h3",{id:"adaptateurs"},"Adaptateurs"),(0,i.kt)("p",null,"Nous avons tout une section sur la cr\xe9ation de nouveaux ",(0,i.kt)("a",{parentName:"p",href:"./adaptors"},"Adaptateurs"),", mais l'\xe9l\xe9ment essentiel \xe0 prendre en compte lors de la r\xe9daction d'un job est que vous devez choisir un ",(0,i.kt)("strong",{parentName:"p"},"adaptateur"),", et une ",(0,i.kt)("strong",{parentName:"p"},"version de l'adaptateur"),"."),(0,i.kt)("p",null,"Toute la discussion ci-dessous des fonctions d'aide comme ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," ou ",(0,i.kt)("inlineCode",{parentName:"p"},"findPatient")," n\xe9cessite une certaine compr\xe9hension des adaptateurs. Lorsque vous ex\xe9cutez un job, vous empruntez un ensemble de fonctionnalit\xe9s qui ont \xe9t\xe9 construites pour se connecter \xe0 un type particulier d'API ."),(0,i.kt)("p",null,"Par exemple, ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," signifie une chose dans ",(0,i.kt)("inlineCode",{parentName:"p"},"language-salesforce")," et tout autre chose dans ",(0,i.kt)("inlineCode",{parentName:"p"},"language-dhis2"),". Pour cette raison, avant de commencer \xe0 \xe9crire un job , vous devez savoir avec quel ",(0,i.kt)("inlineCode",{parentName:"p"},"adaptateur")," vous travaillez."),(0,i.kt)("p",null,"Regardez les logs suivants\xa0:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u25f2 \u25f1  @openfn/core#v1.3.12 (Node.js v12.20.1) \u2502\n\u2502 \u25f3 \u25f0             @openfn/language-http#v3.1.5 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n... the rest of the logs\n\nFinished.\n")),(0,i.kt)("p",null,"Notez comment les ",(0,i.kt)("em",{parentName:"p"},"4 premi\xe8res lignes")," du log de n'importe quelle ex\xe9cution d'OpenFn vous indiqueront quel adaptateur vous ex\xe9cutez. (ainsi que la version du core et de NodeJs). Ceci est extr\xeamement important, particuli\xe8rement si vous essayez de d\xe9panner des jobs dans divers environnements (comme votre propre shell, OpenFn.org, OpenFn/microservice, etc.)."),(0,i.kt)("h4",{id:"versions-de-ladaptateur"},"Versions de l'adaptateur"),(0,i.kt)("p",null,"Notez que les adaptateurs peuvent changer au fil du temps. Ils sont open source, et nous encourageons le plus de contribution possible\xa0: les nouvelles versions sont mises \xe0 disposition sur OpenFn.org d\xe8s qu'elles passent nos \xe9valuations de s\xe9curit\xe9."),(0,i.kt)("p",null,"Faites bien attention \xe0 la ",(0,i.kt)("inlineCode",{parentName:"p"},"version")," que vous utilisez pour r\xe9diger un job. Consid\xe9rez les logs suivants\xa0:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u25f2 \u25f1  @openfn/core#v1.3.12 (Node.js v12.20.1)  \u2502\n\u2502 \u25f3 \u25f0             @openfn/language-http#v2.4.15 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n... the rest of the logs\n\nFinished.\n")),(0,i.kt)("p",null,"Notez qu'ici, OpenFn/core version ",(0,i.kt)("inlineCode",{parentName:"p"},"1.3.12")," fonctionne sur Node.js ",(0,i.kt)("inlineCode",{parentName:"p"},"12.20.1")," et en utilisant ",(0,i.kt)("inlineCode",{parentName:"p"},"@openfn/language-http#v2. .15")," qui pourrait avoir des fonctions d'aide tr\xe8s diff\xe9rentes de ",(0,i.kt)("inlineCode",{parentName:"p"},"@openfn/language-http#v3.1.5")),(0,i.kt)("p",null,"Les adaptateurs respectent ",(0,i.kt)("a",{parentName:"p",href:"https://semver.org/"},"SEMVER")," afin que vous puissiez \xeatre raisonnablement assur\xe9 que la mise \xe0 jour de ",(0,i.kt)("inlineCode",{parentName:"p"},"x.1.z")," \xe0 ",(0,i.kt)("inlineCode",{parentName:"p"},"x.2.z")," n'entra\xeene pas l'\xe9chec du code job existant. Mais une mise \xe0 jour de ",(0,i.kt)("inlineCode",{parentName:"p"},"3.y.z")," \xe0 ",(0,i.kt)("inlineCode",{parentName:"p"},"4.y.z")," peut, dans les mises \xe0 jour ",(0,i.kt)("em",{parentName:"p"},"majeures")," SEMVER (celles qui changent le premier chiffre dans le num\xe9ro de version ",(0,i.kt)("inlineCode",{parentName:"p"},"x.y.z"),") avoir des \xab\xa0cassures\xa0\xbb ou des changements \xab\xa0non r\xe9trocompatibles\xa0\xbb."),(0,i.kt)("h2",{id:"formulation-dexpressions-de-job"},"Formulation d'expressions de job"),(0,i.kt)("p",null,"Dans la plupart des cas, une expression de job est une s\xe9rie d'actions ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," ou ",(0,i.kt)("inlineCode",{parentName:"p"},"upsert")," qui sont ex\xe9cut\xe9es apr\xe8s qu'un message arrive, en utilisant les donn\xe9es de ce message. Cela pourrait ressembler \xe0 ceci\xa0:"),(0,i.kt)("h3",{id:"une-expression-fondamentale"},"Une expression fondamentale"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"create(\n  'Patient__c',\n  fields(\n    field('Name', dataValue('form.surname')),\n    field('Other Names', dataValue('form.firstName')),\n    field('Age__c', dataValue('form.ageInYears')),\n    field('Is_Enrolled__c', true),\n    field('Enrollment_Status__c', 3)\n  )\n);\n")),(0,i.kt)("p",null,"Cela cr\xe9erait un nouveau ",(0,i.kt)("inlineCode",{parentName:"p"},"Patient__c")," dans un autre syst\xe8me. Le ",(0,i.kt)("inlineCode",{parentName:"p"},"Name")," (nom) du patient sera d\xe9termin\xe9 par le message d\xe9clencheur (la valeur \xe0 l'int\xe9rieur du ",(0,i.kt)("inlineCode",{parentName:"p"},"form.surname"),", sp\xe9cifiquement) et ",(0,i.kt)("inlineCode",{parentName:"p"},"Age__c")," du patient ",(0,i.kt)("em",{parentName:"p"},"sera toujours")," 7. Voyez comment nous l'avons cod\xe9 en dur?"),(0,i.kt)("p",null,"Ce que vous voyez ci-dessus est la propre syntaxe d'OpenFn, et vous avez acc\xe8s \xe0 des douzaines de \xab fonctions d'aide \xbb communes comme ",(0,i.kt)("inlineCode",{parentName:"p"},"dataValue(path)")," et des fonctions sp\xe9cifiques \xe0 la destination comme ",(0,i.kt)("inlineCode",{parentName:"p"},"create(object,attributes)"),". Alors que la plupart des cas sont couverts pr\xeats \xe0 l'emploi, les jobs sont ",(0,i.kt)("strong",{parentName:"p"},"\xe9valu\xe9s comme Javascript"),". Cela signifie que vous pouvez \xe9crire vos propres fonctions personnalis\xe9es et anonymes pour faire ce que vous voulez\xa0:"),(0,i.kt)("h3",{id:"datavalue"},"dataValue"),(0,i.kt)("p",null,"La \xab\xa0fonction d'aide\xa0\xbb la plus couramment utilis\xe9e est ",(0,i.kt)("inlineCode",{parentName:"p"},"dataValue(...)"),". Cette fonction utilise un seul argument\xa0: le ",(0,i.kt)("em",{parentName:"p"},"path")," (chemin) vers certaines donn\xe9es auxquelles vous essayez d'acc\xe9der dans le message qui a d\xe9clench\xe9 une ex\xe9cution particuli\xe8re. Dans l'exemple ci-dessus, remarquez que ",(0,i.kt)("inlineCode",{parentName:"p"},"Is_Enrolled__c")," est ",(0,i.kt)("em",{parentName:"p"},"toujours")," mis \xe0 ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", mais ",(0,i.kt)("inlineCode",{parentName:"p"},"Name")," change pour chaque message qui d\xe9clenche l'ex\xe9cution de ce job. Il est r\xe9gl\xe9 sur ",(0,i.kt)("inlineCode",{parentName:"p"},"dataValue('form.surname')")," ce qui signifie qu'il va d\xe9finir ",(0,i.kt)("inlineCode",{parentName:"p"},"Name")," \xe0 n'importe quelle valeur pr\xe9sente \xe0 ",(0,i.kt)("inlineCode",{parentName:"p"},"state.data.form.surname")," pour le message d\xe9clencheur. \xc7a peut \xeatre Bob pour un message, et Alice pour un autre."),(0,i.kt)("p",null,":::remarque"),(0,i.kt)("p",null,"Note that for message-triggered jobs, ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," will always have it's ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," key (i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"state.data"),") set to the body of the triggering message (aka HTTP request)."),(0,i.kt)("p",null,"I.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"dataValue('some.path') === state.data.some.path"),", as evaluated at the time that the operation (",(0,i.kt)("inlineCode",{parentName:"p"},"create")," in the above expression) is executed."),(0,i.kt)("p",null,":::"),(0,i.kt)("h3",{id:"an-expression-with-custom-javascript"},"An expression with custom Javascript"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"create(\n  'Patient__c',\n  fields(\n    field('Name', state => {\n      console.log('Manipulate state to get your desired output.');\n      return Array.apply(null, state.data.form.names).join(', ');\n    }),\n    field('Age__c', 7)\n  )\n);\n")),(0,i.kt)("p",null,"Here, the patient's name will be a comma separated concatenation of all the values in the ",(0,i.kt)("inlineCode",{parentName:"p"},"patient_names")," array from our source message."),(0,i.kt)("h2",{id:"available-javascript-globals"},"Available Javascript Globals"),(0,i.kt)("p",null,"For security reasons, users start with access to the following standard Javascript globals, and can request more by opening an issue on Github:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Array"),(0,i.kt)("li",{parentName:"ul"},"console"),(0,i.kt)("li",{parentName:"ul"},"JSON"),(0,i.kt)("li",{parentName:"ul"},"Number"),(0,i.kt)("li",{parentName:"ul"},"Promise"),(0,i.kt)("li",{parentName:"ul"},"String")),(0,i.kt)("p",null,"*","N.B. The runtime environment on the server is Node v6.17.0."),(0,i.kt)("p",null,"Other than the expression tree, Jobs have certain attributes that must be set:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Filter")," - The message filter that will triggers the job."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Adaptor")," - The adaptor for the destination system you're connecting to."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Credential")," - The credential that will be used to gain access to that destination system."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Active?")," - A boolean which determines whether the job runs in real-time when matching messages arrive.")),(0,i.kt)("h2",{id:"examples-of-adaptor-specific-functions"},"Examples of adaptor-specific functions"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"N.B.: This is just a sample.")," There are lots more available in the language-packs."),(0,i.kt)("h3",{id:"language-common"},"language-common"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"field('destination_field_name__c', 'value')")," Returns a key, value pair in an array. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L248"},"(source)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fields(list_of_fields)")," zips key value pairs into an object. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L258"},"(source)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dataValue('JSON_path')")," Picks out a single value from source data. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L71"},"(source)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"each(JSON_path, operation(...))")," Scopes an array of data based on a JSONPath ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L194"},"(source)"),". See beta.each when using multiple each()'s in an expression."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'each(merge(dataPath("CHILD_ARRAY[*]"),fields(field("metaId", dataValue("*meta-instance-id*")),field("parentId", lastReferenceValue("id")))), create(...))')," merges data into an array then creates for each item in the array ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L272"},"(source)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lastReferenceValue('id')")," gets the sfID of the last item created ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L96-L100"},"(source)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"function(state){return state.references[state.references.length-N].id})")," gets the sfID of the nth item created")),(0,i.kt)("h4",{id:"each"},"each()"),(0,i.kt)("p",null,"Read more about each here: ",(0,i.kt)("a",{parentName:"p",href:"/documentation/jobs/each"},"The each(...) operation")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"each(\n  dataPath('csvData[*]'),\n  upsertTEI(\n    'aX5hD4qUpRW', //piirs uid\n    {\n      trackedEntityType: 'bsDL4dvl2ni',\n      orgUnit: dataValue('OrgUnit'),\n      attributes: [\n        {\n          attribute: 'aX5hD4qUpRW',\n          value: dataValue('aX5hD4qUpRW'),\n        },\n        {\n          attribute: 'MxQPuS9G7hh',\n          value: dataValue('MxQPuS9G7hh'),\n        },\n      ],\n    },\n    { strict: false }\n  )\n);\n")),(0,i.kt)("h4",{id:"betaeach"},"beta.each"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"beta.each(JSON_path, operation(...))\n")),(0,i.kt)("p",null,"Scopes an array of data based on a JSONPath but then returns to the state it was given upon completion ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/OpenFn/language-common/blob/master/src/beta.js#L44"},"(source)"),". This is necessary if you string multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"each(...)")," functions together in-line in the same expression. (E.g., Given data which has multiple separate 'repeat groups' in a form which are rendered as arrays, you want to create new records for each item inside the first repeat group, then ",(0,i.kt)("em",{parentName:"p"},"RETURN TO THE TOP LEVEL")," of the data, and then create new records for each item in the second repeat group. Using ",(0,i.kt)("inlineCode",{parentName:"p"},"beta.each(...)")," lets you enter the first array, create your records, then return to the top level and be able to enter the second array."),(0,i.kt)("h3",{id:"salesforce"},"Salesforce"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'create("DEST_OBJECT_NAME__C", fields(...))')," Create a new object. Takes 2 parameters: An object and attributes. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L42-L63"},"(source)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'upsert("DEST_OBJECT_NAME__C", "DEST_OBJECT_EXTERNAL_ID__C", fields(...))')," Creates or updates an object. Takes 3 paraneters: An object, an ID field and attributes. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L65-L80"},"(source)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'relationship("DEST_RELATIONSHIP_NAME__r", "EXTERNAL_ID_ON_RELATED_OBJECT__C", "SOURCE_DATA_OR_VALUE")')," Adds a lookup or 'dome insert' to a record. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-salesforce/blob/master/src/sourceHelpers.js#L21-L40"},"(source)"))),(0,i.kt)("h3",{id:"dhis2"},"dhis2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"event(...)")," Creates an event. ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-dhis2/blob/master/src/Adaptor.js#L31-L60"},"(source)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dataValueSet(...)")," Send data values using the dataValueSets resource ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-dhis2/blob/master/src/Adaptor.js#L62-L82"},"(source)"))),(0,i.kt)("h3",{id:"openmrs"},"OpenMRS"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"person(...)")," Takes a payload of data to create a person ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-openmrs/blob/master/src/Adaptor.js#L31-L60"},"(source)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"patient(...)")," Takes a payload of data to create a patient ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-openmrs/blob/master/src/Adaptor.js#L62-L90"},"(source)"))),(0,i.kt)("h2",{id:"snippets-and-samples"},"Snippets and samples"),(0,i.kt)("p",null,"Below you can find some examples of block code for different functions and data handling contexts."),(0,i.kt)("h3",{id:"job-expression-for-commcare-to-sf"},"Job expression (for CommCare to SF)"),(0,i.kt)("p",null,"The following job expression will take a matching receipt and use data from that receipt to upsert a ",(0,i.kt)("inlineCode",{parentName:"p"},"Patient__c")," record in Salesforce and create multiple new ",(0,i.kt)("inlineCode",{parentName:"p"},"Patient_Visit__c")," (child to Patient) records."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"upsert(\n  'Patient__c',\n  'Patient_Id__c',\n  fields(\n    field('Patient_Id__c', dataValue('form.patient_ID')),\n    relationship('Nurse__r', 'Nurse_ID_code__c', dataValue('form.staff_id')),\n    field('Phone_Number__c', dataValue('form.mobile_phone'))\n  )\n),\n  each(\n    join('$.data.form.visits[*]', '$.references[0].id', 'Id'),\n    create(\n      'Visit__c',\n      fields(\n        field('Patient__c', dataValue('Id')),\n        field('Date__c', dataValue('date')),\n        field('Reason__c', dataValue('why_did_they_see_doctor'))\n      )\n    )\n  );\n")),(0,i.kt)("h3",{id:"accessing-the-data-array-in-open-data-kit-submissions"},'Accessing the "data array" in Open Data Kit submissions'),(0,i.kt)("p",null,'Notice how we use "each" to get data from each item inside the "data array" in ODK.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"each(\n  '$.data.data[*]',\n  create(\n    'ODK_Submission__c',\n    fields(\n      field('Site_School_ID_Number__c', dataValue('school')),\n      field('Date_Completed__c', dataValue('date')),\n      field('comments__c', dataValue('comments')),\n      field('ODK_Key__c', dataValue('*meta-instance-id*'))\n    )\n  )\n);\n")),(0,i.kt)("h3",{id:"odk-to-salesforce-create-parent-record-with-many-children-from-parent-data"},"ODK to Salesforce: create parent record with many children from parent data"),(0,i.kt)("p",null,"Here, the user brings ",(0,i.kt)("inlineCode",{parentName:"p"},"time_end")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"parentId")," onto the line items from the parent object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"each(\n  dataPath('data[*]'),\n  combine(\n    create(\n      'transaction__c',\n      fields(\n        field('Transaction_Date__c', dataValue('today')),\n        relationship(\n          'Person_Responsible__r',\n          'Staff_ID_Code__c',\n          dataValue('person_code')\n        ),\n        field('metainstanceid__c', dataValue('*meta-instance-id*'))\n      )\n    ),\n    each(\n      merge(\n        dataPath('line_items[*]'),\n        fields(\n          field('end', dataValue('time_end')),\n          field('parentId', lastReferenceValue('id'))\n        )\n      ),\n      create(\n        'line_item__c',\n        fields(\n          field('transaction__c', dataValue('parentId')),\n          field('Barcode__c', dataValue('product_barcode')),\n          field('ODK_Form_Completed__c', dataValue('end'))\n        )\n      )\n    )\n  )\n);\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"NB - there was a known bug with the ",(0,i.kt)("inlineCode",{parentName:"strong"},"combine")," function which has been resolved. ",(0,i.kt)("inlineCode",{parentName:"strong"},"combine")," can be used to combine two operations into one and is commonly used to run multiple ",(0,i.kt)("inlineCode",{parentName:"strong"},"create"),"'s inside an ",(0,i.kt)("inlineCode",{parentName:"strong"},"each(path, operation)"),". The source code for combine can be found here: ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L204-L222"},"language-common: combine")))),(0,i.kt)("h3",{id:"create-many-child-records-without-a-repeat-group-in-odk"},"Create many child records WITHOUT a repeat group in ODK"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"beta.each(\n  '$.data.data[*]',\n  upsert(\n    'Outlet__c',\n    'Outlet_Code__c',\n    fields(\n      field('Outlet_Code__c', dataValue('outlet_code')),\n      field('Location__Latitude__s', dataValue('gps:Latitude')),\n      field('Location__Longitude__s', dataValue('gps:Longitude'))\n    )\n  )\n),\n  beta.each(\n    '$.data.data[*]',\n    upsert(\n      'Outlet_Call__c',\n      'Invoice_Number__c',\n      fields(\n        field('Invoice_Number__c', dataValue('invoice_number')),\n        relationship('Outlet__r', 'Outlet_Code__c', dataValue('outlet_code')),\n        relationship('RecordType', 'name', 'No Call Card'),\n        field('Trip__c', 'a0FN0000008jPue'),\n        relationship(\n          'Sales_Person__r',\n          'Sales_Rep_Code__c',\n          dataValue('sales_rep_code')\n        ),\n        field('Date__c', dataValue('date')),\n        field('Comments__c', dataValue('comments'))\n      )\n    )\n  );\n")),(0,i.kt)("h3",{id:"salesforce-perform-an-update"},"Salesforce: perform an update"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'update("Patient__c", fields(\n  field("Id", dataValue("pathToSalesforceId")),\n  field("Name__c", dataValue("patient.first_name")),\n  field(...)\n));\n')),(0,i.kt)("h3",{id:"salesforce-set-record-type-using-relationship"},"Salesforce: Set record type using 'relationship(...)'"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"create(\n  'custom_obj__c',\n  fields(\n    relationship(\n      'RecordType',\n      'name',\n      dataValue('submission_type'),\n      field('name', dataValue('Name'))\n    )\n  )\n);\n")),(0,i.kt)("h3",{id:"salesforce-set-record-type-using-record-type-id"},"Salesforce: Set record type using record Type ID"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"each(\n  '$.data.data[*]',\n  create(\n    'fancy_object__c',\n    fields(\n      field('RecordTypeId', '012110000008s19'),\n      field('site_size', dataValue('size'))\n    )\n  )\n);\n")),(0,i.kt)("h3",{id:"telerivet-send-sms-based-on-salesforce-workflow-alert"},"Telerivet: Send SMS based on Salesforce workflow alert"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"send(\n  fields(\n    field(\n      'to_number',\n      dataValue(\n        'Envelope.Body.notifications.Notification.sObject.phone_number__c'\n      )\n    ),\n    field('message_type', 'sms'),\n    field('route_id', ''),\n    field('content', function (state) {\n      return 'Hey there. Your name is '.concat(\n        dataValue('Envelope.Body.notifications.Notification.sObject.name__c')(\n          state\n        ),\n        '.'\n      );\n    })\n  )\n);\n")),(0,i.kt)("h3",{id:"http-fetch-but-dont-fail"},"HTTP: fetch but don't fail!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// =============\n// We use "fetchWithErrors(...)" so that when the\n// SMS gateway returns an error the run does not "fail".\n// It "succeeds" and then delivers that error message\n// back to Salesforce with the "Update SMS Status" job.\n// =============\nfetchWithErrors({\n  getEndpoint: \'send_to_contact\',\n  query: function (state) {\n    return {\n      msisdn:\n        state.data.Envelope.Body.notifications.Notification.sObject\n          .SMS__Phone_Number__c,\n      message:\n        state.data.Envelope.Body.notifications.Notification.sObject\n          .SMS__Message__c,\n      api_key: \'some-secret-key\',\n    };\n  },\n  externalId: state.data.Envelope.Body.notifications.Notification.sObject.Id,\n  postUrl: \'https://www.openfn.org/inbox/another-secret-key\',\n});\n')),(0,i.kt)("h3",{id:"sample-dhis2-events-api-job"},"Sample DHIS2 events API job:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"event(\n  fields(\n    field('program', 'eBAyeGv0exc'),\n    field('orgUnit', 'DiszpKrYNg8'),\n    field('eventDate', dataValue('properties.date')),\n    field('status', 'COMPLETED'),\n    field('storedBy', 'admin'),\n    field('coordinate', {\n      latitude: '59.8',\n      longitude: '10.9',\n    }),\n    field('dataValues', function (state) {\n      return [\n        {\n          dataElement: 'qrur9Dvnyt5',\n          value: dataValue('properties.prop_a')(state),\n        },\n        {\n          dataElement: 'oZg33kd9taw',\n          value: dataValue('properties.prop_b')(state),\n        },\n        {\n          dataElement: 'msodh3rEMJa',\n          value: dataValue('properties.prop_c')(state),\n        },\n      ];\n    })\n  )\n);\n")),(0,i.kt)("h3",{id:"sample-dhis2-data-value-sets-api-job"},"Sample DHIS2 data value sets API job:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"dataValueSet(\n  fields(\n    field('dataSet', 'pBOMPrpg1QX'),\n    field('orgUnit', 'DiszpKrYNg8'),\n    field('period', '201401'),\n    field('completeData', dataValue('date')),\n    field('dataValues', function (state) {\n      return [\n        { dataElement: 'f7n9E0hX8qk', value: dataValue('prop_a')(state) },\n        { dataElement: 'Ix2HsbDMLea', value: dataValue('prop_b')(state) },\n        { dataElement: 'eY5ehpbEsB7', value: dataValue('prop_c')(state) },\n      ];\n    })\n  )\n);\n")),(0,i.kt)("h3",{id:"sample-openmrs-expression-creates-a-person-and-then-a-patient"},"sample openMRS expression, creates a person and then a patient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"person(\n  fields(\n    field('gender', 'F'),\n    field('names', function (state) {\n      return [\n        {\n          givenName: dataValue('form.first_name')(state),\n          familyName: dataValue('form.last_name')(state),\n        },\n      ];\n    })\n  )\n),\n  patient(\n    fields(\n      field('person', lastReferenceValue('uuid')),\n      field('identifiers', function (state) {\n        return [\n          {\n            identifier: '1234',\n            identifierType: '8d79403a-c2cc-11de-8d13-0010c6dffd0f',\n            location: '8d6c993e-c2cc-11de-8d13-0010c6dffd0f',\n            preferred: true,\n          },\n        ];\n      })\n    )\n  );\n")),(0,i.kt)("h3",{id:"merge-many-values-into-a-child-path"},"merge many values into a child path"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'each(\n  merge(\n    dataPath("CHILD_ARRAY[*]"),\n    fields(\n      field("metaId", dataValue("*meta-instance-id*")),\n      field("parentId", lastReferenceValue("id"))\n    )\n  ),\n  create(...)\n)\n')),(0,i.kt)("h3",{id:"arraytostring"},"arrayToString"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"arrayToString(arr, separator_string);\n")),(0,i.kt)("h3",{id:"access-an-image-url-from-an-odk-submission"},"access an image URL from an ODK submission"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// In ODK the image URL is inside an image object...\nfield("Photo_URL_text__c", dataValue("image.url")),\n')),(0,i.kt)("h3",{id:"alterstate-alter-state-to-make-sure-data-is-in-an-array"},"alterState (alter state) to make sure data is in an array"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Here, we make sure CommCare gives us an array to use in each(merge(...), ...)\nalterState(state => {\n  const idCards = state.data.form.ID_cards_given_to_vendor;\n  if (!Array.isArray(idCards)) {\n    state.data.form.ID_cards_given_to_vendor = [idCards];\n  }\n  return state;\n});\n\n// Now state has been changed, and we carry on...\neach(\n  merge(\n    dataPath('form.ID_cards_given_to_vendor[*]'),\n    fields(\n      field('Vendor_Id', dataValue('form.ID_vendor')),\n      field('form_finished_time', dataValue('form.meta.timeEnd'))\n    )\n  ),\n  upsert(\n    'Small_Packet__c',\n    'sp_id__c',\n    fields(\n      field('sp_id__c', dataValue('ID_cards_given_to_vendor')),\n      relationship('Vendor__r', 'Badge_Code__c', dataValue('Vendor_Id')),\n      field(\n        'Small_Packet_Distribution_Date__c',\n        dataValue('form_finished_time')\n      )\n    )\n  )\n);\n")),(0,i.kt)("h3",{id:"login-in-to-a-server-with-a-custom-ssl-certificate"},"Login in to a server with a custom SSL Certificate"),(0,i.kt)("p",null,"This snippet describes how you would connect to a secure server ignoring SSL certificate verification. Set ",(0,i.kt)("inlineCode",{parentName:"p"},"strictSSL: false")," in the options argument of the ",(0,i.kt)("inlineCode",{parentName:"p"},"post")," function in ",(0,i.kt)("inlineCode",{parentName:"p"},"language-http"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"post(\n  `${state.configuration.url}/${path}`,\n  {\n    headers: { 'content-type': 'application/json' },\n    body: {\n      email: 'Luka',\n      password: 'somethingSecret',\n    },\n    strictSSL: false,\n  },\n  callback\n);\n")),(0,i.kt)("h2",{id:"anonymous-functions"},"Anonymous Functions"),(0,i.kt)("p",null,"Different to ",(0,i.kt)("a",{parentName:"p",href:"#examples-of-adaptor-specific-functions"},"Named Functions"),", Anonymous functions are generic pieces of javascript which you can write to suit your needs. Here are some examples of these custom functions:"),(0,i.kt)("h3",{id:"custom-replacer"},"Custom replacer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"field('destination__c', state => {\n  console.log(something);\n  return dataValue('path_to_data')(state).toString().replace('cats', 'dogs');\n});\n")),(0,i.kt)("p",null,'This will replace all "cats" with "dogs" in the string that lives at ',(0,i.kt)("inlineCode",{parentName:"p"},"path_to_data"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"NOTE:")," The JavaScript ",(0,i.kt)("inlineCode",{parentName:"p"},"replace()")," function only replaces the first instance of whatever argument you specify. If you're looking for a way to replace all instances, we suggest you use a regex like we did in the ",(0,i.kt)("a",{parentName:"p",href:"#custom-concatenation-of-null-values"},"example")," below.")),(0,i.kt)("h3",{id:"custom-arraytostring"},"Custom arrayToString"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'field("target_specie_list__c", function(state) {\n  return Array.apply(\n    null, sourceValue("$.data.target_specie_list")(state)\n  ).join(\', \')\n}),\n')),(0,i.kt)("p",null,'It will take an array, and concatenate each item into a string with a ", " separator.'),(0,i.kt)("h3",{id:"custom-concatenation"},"Custom concatenation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"field('ODK_Key__c', function (state) {\n  return dataValue('metaId')(state).concat('(', dataValue('index')(state), ')');\n});\n")),(0,i.kt)("p",null,"This will concatenate two values."),(0,i.kt)("h3",{id:"concatenation-of-null-values"},"Concatenation of null values"),(0,i.kt)("p",null,"This will concatenate many values, even if one or more are null, writing them to a field called Main_Office_City_c."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'...\n  field("Main_Office_City__c", function(state) {\n    return arrayToString([\n      dataValue("Main_Office_City_a")(state) === null ? "" : dataValue("Main_Office_City_a")(state).toString().replace(/-/g, ""),\n      dataValue("Main_Office_City_b")(state) === null ? "" : dataValue("Main_Office_City_a")(state).toString().replace(/-/g, ""),\n      dataValue("Main_Office_City_b")(state) === null ? "" : dataValue("Main_Office_City_a")(state).toString().replace(/-/g, ""),\n      dataValue("Main_Office_City_b")(state) === null ? "" : dataValue("Main_Office_City_d")(state).toString().replace(/-/g, " "),\n    ].filter(Boolean), \',\')\n})\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Notez comment cette fonction personnalis\xe9e utilise la fonction ",(0,i.kt)("strong",{parentName:"p"},"regex")," ",(0,i.kt)("inlineCode",{parentName:"p"},"/-/g")," pour s'assurer que toutes les instances sont comptabilis\xe9es (g = recherche globale).")),(0,i.kt)("h3",{id:"custom-nth-reference-id"},"Custom Nth reference ID"),(0,i.kt)("p",null,"If you ever want to retrieve the FIRST object you created, or the SECOND, or the Nth, for that matter, a function like this will do the trick."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"field('parent__c', function (state) {\n  return state.references[state.references.length - 1].id;\n});\n")),(0,i.kt)("p",null,'See how instead of taking the id of the "last" thing that was created in Salesforce, you\'re taking the id of the 1st thing, or 2nd thing if you replace "length-1" with "length-2".'),(0,i.kt)("h3",{id:"convert-date-string-to-standard-iso-date-for-salesforce"},"Convert date string to standard ISO date for Salesforce"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"field('Payment_Date__c', function (state) {\n  return new Date(dataValue('payment_date')(state)).toISOString();\n});\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"NOTE"),": The output of this function will always be formatted according to GMT time-zone.")),(0,i.kt)("h3",{id:"use-external-id-fields-for-relationships-during-a-bulk-load-in-salesforce"},"Use external ID fields for relationships during a bulk load in Salesforce"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"array.map(item => {\n  return {\n    Patient_Name__c: item.fullName,\n    'Clinic__r.Unique_Clinic_Identifier__c': item.clinicId,\n    'RecordType.Name': item.type,\n  };\n});\n")),(0,i.kt)("h3",{id:"bulk-upsert-with-an-external-id-in-salesforce"},"Bulk upsert with an external ID in salesforce"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"bulk(\n  'Visit_new__c',\n  'upsert',\n  {\n    extIdField: 'commcare_case_id__c',\n    failOnError: true,\n    allowNoOp: true,\n  },\n  dataValue('patients')\n);\n")))}u.isMDXComponent=!0}}]);