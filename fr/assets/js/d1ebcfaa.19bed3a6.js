(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[6293],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return p}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=u(n),p=r,g=m["".concat(o,".").concat(p)]||m[p]||c[p]||i;return n?a.createElement(g,s(s({ref:t},d),{},{components:n})):a.createElement(g,s({ref:t},d))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var u=2;u<i;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},57258:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return o},default:function(){return d}});var a=n(22122),r=n(19756),i=(n(67294),n(3905)),s={title:"Triggers"},l={unversionedId:"build/triggers",id:"build/triggers",isDocsHomePage:!1,title:"Triggers",description:"Les triggers sont responsables du d\xe9marrage automatique du job. Il en existe 4 types. Les plus courants sont les triggers de type \xab\xa0filtre de messages\xa0\xbb , mais il existe aussi les triggers de type \xab\xa0cron\xa0\xbb , \xab\xa0flux\xa0\xbb et \xab\xa0\xe9chec\xa0\xbb.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/build/triggers.md",sourceDirName:"build",slug:"/build/triggers",permalink:"/fr/documentation/build/triggers",editUrl:"https://github.com/openfn/docs/edit/main/docs/build/triggers.md",version:"current",frontMatter:{title:"Triggers"},sidebar:"docs",previous:{title:"The OpenFn Job Studio",permalink:"/fr/documentation/jobs/job-studio"},next:{title:"Credentials",permalink:"/fr/documentation/build/credentials"}},o=[{value:"Types de trigger",id:"types-de-trigger",children:[{value:"Triggers de filtre de messages",id:"triggers-de-filtre-de-messages",children:[]},{value:"Triggers Cron (anciennement minuteurs)",id:"triggers-cron-anciennement-minuteurs",children:[]},{value:"Triggers de flux",id:"triggers-de-flux",children:[]},{value:"Triggers d&#39;\xe9chec",id:"triggers-d\xe9chec",children:[]}]},{value:"Traitement des jobs cron",id:"traitement-des-jobs-cron",children:[{value:"Managing the size of <code>state</code> for Timer Jobs",id:"managing-the-size-of-state-for-timer-jobs",children:[]},{value:"A quick fix for final state bloat",id:"a-quick-fix-for-final-state-bloat",children:[]}]},{value:"Filter Matching in Detail",id:"filter-matching-in-detail",children:[{value:"Filter 1, simple inclusion",id:"filter-1-simple-inclusion",children:[]},{value:"Filter 2, inclusion <em>and</em> exclusion",id:"filter-2-inclusion-and-exclusion",children:[]}]},{value:"More filter samples",id:"more-filter-samples",children:[{value:"Match messages <code>WHERE</code> the <code>formId</code> is <code>&quot;Robot_Photo_21.04.2015&quot;</code>",id:"match-messages-where-the-formid-is-robot_photo_21042015",children:[]},{value:"Match a message with two fragments inside an array called <code>data</code>",id:"match-a-message-with-two-fragments-inside-an-array-called-data",children:[]},{value:"Match a message <code>WHERE</code> this <code>AND</code> that are both included",id:"match-a-message-where-this-and-that-are-both-included",children:[]},{value:"Match a message using exclusion",id:"match-a-message-using-exclusion",children:[]},{value:"Match a message with a fragment inside another object called <code>form</code>",id:"match-a-message-with-a-fragment-inside-another-object-called-form",children:[]}]},{value:"An exclusion demo",id:"an-exclusion-demo",children:[]}],u={toc:o};function d(e){var t=e.components,s=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Les triggers sont responsables du d\xe9marrage automatique du job. Il en existe 4 types. Les plus courants sont les triggers de type \xab\xa0filtre de messages\xa0\xbb , mais il existe aussi les triggers de type \xab\xa0cron\xa0\xbb , \xab\xa0flux\xa0\xbb et \xab\xa0\xe9chec\xa0\xbb."),(0,i.kt)("h2",{id:"types-de-trigger"},"Types de trigger"),(0,i.kt)("h3",{id:"triggers-de-filtre-de-messages"},"Triggers de filtre de messages"),(0,i.kt)("p",null,"Les triggers de filtre de messages surveille les messages entrants et v\xe9rifie si les donn\xe9es dans ces messages correspondent \xe0 leurs ",(0,i.kt)("strong",{parentName:"p"},"crit\xe8res d'inclusion")," et ",(0,i.kt)("em",{parentName:"p"},"ne r\xe9pondent pas")," \xe0 leurs ",(0,i.kt)("strong",{parentName:"p"},"crit\xe8res d'exclusion"),". S'ils r\xe9ussissent ces tests et s'il y a des jobs actifs configur\xe9s pour utiliser ce trigger, une ex\xe9cution sera lanc\xe9e pour chaque combinaison message/job. ."),(0,i.kt)("p",null,"En tant qu'utilisateur, vous sp\xe9cifiez les crit\xe8res d'inclusion et d'exclusion qui d\xe9terminent les messages entrants qui doivent d\xe9clencher l'ex\xe9cution des jobs. En gros, si une partie d'un corps de message ",(0,i.kt)("strong",{parentName:"p"},"correspond")," au JSON que vous fournissez comme filtre d'inclusion, et ",(0,i.kt)("em",{parentName:"p"},"ne")," correspond pas au JSON que vous avez fourni comme filtre d'exclusion, un job s'ex\xe9cutera (en supposant que vous en avez cr\xe9\xe9 un avec ",(0,i.kt)("inlineCode",{parentName:"p"},"autoprocess")," activ\xe9)."),(0,i.kt)("p",null,"Le crit\xe8re de filtrage prend la forme d'une cha\xeene de caract\xe8res JSON valide, comme ceci\xa0: ",(0,i.kt)("inlineCode",{parentName:"p"},'{"Name":"Aleksa Iwobi"}'),". Dans une requ\xeate SQL, cette cha\xeene sera utilis\xe9e dans la clause WHERE et utilisera des op\xe9rateurs sp\xe9ciaux de ",(0,i.kt)("inlineCode",{parentName:"p"},"jsonb")," comme celui-ci\xa0:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT * FROM messages\n  WHERE body::jsonb @> \'{"Name":"Nicholas P\xe9p\xe9"}\'::jsonb;\n')),(0,i.kt)("p",null,"Si vous fournissez des crit\xe8res d'exclusion comme ",(0,i.kt)("inlineCode",{parentName:"p"},'{"type": "fake-data"}')," la requ\xeate r\xe9sultante ressemblera \xe0 quelque chose comme ceci :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT * FROM messages\n  WHERE body::jsonb @> \'{"Name":"Nicholas P\xe9p\xe9"}\'::jsonb\n  AND NOT (body::jsonb @> \'{"type":"fake-data"}\'::jsonb);\n')),(0,i.kt)("p",null,"Il y a une explication plus d\xe9taill\xe9e de la correspondance des filtres ",(0,i.kt)("a",{parentName:"p",href:"#filter-matching-in-detail"},"ci-dessous"),"."),(0,i.kt)("h3",{id:"triggers-cron-anciennement-minuteurs"},"Triggers Cron (anciennement minuteurs)"),(0,i.kt)("p",null,"Les triggers cron ex\xe9cutent des jobs ex\xe9cut\xe9es sur la base d'un planning cron. Ils peuvent fonctionner aussi fr\xe9quemment qu'une fois toutes les minutes, ou aussi rarement que vous le souhaitez, et peuvent \xeatre programm\xe9s \xe0 des dates ou des heures tr\xe8s pr\xe9cises. Chaque fois qu'un job chronom\xe9tr\xe9e r\xe9ussit, son ",(0,i.kt)("inlineCode",{parentName:"p"},"final_state")," est sauvegard\xe9 et utilis\xe9 comme ",(0,i.kt)("inlineCode",{parentName:"p"},"initial_state")," pour sa prochaine ex\xe9cution. Voir \xab\xa0G\xe9rer l'\xe9tat\xa0\xbb et \xab\xa0Garder un curseur\xa0\xbb ci-dessous pour une aide \xe0 l'impl\xe9mentation."),(0,i.kt)("p",null,"La meilleure fa\xe7on d'apprendre \xe0 conna\xeetre ",(0,i.kt)("inlineCode",{parentName:"p"},"cron"),", si vous n'\xeates pas d\xe9j\xe0 familier, est \xe0 travers l'interface OpenFn ou"),(0,i.kt)("a",{href:"https://crontab.guru",target:"_blank"},"crontab.guru"),".",(0,i.kt)("h3",{id:"triggers-de-flux"},"Triggers de flux"),(0,i.kt)("p",null,"Les triggers de flux ex\xe9cutent un job ",(0,i.kt)("em",{parentName:"p"},"apr\xe8s")," qu'un autre job sp\xe9cifi\xe9 se termine avec succ\xe8s. Par exemple, un trigger de flux qui sp\xe9cifie l'ex\xe9cution r\xe9ussie du Job A peut \xeatre utilis\xe9 pour le Job B. Chaque fois que le Job A r\xe9ussit, le Job B commence \xe0 s'ex\xe9cuter avec le ",(0,i.kt)("inlineCode",{parentName:"p"},"final_state")," du Job A comme son ",(0,i.kt)("inlineCode",{parentName:"p"},"initial_state"),"."),(0,i.kt)("h3",{id:"triggers-d\xe9chec"},"Triggers d'\xe9chec"),(0,i.kt)("p",null,"Les triggers d'\xe9chec, ou \xab\xa0catch\xa0\xbb, fonctionnent comme les triggers de flux, sauf qu'ils guettent l'\xe9chec, plut\xf4t que le succ\xe8s, d'un job sp\xe9cifique. (par exemple, le Job A paie un ASC via MPESA. Si le Job A ",(0,i.kt)("em",{parentName:"p"},"\xe9choue,")," nous devons lancer le Job B, qui envoie un SMS au responsable du district lui demandant de payer manuellement l'ASC.)"),(0,i.kt)("h2",{id:"traitement-des-jobs-cron"},"Traitement des jobs cron"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Traitement \xe0 la demande pour les jobs cron.")," Si vous exploitez les triggers cron pour ex\xe9cuter des jobs \xe0 des moments pr\xe9cis, vous pouvez \xe9galement ex\xe9cuter ce job d\xe9clench\xe9 par cron \xe0 la demande. De cette fa\xe7on, vous n\u2019avez pas \xe0 attendre l'expiration de la minuterie avant de proc\xe9der au test\xa0! Il suffit simplement de cliquer sur le bouton Processus/\xab Jouer \xbb maintenant disponible sur les pages Job, Run et Activity History."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Runs list run time trigger button",src:n(95279).Z})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Run history time trigger button",src:n(28443).Z})),(0,i.kt)("h4",{id:"maintien-dun-curseur-en-state-pour-les-jobs-de-minuterie"},"Maintien d'un curseur en ",(0,i.kt)("inlineCode",{parentName:"h4"},"state")," pour les jobs de minuterie"),(0,i.kt)("p",null,"Comme de nombreux jobs de minuterie n\xe9cessitent de garder une sorte d'enregistrement de leur ex\xe9cution pr\xe9c\xe9dente pour modifier leurs actions ult\xe9rieures, ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," est transmis entre les ex\xe9cutions. Un exemple pourrait \xeatre de conserver un \xab curseur \xbb pour ne s\xe9lectionner que les nouveaux enregistrements dans une base de donn\xe9es. On s'attendrait \xe0 la logique suivante\xa0:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"job-1")," r\xe9cup\xe8re les patients de la base de donn\xe9es"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"job-1")," fait quelque chose d'important avec ces dossiers de patients"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"job-1")," enregistre l'",(0,i.kt)("inlineCode",{parentName:"li"},"id")," du dernier patient trait\xe9 avec succ\xe8s \xe0 ",(0,i.kt)("inlineCode",{parentName:"li"},"final_state")),(0,i.kt)("li",{parentName:"ol"},"quand ",(0,i.kt)("inlineCode",{parentName:"li"},"job-1")," s'ex\xe9cute \xe0 nouveau, il r\xe9cup\xe8re les patients dont l'",(0,i.kt)("inlineCode",{parentName:"li"},"id")," est sup\xe9rieur \xe0 l'",(0,i.kt)("inlineCode",{parentName:"li"},"id")," du dernier patient trait\xe9 avec succ\xe8s.")),(0,i.kt)("p",null,"Pour y parvenir, vous pourriez \xe9crire\xa0:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"fetchPatient({ type: 'referral', offset: state.lastId }, state => {\n  // Assuming the system returned an array of patients in the \"data\" key.\n  state.lastId = state.data.patients.sort((a, b) => b.id - a.id)[0];\n  return state;\n});\n")),(0,i.kt)("p",null,"Le d\xe9calage initial sera ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),", mais les ex\xe9cutions suivantes vont automatiquement r\xe9cup\xe9rer seulement les \xab\xa0nouveaux\xa0\xbb patients."),(0,i.kt)("h3",{id:"managing-the-size-of-state-for-timer-jobs"},"Managing the size of ",(0,i.kt)("inlineCode",{parentName:"h3"},"state")," for Timer Jobs"),(0,i.kt)("p",null,"Since state is passed between each run of a timer job, if your job adds something new to state each time it runs, it may quickly become too large to be practically handled. Imagine if a server response were adding, via ",(0,i.kt)("inlineCode",{parentName:"p"},"array.push(...)"),", to ",(0,i.kt)("inlineCode",{parentName:"p"},"state.references")," each time the job ran. OpenFn supports up to 50,000 bytes (via Erlang's ",(0,i.kt)("inlineCode",{parentName:"p"},"byte_size"),"), though most ",(0,i.kt)("inlineCode",{parentName:"p"},"final_state")," byte sizes are between 100 and 1000."),(0,i.kt)("p",null,"If the size of your ",(0,i.kt)("inlineCode",{parentName:"p"},"final_state")," exceeds 10,000 bytes, OpenFn will send project collaborators a warning email. If it exceeds 50,000 bytes, your run will still succeed but its ",(0,i.kt)("inlineCode",{parentName:"p"},"final_state")," will not be saved and the next time that job runs it will inherit the previous, un-updated final state. (I.e., the last state that was < 50,000 bytes.)"),(0,i.kt)("h3",{id:"a-quick-fix-for-final-state-bloat"},"A quick fix for final state bloat"),(0,i.kt)("p",null,"Most often, final state bloat is due to improper handling of ",(0,i.kt)("inlineCode",{parentName:"p"},"state.references")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"state.data"),". This can be fixed by adding the following lines ",(0,i.kt)("em",{parentName:"p"},"either")," to the callback of your language-package's operation (if it allows for one) or by appending an ",(0,i.kt)("inlineCode",{parentName:"p"},"alterState(...)")," operation after your operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"alterState(state => {\n  state.custom = somethingIntentional;\n  state.data = {};\n  state.references = [];\n  return state;\n});\n")),(0,i.kt)("h2",{id:"filter-matching-in-detail"},"Filter Matching in Detail"),(0,i.kt)("p",null,"To illustrate filter matching, refer to the filters and message samples below."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Message "a" will match filter 1, but message "b" will not.'),(0,i.kt)("li",{parentName:"ul"},'Message "c" will match filter 2, but message "d" will not.')),(0,i.kt)("h3",{id:"filter-1-simple-inclusion"},"Filter 1, simple inclusion"),(0,i.kt)("p",null,"The inclusion criteria is ",(0,i.kt)("inlineCode",{parentName:"p"},'{ "formID": "patient_registration_v7" }')," and the exclusion criteria is left blank."),(0,i.kt)("h4",{id:"message-a-will-match"},'Message "a" will match'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "submissionDate": "2016-01-15",\n  "formID": "patient_registration_v7",\n  "name": "Jack Wilshere",\n  "dob": "1986-05-16",\n  "medications": ["anaphlene", "zaradood", "morphofast"]\n}\n')),(0,i.kt)("h4",{id:"message-b-will-not-match"},'Message "b" will NOT match'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "submissionDate": "2016-01-16",\n  "formID": "patient_registration_v8",\n  "name": "Larry Bird",\n  "dob": "1982-03-21",\n  "medications": ["anaphlene", "zaradood", "morphofast"]\n}\n')),(0,i.kt)("p",null,"Message 'b' does not include ",(0,i.kt)("inlineCode",{parentName:"p"},'"formID":"patient_registration_v7"')," and will not match filter '1'."),(0,i.kt)("h3",{id:"filter-2-inclusion-and-exclusion"},"Filter 2, inclusion ",(0,i.kt)("em",{parentName:"h3"},"and")," exclusion"),(0,i.kt)("p",null,"The inclusion criteria is ",(0,i.kt)("inlineCode",{parentName:"p"},'{ "name": "john doe" }')," and the exclusion criteria is ",(0,i.kt)("inlineCode",{parentName:"p"},'{"allowedToShare": false}'),"."),(0,i.kt)("h4",{id:"message-c-will-match"},'Message "c" will match'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "submissionDate": "2016-01-15",\n  "name": "john doe",\n  "dob": "1986-05-16"\n}\n')),(0,i.kt)("h4",{id:"message-d-will-not-match"},'Message "d" will NOT match'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "submissionDate": "2016-01-15",\n  "name": "john doe",\n  "dob": "1986-05-16",\n  "allowedToShare": false\n}\n')),(0,i.kt)("h2",{id:"more-filter-samples"},"More filter samples"),(0,i.kt)("h3",{id:"match-messages-where-the-formid-is-robot_photo_21042015"},"Match messages ",(0,i.kt)("inlineCode",{parentName:"h3"},"WHERE")," the ",(0,i.kt)("inlineCode",{parentName:"h3"},"formId")," is ",(0,i.kt)("inlineCode",{parentName:"h3"},'"Robot_Photo_21.04.2015"')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"inclusion"),(0,i.kt)("th",{parentName:"tr",align:null},"exclusion"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'{ "formId": "Robot_Photo_21.04.2015" }')),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h3",{id:"match-a-message-with-two-fragments-inside-an-array-called-data"},"Match a message with two fragments inside an array called ",(0,i.kt)("inlineCode",{parentName:"h3"},"data")),(0,i.kt)("p",null,"(This is useful when gathering data via ODK)"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"inclusion"),(0,i.kt)("th",{parentName:"tr",align:null},"exclusion"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'{ "data": [{ "outlet_call": "TRUE", "new_existing": "Existing" }] }')),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h3",{id:"match-a-message-where-this-and-that-are-both-included"},"Match a message ",(0,i.kt)("inlineCode",{parentName:"h3"},"WHERE")," this ",(0,i.kt)("inlineCode",{parentName:"h3"},"AND")," that are both included"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"inclusion"),(0,i.kt)("th",{parentName:"tr",align:null},"exclusion"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'{ "formId": "Robot_Photo_21.04.2015", "secret_number": 8 }')),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h3",{id:"match-a-message-using-exclusion"},"Match a message using exclusion"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"inclusion"),(0,i.kt)("th",{parentName:"tr",align:null},"exclusion"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'{ "formId": "Robot_Photo_21.04.2015" }')),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'{ "safeToProcess": false }'))))),(0,i.kt)("h3",{id:"match-a-message-with-a-fragment-inside-another-object-called-form"},"Match a message with a fragment inside another object called ",(0,i.kt)("inlineCode",{parentName:"h3"},"form")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"inclusion"),(0,i.kt)("th",{parentName:"tr",align:null},"exclusion"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'{"form": {"@xmlns": "http://openrosa.org/formdesigner/F732194-3278-nota-ReAL-one"}}')),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h2",{id:"an-exclusion-demo"},"An exclusion demo"),(0,i.kt)("p",null,"Imagine that we had a filter which included messages with ",(0,i.kt)("inlineCode",{parentName:"p"},"form == 'bns_survey'")," but we then want to start ",(0,i.kt)("em",{parentName:"p"},"excluding")," those that have ",(0,i.kt)("inlineCode",{parentName:"p"},"body.survey_type == 'practice'"),". Our filter trigger would look need to like this:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"inclusion"),(0,i.kt)("th",{parentName:"tr",align:null},"exclusion"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'{ "form": "bns_survey" }')),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'{"body": {"survey_type": "practice"}}'))))),(0,i.kt)("p",null,"We'd set it up from the trigger form like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:n(39308).Z})),(0,i.kt)("p",null,"And verify the result on the inbox:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:n(68069).Z})))}d.isMDXComponent=!0},68069:function(e,t,n){"use strict";t.Z=n.p+"assets/images/demo-exclusion-cc520464bca5893c3ca38bfa1d1f2142.gif"},39308:function(e,t,n){"use strict";t.Z=n.p+"assets/images/exclusion-cb6fe8d428d9dd35a5712fa756eb907a.gif"},28443:function(e,t,n){"use strict";t.Z=n.p+"assets/images/runtimetrigger1-6895401e3fee9878d136613b44c469e9.png"},95279:function(e,t,n){"use strict";t.Z=n.p+"assets/images/timetriggerunslist-30591afe14b40286a89b96a5a78f3c55.png"}}]);