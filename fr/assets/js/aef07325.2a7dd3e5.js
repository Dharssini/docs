(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[5810],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=l(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},87094:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var a=n(22122),r=n(19756),o=(n(67294),n(3905)),i={title:"Adaptors"},p={unversionedId:"build/adaptors",id:"build/adaptors",isDocsHomePage:!1,title:"Adaptors",description:'An adaptor is an open-source Javascript module that provides an OpenFn core users with a set of operations that help communicate with a specific external system. In the past, we often referred to them as "language packages". And the two terms are sometimes used interchangeably, but the preferred way of communicating about adaptors is as follows:',source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/build/adaptors.md",sourceDirName:"build",slug:"/build/adaptors",permalink:"/fr/documentation/build/adaptors",editUrl:"https://github.com/openfn/docs/edit/main/docs/build/adaptors.md",version:"current",frontMatter:{title:"Adaptors"},sidebar:"docs",previous:{title:"Devtools",permalink:"/fr/documentation/devtools/home"},next:{title:"Planning for Deployment",permalink:"/fr/documentation/deploy/options"}},s=[{value:"Where to find them?",id:"where-to-find-them",children:[{value:"On GitHub",id:"on-github",children:[]},{value:"On platform",id:"on-platform",children:[]},{value:"On npm",id:"on-npm",children:[]}]},{value:"Developing an adaptor",id:"developing-an-adaptor",children:[{value:"Extending an adaptor",id:"extending-an-adaptor",children:[]},{value:"Developing a new adaptor",id:"developing-a-new-adaptor",children:[]},{value:"Default operation",id:"default-operation",children:[]},{value:"General considerations",id:"general-considerations",children:[]}]},{value:"Build and tests",id:"build-and-tests",children:[{value:"Build",id:"build",children:[]},{value:"Tests",id:"tests",children:[]}]}],l={toc:s};function d(e){var t=e.components,i=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'An adaptor is an open-source Javascript module that provides an OpenFn core users with a set of operations that help communicate with a specific external system. In the past, we often referred to them as "language packages". And the two terms are sometimes used interchangeably, but the preferred way of communicating about adaptors is as follows:'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'"What ',(0,o.kt)("em",{parentName:"li"},(0,o.kt)("strong",{parentName:"em"},"adaptor")),' is that job using?" ("That job is using ',(0,o.kt)("inlineCode",{parentName:"li"},"language-dhis2"),'.")'),(0,o.kt)("li",{parentName:"ul"},'"The DHIS2 ',(0,o.kt)("em",{parentName:"li"},(0,o.kt)("strong",{parentName:"em"},"adaptor"))," is called ",(0,o.kt)("inlineCode",{parentName:"li"},"language-dhis2"),'."'),(0,o.kt)("li",{parentName:"ul"},"\"I don't have the right ",(0,o.kt)("em",{parentName:"li"},(0,o.kt)("strong",{parentName:"em"},"adaptor"))," for this job, let me install it by running ",(0,o.kt)("inlineCode",{parentName:"li"},"npm install @openfn/language-dhis2"),".")),(0,o.kt)("p",null,"In short, ",(0,o.kt)("em",{parentName:"p"},"most")," ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"adaptors"))," follow the naming convention ",(0,o.kt)("inlineCode",{parentName:"p"},"@openfn/language-xyz"),", but not all do!"),(0,o.kt)("h2",{id:"where-to-find-them"},"Where to find them?"),(0,o.kt)("h3",{id:"on-github"},"On GitHub"),(0,o.kt)("p",null,"The developed adaptors can be found in GitHub under ",(0,o.kt)("inlineCode",{parentName:"p"},"https://github.com/openfn"),", starting with the prefix ",(0,o.kt)("inlineCode",{parentName:"p"},"language-xyz"),". Some examples are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-http"},"language-http")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-postgresql"},"language-postgresql")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-primero"},"language-primero"))),(0,o.kt)("h3",{id:"on-platform"},"On platform"),(0,o.kt)("p",null,'When creating or editing a job on platform, you can choose the adaptor to run the job. This way you "import" the needed operations. Simply open the dropdown list of adaptors, and click on one.'),(0,o.kt)("img",{src:"/img/adaptor_choice_openfn.png",width:"300"}),(0,o.kt)("h3",{id:"on-npm"},"On npm"),(0,o.kt)("p",null,"Most of our adaptors are also available on ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/search?q=%40openfn"},"npmjs"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Adaptors list in npm",src:n(94342).Z})),(0,o.kt)("h2",{id:"developing-an-adaptor"},"Developing an adaptor"),(0,o.kt)("p",null,"You can develop a new adaptor from scratch or extend an existing one."),(0,o.kt)("h3",{id:"extending-an-adaptor"},"Extending an adaptor"),(0,o.kt)("p",null,"Extending an adaptor equals adding one or multiple new operations. The new operations can be added inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/Adaptor.js")," file of the adaptor."),(0,o.kt)("img",{src:"/img/srcfolder.png",width:"400"}),(0,o.kt)("h3",{id:"developing-a-new-adaptor"},"Developing a new adaptor"),(0,o.kt)("p",null,"Developing a new adaptor can be done by cloning the template available ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/OpenFn/adaptor"},"here")," via the ",(0,o.kt)("inlineCode",{parentName:"p"},"USE THIS TEMPLATE")," button over on Github."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Use this template button",src:n(87004).Z})),(0,o.kt)("h3",{id:"default-operation"},"Default operation"),(0,o.kt)("p",null,"This template contains a default ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," operation that can be customized according to the objectives of the new adaptor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"export function create(path, params, callback) {\n  return state => {\n    // expand references for the data argument with state\n    // do the work\n    // return state\n  };\n}\n")),(0,o.kt)("h3",{id:"general-considerations"},"General considerations"),(0,o.kt)("h4",{id:"using-openfnlanguage-commonhttp"},"Using ",(0,o.kt)("inlineCode",{parentName:"h4"},"@openfn/language-common.http")),(0,o.kt)("p",null,"In many cases, it's useful to be able to execute regular HTTP requests inside a specialized adaptor (e.g. posting the output of a Primero case fetch to an OpenFn inbox). Considering these types of situations, ",(0,o.kt)("inlineCode",{parentName:"p"},"language-common")," implements and exports an ",(0,o.kt)("inlineCode",{parentName:"p"},"http")," module. To use ",(0,o.kt)("inlineCode",{parentName:"p"},"http")," in any job executed with a specific adaptor consider exporting it directly from ",(0,o.kt)("inlineCode",{parentName:"p"},"language-common"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"...\nexport {\n  alterState,\n  ...\n  http,\n  ...\n  sourceValue,\n} from '@openfn/language-common';\n")),(0,o.kt)("h4",{id:"import-language-common-from-npm"},"Import language-common from npm"),(0,o.kt)("p",null,"To leverage the last tested available version of our language-common adaptor, consider importing the one published in ",(0,o.kt)("inlineCode",{parentName:"p"},"npm")," through ",(0,o.kt)("inlineCode",{parentName:"p"},"@openfn/language-common"),"."),(0,o.kt)("p",null,"Accordingly, your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," should add a dependency to that version as this (snippet taken from ",(0,o.kt)("inlineCode",{parentName:"p"},"language-postgresql"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@openfn/language-common": "1.2.6",\n    "pg": "^8.3.2",\n    "pg-format": "^1.0.4"\n  },\n  ...rest\n}\n')),(0,o.kt)("h2",{id:"build-and-tests"},"Build and tests"),(0,o.kt)("h3",{id:"build"},"Build"),(0,o.kt)("p",null,"Building an adaptor is done by running the command ",(0,o.kt)("inlineCode",{parentName:"p"},"make")," from the root folder."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Build an adaptor",src:n(63114).Z})),(0,o.kt)("h3",{id:"tests"},"Tests"),(0,o.kt)("p",null,"Tests can be written with nock under the path ",(0,o.kt)("inlineCode",{parentName:"p"},"test/index.js"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"describe('createPatient', () => {\n  before(() => {\n    nock('https://fakepatient.server.com')\n      .post('/api/patients')\n      .reply(200, (uri, requestBody) => {\n        return { ...requestBody, fullName: 'Mamadou', gender: 'M' };\n      });\n  });\n\n  it('makes a post request to the patient endpoint', async () => {\n    const state = {\n      configuration: {\n        baseUrl: 'https://fakepatient.server.com',\n        username: 'hello',\n        password: 'there',\n      },\n      data: {\n        fullName: 'Mamadou',\n        gender: 'M',\n      },\n    };\n\n    const finalState = await execute(\n      create('api/patients', {\n        name: dataValue('fullName')(state),\n        gender: dataValue('gender')(state),\n      })\n    )(state);\n\n    expect(finalState.data).to.eql({\n      fullName: 'Mamadou',\n      gender: 'M',\n    });\n  });\n});\n")),(0,o.kt)("p",null,"Run your tests with ",(0,o.kt)("inlineCode",{parentName:"p"},"npm run test"),". Tests are written to assess dummy calls on the available helper functions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"}," ~/devtools/adaptors/adaptor > npm run test\n\n> language-template@1.0.0 test /home/taylor/devtools/adaptors/adaptor\n> mocha --require @babel/register\n\n\n\n  execute\n    \u2713 executes each operation in sequence\n    \u2713 assigns references, data to the initialState\n\n  create\n    \u2713 makes a post request to the right endpoint\n    \u2713 throws an error for a 404\n    \u2713 handles and throws different kinds of errors\n\n  createPatient\n    \u2713 makes a post request to the patient endpoint\n\n\n  6 passing (16ms)\n\n ~/devtools/adaptors/adaptor >\n")),(0,o.kt)("p",null,"When writing tests, bear in mind as well for scenarios that could trigger errors."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"describe('create', () => {\n  before(() => {\n    nock('https://fake.server.com')\n      .post('/api/noAccess')\n      .reply(404, (uri, requestBody) => {\n        return { detail: 'Not found.' };\n      });\n\n  it('throws an error for a 404', async () => {\n    const state = {\n      configuration: {\n        baseUrl: 'https://fake.server.com',\n        username: 'hello',\n        password: 'there',\n      },\n    };\n    const error = await execute(create('api/noAccess', { name: 'taylor' }))(\n      state\n    ).catch(error => {\n      return error;\n    });\n    expect(error.message).to.eql('Request failed with status code 404');\n  });\n\n});\n")))}d.isMDXComponent=!0},94342:function(e,t,n){"use strict";t.Z=n.p+"assets/images/adaptor_npm-2141b2789fbf572fb682e67a828e768f.png"},63114:function(e,t,n){"use strict";t.Z=n.p+"assets/images/make-b6567513046dce427e7928d522aabcf5.png"},87004:function(e,t,n){"use strict";t.Z=n.p+"assets/images/usethistemplate-aede212d4072939e4ed47bc6b0e95e1b.png"}}]);