(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[4114],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return _},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},_=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,_=o(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,m=p["".concat(c,".").concat(d)]||p[d]||u[d]||s;return n?a.createElement(m,i(i({ref:t},_),{},{components:n})):a.createElement(m,i({ref:t},_))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5344:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return o},toc:function(){return c},default:function(){return _}});var a=n(22122),r=n(19756),s=(n(67294),n(3905)),i={title:"Upsert Attendance Skillz Plus Club",sidebar_label:"Upsert Attendance Skillz Plus Club",id:"Upsert-Attendance-Skillz-Plus-Club-2021-05-24",keywords:["library","job","expression","salesforce","alterState","dataValue","each","field","fields","lastReferenceValue","map","query","relationship","upsert","Array"]},o={unversionedId:"jobs/auto/Upsert-Attendance-Skillz-Plus-Club-2021-05-24",id:"jobs/auto/Upsert-Attendance-Skillz-Plus-Club-2021-05-24",isDocsHomePage:!1,title:"Upsert Attendance Skillz Plus Club",description:"This job was provided by an OpenFn.org user via the job library API.",source:"@site/library/jobs/auto/Upsert-Attendance-Skillz-Plus-Club-2021-05-24.md",sourceDirName:"jobs/auto",slug:"/jobs/auto/Upsert-Attendance-Skillz-Plus-Club-2021-05-24",permalink:"/fr/library/jobs/auto/Upsert-Attendance-Skillz-Plus-Club-2021-05-24",version:"current",sidebar_label:"Upsert Attendance Skillz Plus Club",frontMatter:{title:"Upsert Attendance Skillz Plus Club",sidebar_label:"Upsert Attendance Skillz Plus Club",id:"Upsert-Attendance-Skillz-Plus-Club-2021-05-24",keywords:["library","job","expression","salesforce","alterState","dataValue","each","field","fields","lastReferenceValue","map","query","relationship","upsert","Array"]},sidebar:"library",previous:{title:"Upsert ART Adherence Self-Reporting Tool",permalink:"/fr/library/jobs/auto/Upsert-ART-Adherence-Self-Reporting-Tool-2021-04-30"},next:{title:"Upsert Coach Support Visit (CSV)",permalink:"/fr/library/jobs/auto/Upsert-Coach-Support-Visit-CSV-2021-04-28"}},c=[{value:"Metadata",id:"metadata",children:[]},{value:"Key Functions",id:"key-functions",children:[]},{value:"Expression",id:"expression",children:[]}],l={toc:c};function _(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("em",null,"This job was provided by an OpenFn.org user via the job library API."),(0,s.kt)("h2",{id:"metadata"},"Metadata"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Name: Upsert Attendance Skillz Plus Club"),(0,s.kt)("li",{parentName:"ul"},"Adaptor: ",(0,s.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-salesforce"},(0,s.kt)("inlineCode",{parentName:"a"},"@openfn/language-salesforce"))),(0,s.kt)("li",{parentName:"ul"},"Adaptor Version: ",(0,s.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-salesforce/releases/tag/v2.2.0"},(0,s.kt)("inlineCode",{parentName:"a"},"v2.2.0"))),(0,s.kt)("li",{parentName:"ul"},"Created 24 days ago"),(0,s.kt)("li",{parentName:"ul"},"Updated 15 days ago"),(0,s.kt)("li",{parentName:"ul"},"Score: ",(0,s.kt)("b",null,"61")," (an ",(0,s.kt)("a",{parentName:"li",href:"/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,s.kt)("h2",{id:"key-functions"},"Key Functions"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"alterState"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"dataValue"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"each"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"field"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"fields"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"lastReferenceValue"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"map"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"query"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"relationship"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"upsert"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Array")),(0,s.kt)("h2",{id:"expression"},"Expression"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Set state.references to event record\nquery(\n  `SELECT Id, Name, CommCare_Ext_ID__c FROM Event__c WHERE CommCare_Case_ID__c = '${state.data.form.case['@case_id']}'`\n);\n\n// Organise data and keep it safe\nalterState(state => {\n  function objectToArray(object) {\n    if (!object) return [];\n    return !Array.isArray(object) ? [object] : object;\n  }\n\n  const eventName = lastReferenceValue('records[0].CommCare_Ext_ID__c')(state);\n  state.data.eventName = eventName;\n\n  state.data.form.attendance_list.update_participant_cases.item = objectToArray(\n    state.data.form.attendance_list.update_participant_cases.item\n  );\n\n  state.data.form.attendance_list.update_participant_cases.item =\n    state.data.form.attendance_list.update_participant_cases.item.map(item => ({\n      ...item,\n      CommCare_Ext_ID__c: `${item['@id']}-${eventName}`,\n      event_case_id: state.data.form.case['@case_id'],\n    }));\n\n  //  Keep our data safe\n  state.items = state.data.form.attendance_list.update_participant_cases.item;\n\n  // Reset references\n  state.references = [];\n\n  return state;\n});\n\n// Set state.references to an array of attendance records for each participant\nbeta.each(\n  '$.items[*]',\n  query(\n    state => `SELECT CommCare_Ext_ID__c, Session_1__c, Session_2__c, Session_3__c, Session_4__c, Session_5__c, Session_6__c, Session_7__c, Session_8__c, Session_9__c, Session_10__c, Session_11__c, Session_12__c, Session_13__c, Session_14__c, Session_15__c, Session_16__c, Session_17__c, Session_18__c, Session_19__c, Session_20__c, Session_21__c, Session_22__c, Session_23__c,Session_24__c, Session_25__c, Session_26__c, Session_27__c, Session_28__c\n         FROM Attendance__c\n         WHERE CommCare_Ext_ID__c = '${state.data.CommCare_Ext_ID__c}'\n         `\n  )\n);\n\n// Calculate dynamic fields\nalterState(state => {\n  state.items = state.items.map(item => {\n    const record = state.references.find(rec =>\n      rec.records[0] ? rec.records[0].CommCare_Ext_ID__c === item.CommCare_Ext_ID__c : true\n    ).records[0];\n\n    function getSessionValue(present) {\n      if (!present) return 'U';\n      switch (present.toString().toLowerCase()) {\n        case 'yes':\n          return 'X';\n        case 'no':\n          return 'A';\n        case '':\n          return 'N';\n        default:\n          return 'U';\n      }\n    }\n\n    function getSessionFieldName(record) {\n      if (!record || Object.keys(record).length === 0) {\n        return 'Session_1__c';\n      }\n\n      const fieldName = Object.entries(record)\n        .filter(rec => rec[1] === null && rec[0] !== 'CommCare_Ext_ID__c')\n        .sort(function (a, b) {\n          return a[0].split('_')[1] - b[0].split('_')[1];\n        })[0][0];\n\n      return fieldName;\n    }\n\n    const sessionValue = getSessionValue(item.attendance_session);\n    const sessionDate = item.date;\n    const sessionFieldName = getSessionFieldName(record);\n    const sessionDateFieldName = `Session_${sessionFieldName.split('_')[1]}_Date__c`;\n\n    return {\n      ...item,\n      dynamicFields: {\n        [sessionFieldName]: sessionValue,\n        [sessionDateFieldName]: sessionDate,\n      },\n    };\n  });\n\n  //  Reset state.references\n  state.references = [];\n\n  return state;\n});\n\n// Upsert\nbeta.each(\n  '$.items[*]',\n  upsert('Attendance__c', 'CommCare_Ext_ID__c', state => ({\n    ...fields(\n      field('CommCare_Ext_ID__c', dataValue('CommCare_Ext_ID__c')),\n      relationship('Person_Attendance__r', 'Participant_Identification_Number_PID__c', dataValue('@id')),\n      relationship('Event__r', 'CommCare_Case_ID__c', dataValue('event_case_id'))\n    ),\n    ...state.data.dynamicFields,\n  }))\n);\n\n")))}_.isMDXComponent=!0}}]);