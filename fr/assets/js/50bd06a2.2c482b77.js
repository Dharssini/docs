"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[8767],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),f=r,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||o;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7585:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={title:"Bulk fetch from CommCare [2022]",sidebar_label:"\u2728 Bulk fetch from CommCare [2022]",id:"Bulk-fetch-from-CommCare-2022-2022-06-27",keywords:["library","job","expression","http","each","get","map","post","async","await","Math"]},i=void 0,s={unversionedId:"jobs/auto/Bulk-fetch-from-CommCare-2022-2022-06-27",id:"jobs/auto/Bulk-fetch-from-CommCare-2022-2022-06-27",title:"Bulk fetch from CommCare [2022]",description:"This job was provided by an OpenFn.org user via the job library API.",source:"@site/library/jobs/auto/Bulk-fetch-from-CommCare-2022-2022-06-27.md",sourceDirName:"jobs/auto",slug:"/jobs/auto/Bulk-fetch-from-CommCare-2022-2022-06-27",permalink:"/fr/library/jobs/auto/Bulk-fetch-from-CommCare-2022-2022-06-27",draft:!1,tags:[],version:"current",frontMatter:{title:"Bulk fetch from CommCare [2022]",sidebar_label:"\u2728 Bulk fetch from CommCare [2022]",id:"Bulk-fetch-from-CommCare-2022-2022-06-27",keywords:["library","job","expression","http","each","get","map","post","async","await","Math"]},sidebar:"library",previous:{title:"aleksa cron",permalink:"/fr/library/jobs/auto/aleksa-cron-2022-04-29"},next:{title:"Catch Error in HTTP Request",permalink:"/fr/library/jobs/auto/Catch-Error-in-HTTP-Request-2016-08-26"}},l={},c=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("em",null,"This job was provided by an OpenFn.org user via the job library API."),(0,r.kt)("h2",{id:"metadata"},"Metadata"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Name: Bulk fetch from CommCare ","[2022]"),(0,r.kt)("li",{parentName:"ul"},"Adaptor: ",(0,r.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-http"},(0,r.kt)("inlineCode",{parentName:"a"},"@openfn/language-http"))),(0,r.kt)("li",{parentName:"ul"},"Adaptor Version: ",(0,r.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-http/releases/tag/v4.0.0"},(0,r.kt)("inlineCode",{parentName:"a"},"v4.0.0"))),(0,r.kt)("li",{parentName:"ul"},"Created 5 months ago"),(0,r.kt)("li",{parentName:"ul"},"Updated 15 days ago"),(0,r.kt)("li",{parentName:"ul"},"Score: ",(0,r.kt)("b",null,"88")," (an ",(0,r.kt)("a",{parentName:"li",href:"/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,r.kt)("h2",{id:"key-functions"},"Key Functions"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"each"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"get"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"map"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"post"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"async"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"await"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Math")),(0,r.kt)("h2",{id:"expression"},"Expression"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// set up a base Url, formIds, and the initial queries to use\nfn(state => {\n  const baseUrl =\n    'https://www.commcarehq.org/a/lwala-community-alliance/api/v0.5/form/';\n\n  const formIds = [\n    '457C806C-B47D-44F0-BE4B-7E88F7162D1D',\n    '320142AD-BC92-4470-951E-B3CA140BDC4A',\n    '318B2FE0-F17F-4FC2-8EBE-1FF170F25B3F',\n  ];\n\n  const limit = 1000;\n  const indexedOnStart = '2022-05-31';\n  const receivedOnEnd = '2022-05-01';\n\n  const queries = formIds.map(\n    id =>\n      `?xmlns=http://openrosa.org/formdesigner/${id}` +\n      `&indexed_on_start=${indexedOnStart}` +\n      `&received_on_end=${receivedOnEnd}` +\n      `&limit=${limit}`\n  );\n\n  return { ...state, queries, baseUrl, payloads: [] };\n});\n\n// create a \"recursiveGet\" which will call itself if CommCare tells us there's\n// more data to fetch for the same form\nfn(state => {\n  const recursiveGet = url =>\n    get(url, {}, nextState => {\n      const { baseUrl, data, payloads } = nextState;\n      const { meta, objects } = data;\n      console.log('Metadata in CommCare response:', meta);\n\n      const finalState = { ...nextState, payloads: [...payloads, ...objects] };\n\n      if (meta.next) {\n        console.log('Next query detected, recursing...');\n        return recursiveGet(`${baseUrl}${meta.next}`)(finalState);\n      }\n      return finalState;\n    });\n\n  return { ...state, recursiveGet };\n});\n\n// for each initial query, fetch data recursively\neach(\n  '$.queries[*]',\n  fn(state => state.recursiveGet(`${state.baseUrl}${state.data}`)(state))\n);\n\n// log the total number of payloads returned\nfn(state => {\n  console.log('Count of payloads', state.payloads.length);\n  return { ...state, references: [], data: {} };\n});\n\n// send all of those payloads to OpenFn in batches\n\n\nfn(async state => {\n  const { configuration, payloads } = state;\n\n  const loop = Math.ceil(payloads.length / 250);\n\n  let countInbox = 0;\n\n  const postToInbox = async data => {\n    countInbox++;\n\n    console.log(`Sending batch ${countInbox} to inbox`);\n    await http.post({\n      url: configuration.openfnInboxUrl,\n      data: data,\n      maxContentLength: Infinity,\n      maxBodyLength: Infinity,\n    })(state);\n  };\n\n  console.log(`Sending ${loop} batches of submissions to inbox`);\n  for (let i = 0; i < loop; i++) {\n    const batch = state.payloads.slice(i * 250, (i + 1) * 250);\n\n    const data = {\n      tag: 'update_person_historical',\n      commCareSubmissions: batch,\n    };\n    await postToInbox(data);\n  }\n\n  return { ...state, payloads: [], references: [], data: {} };\n});\n")))}u.isMDXComponent=!0}}]);