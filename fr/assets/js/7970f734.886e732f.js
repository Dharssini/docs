"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[7777],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>_});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(t),_=r,d=m["".concat(l,".").concat(_)]||m[_]||p[_]||o;return t?a.createElement(d,i(i({ref:n},u),{},{components:t})):a.createElement(d,i({ref:n},u))}));function _(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8771:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const o={title:"Commcare & Phone Issues Log",sidebar_label:"Commcare & Phone Issues Log",id:"Commcare-Phone-Issues-Log-2022-10-21",keywords:["library","job","expression","salesforce","dataValue","field","fields","relationship","upsert"]},i=void 0,s={unversionedId:"jobs/auto/Commcare-Phone-Issues-Log-2022-10-21",id:"jobs/auto/Commcare-Phone-Issues-Log-2022-10-21",title:"Commcare & Phone Issues Log",description:"This job was provided by an OpenFn.org user via the job library API.",source:"@site/library/jobs/auto/Commcare-Phone-Issues-Log-2022-10-21.md",sourceDirName:"jobs/auto",slug:"/jobs/auto/Commcare-Phone-Issues-Log-2022-10-21",permalink:"/fr/library/jobs/auto/Commcare-Phone-Issues-Log-2022-10-21",draft:!1,tags:[],version:"current",frontMatter:{title:"Commcare & Phone Issues Log",sidebar_label:"Commcare & Phone Issues Log",id:"Commcare-Phone-Issues-Log-2022-10-21",keywords:["library","job","expression","salesforce","dataValue","field","fields","relationship","upsert"]},sidebar:"library",previous:{title:"Coach Session Register",permalink:"/fr/library/jobs/auto/Coach-Session-Register-2021-05-03"},next:{title:"\ud83d\udcdc Concat fields with nulls",permalink:"/fr/library/jobs/auto/concatenate-many-fields-with-nulls"}},l={},c=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("em",null,"This job was provided by an OpenFn.org user via the job library API."),(0,r.kt)("h2",{id:"metadata"},"Metadata"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Name: Commcare & Phone Issues Log"),(0,r.kt)("li",{parentName:"ul"},"Adaptor: ",(0,r.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-salesforce"},(0,r.kt)("inlineCode",{parentName:"a"},"@openfn/language-salesforce"))),(0,r.kt)("li",{parentName:"ul"},"Adaptor Version: ",(0,r.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-salesforce/releases/tag/v2.11.0"},(0,r.kt)("inlineCode",{parentName:"a"},"v2.11.0"))),(0,r.kt)("li",{parentName:"ul"},"Created 25 days ago"),(0,r.kt)("li",{parentName:"ul"},"Updated 8 days ago"),(0,r.kt)("li",{parentName:"ul"},"Score: ",(0,r.kt)("b",null,"27")," (an ",(0,r.kt)("a",{parentName:"li",href:"/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,r.kt)("h2",{id:"key-functions"},"Key Functions"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dataValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"field"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fields"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"relationship"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"upsert")),(0,r.kt)("h2",{id:"expression"},"Expression"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Job to pick CommCare Report issues forms and map them to salesforce\nfn(state => {\nstate.handleMultiSelect = function (state, multiField) {\n    return multiField? multiField\n          .replace(/ /g, ';')\n      : '';\n\n  };\n  \n    state.cleanChoice = function (state, choice) {\n    if (choice) {\n      return choice.charAt(0).toUpperCase() + choice.slice(1).replace('_', ' ');\n    } else {\n      return '';\n    }\n  }\n\n   return {\n    ...state\n  };\n  \n  });\n  \n  upsert(\n  'Report_issue__c',\n  'CommCare_Form_ID__c',\n  \n  fields(\n  field('CommCare_Form_ID__c', dataValue('id')),\n    relationship('RecordType', 'Name', 'Report issue'),\n    field('CHW_Name__c', dataValue('form.prologue.chw_sfid')),\n      relationship(\n      'Village__r',\n      'CommCare_User_ID__c',\n      dataValue('form.prologue.chw_village'))\n    ),\n    relationship('Catchment__r', \n    'Name',\n    dataValue('form.prologue.catchment'))\n    ),\n    \n    //field('   Issues_log_date__c',dataValue('issues_log_date')),\n   // field('issues_you_are_experiencing_with_phone__c', dataValue('what_issues_are_you_experiencing_with_your_mobile_phone')),\n    //field('What_issues_are_you_experiencing_with_yo__c', dataValue('what_issues_are_you_experiencing_with_your_commcare_application')), \n    //field('Other_commcare_issue_Specify__c', dataValue('other_commcare_issuespecify')),\n    //field('Other_mobile_phone_issue_Specify__c', dataValue('other_mobile_phone_issuespecify')),\n    //field('Other_phone_Specify__c',dataValue('other_phonespecify')),\n    //field('Phone_type__c', dataValue('phone_type')),\n    //field('What_issues_are_you_experiencing__c',dataValue('what_issues_are_you_experiencing')),\n    //field('What_other_issues_are_you_facing__c',dataValue('what_other_issues_are_you_facing'));\n    \n  \n\n  \nconst lookupMap = (item, map) => {\n    return item ? map[item] : undefined;\n  \n  \n  const phoneTypeMap = {\n    infinix_hot_6: 'Infinix hot 6',\n    infinix_hot8_lite: 'Infinix hot8 lite',\n    infinix_smart_5: 'Infinix smart 5',\n    infinix_smart_6: 'Infinix smart 6',\n    samsung_taba: 'Samsung TabA',\n    samsung_a20: 'Samsung A20s',\n    xposh: 'Xposh',\n    other: 'Other',\n\n  };\n  \n  const issuesYouAreExperiencingMap = {\n    mobile_phone: 'Mobile phone',\n    commcare_application: 'Commcare application',\n    both: 'Both',\n    \n  };\n};\n  //const whatIssuesAreYouExperiencingWithPhoneMap = {\n   // broken_-_not_functional_at_all: 'Broken-Not functional at all',\n    //cracked_screen_-_functional: 'Cracked screen - Functional',\n    //stolengot_lost: 'Stolen/Got Lost',\n    //other: 'Other',\n  \n  //const issuesExperiencedWithCommcareApplicationMap = {\n    //commcare_cant_sync_-_internet_problem: 'Commcare can't sync - Internet problem',\n    // other: 'Other',\n  };\n")))}p.isMDXComponent=!0}}]);