(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[1130],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return s},kt:function(){return f}});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),u=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},s=function(e){var r=u(e.components);return n.createElement(i.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),y=u(t),f=a,d=y["".concat(i,".").concat(f)]||y[f]||c[f]||o;return t?n.createElement(d,p(p({ref:r},s),{},{components:t})):n.createElement(d,p({ref:r},s))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=y;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,p[1]=l;for(var u=2;u<o;u++)p[u]=t[u];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},50360:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return p},metadata:function(){return l},toc:function(){return i},default:function(){return s}});var n=t(22122),a=t(19756),o=(t(67294),t(3905)),p={title:"02a/ Query DB for people to pay",sidebar_label:"02a/ Query DB for people to pay",id:"02a-Query-DB-for-people-to-pay-2019-12-11",keywords:["library","job","expression","mysql","alterState"]},l={unversionedId:"jobs/auto/02a-Query-DB-for-people-to-pay-2019-12-11",id:"jobs/auto/02a-Query-DB-for-people-to-pay-2019-12-11",isDocsHomePage:!1,title:"02a/ Query DB for people to pay",description:"This job was provided by an OpenFn.org user via the job library API.",source:"@site/library/jobs/auto/02a-Query-DB-for-people-to-pay-2019-12-11.md",sourceDirName:"jobs/auto",slug:"/jobs/auto/02a-Query-DB-for-people-to-pay-2019-12-11",permalink:"/fr/library/jobs/auto/02a-Query-DB-for-people-to-pay-2019-12-11",version:"current",sidebar_label:"02a/ Query DB for people to pay",frontMatter:{title:"02a/ Query DB for people to pay",sidebar_label:"02a/ Query DB for people to pay",id:"02a-Query-DB-for-people-to-pay-2019-12-11",keywords:["library","job","expression","mysql","alterState"]},sidebar:"library",previous:{title:"01b/ Query new person record",permalink:"/fr/library/jobs/auto/01b-Query-new-person-record-2019-12-13"},next:{title:"03/ Update Payment Status",permalink:"/fr/library/jobs/auto/03-Update-Payment-Status-2019-11-19"}},i=[{value:"Metadata",id:"metadata",children:[]},{value:"Key Functions",id:"key-functions",children:[]},{value:"Expression",id:"expression",children:[]}],u={toc:i};function s(e){var r=e.components,t=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("em",null,"This job was provided by an OpenFn.org user via the job library API."),(0,o.kt)("h2",{id:"metadata"},"Metadata"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Name: 02a/ Query DB for people to pay"),(0,o.kt)("li",{parentName:"ul"},"Adaptor: ",(0,o.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-mysql"},(0,o.kt)("inlineCode",{parentName:"a"},"@openfn/language-mysql"))),(0,o.kt)("li",{parentName:"ul"},"Adaptor Version: ",(0,o.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-mysql"},(0,o.kt)("inlineCode",{parentName:"a"},"latest"))),(0,o.kt)("li",{parentName:"ul"},"Created over 1 year ago"),(0,o.kt)("li",{parentName:"ul"},"Updated over 1 year ago"),(0,o.kt)("li",{parentName:"ul"},"Score: ",(0,o.kt)("b",null,"0")," (an ",(0,o.kt)("a",{parentName:"li",href:"/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,o.kt)("h2",{id:"key-functions"},"Key Functions"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"alterState")),(0,o.kt)("h2",{id:"expression"},"Expression"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"\nsqlString(state => {\n  // stored procedure will return a list of names, phone numbers (MSISDN), and salary info for employees that should be paid today\n  return 'CALL get_employees_to_pay();';\n});\n\n//alterState(state => {\n  // Note: we pluck out on the 'RowDataResponses' from the SQL server.\n//  state.data.records = state.response.body[0];\n//  return state;\n//});\n")))}s.isMDXComponent=!0}}]);