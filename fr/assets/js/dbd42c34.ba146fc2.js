"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[117],{3905:function(e,r,t){t.d(r,{Zo:function(){return p},kt:function(){return f}});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),y=u(t),f=a,m=y["".concat(s,".").concat(f)]||y[f]||c[f]||o;return t?n.createElement(m,l(l({ref:r},p),{},{components:t})):n.createElement(m,l({ref:r},p))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=y;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},16596:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return y}});var n=t(83117),a=t(80102),o=(t(67294),t(3905)),l=["components"],i={title:"05a/Query for new employees",sidebar_label:"05a/Query for new employees",id:"05a-Query-for-new-employees-2019-12-19",keywords:["library","job","expression","mysql","alterState"]},s=void 0,u={unversionedId:"jobs/auto/05a-Query-for-new-employees-2019-12-19",id:"jobs/auto/05a-Query-for-new-employees-2019-12-19",title:"05a/Query for new employees",description:"This job was provided by an OpenFn.org user via the job library API.",source:"@site/library/jobs/auto/05a-Query-for-new-employees-2019-12-19.md",sourceDirName:"jobs/auto",slug:"/jobs/auto/05a-Query-for-new-employees-2019-12-19",permalink:"/fr/library/jobs/auto/05a-Query-for-new-employees-2019-12-19",tags:[],version:"current",frontMatter:{title:"05a/Query for new employees",sidebar_label:"05a/Query for new employees",id:"05a-Query-for-new-employees-2019-12-19",keywords:["library","job","expression","mysql","alterState"]},sidebar:"library",previous:{title:"04a/Query for job changes",permalink:"/fr/library/jobs/auto/04a-Query-for-job-changes-2019-12-12"},next:{title:"\ud83d\udcdc Create encounter in OpenHIM",permalink:"/fr/library/jobs/auto/CommCare-FHIR"}},p=[{value:"Metadata",id:"metadata",children:[],level:2},{value:"Key Functions",id:"key-functions",children:[],level:2},{value:"Expression",id:"expression",children:[],level:2}],c={toc:p};function y(e){var r=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("em",null,"This job was provided by an OpenFn.org user via the job library API."),(0,o.kt)("h2",{id:"metadata"},"Metadata"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Name: 05a/Query for new employees"),(0,o.kt)("li",{parentName:"ul"},"Adaptor: ",(0,o.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-mysql"},(0,o.kt)("inlineCode",{parentName:"a"},"@openfn/language-mysql"))),(0,o.kt)("li",{parentName:"ul"},"Adaptor Version: ",(0,o.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-mysql"},(0,o.kt)("inlineCode",{parentName:"a"},"latest"))),(0,o.kt)("li",{parentName:"ul"},"Created about 2 years ago"),(0,o.kt)("li",{parentName:"ul"},"Updated over 1 year ago"),(0,o.kt)("li",{parentName:"ul"},"Score: ",(0,o.kt)("b",null,"0")," (an ",(0,o.kt)("a",{parentName:"li",href:"/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,o.kt)("h2",{id:"key-functions"},"Key Functions"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"alterState")),(0,o.kt)("h2",{id:"expression"},"Expression"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"sqlString(state => {\n  return \"SELECT person_id, person_name, msisdn, status FROM employee_updates WHERE status='NEW';\";\n});\n\nalterState(state => {\n  state.new_employees = state.response.body;\n  console.log(state.new_employees);\n  return state;\n})\n\nsqlString(state => {\n  return `UPDATE employee_updates SET status='PROCESSED' WHERE status='NEW'`;\n});\n")))}y.isMDXComponent=!0}}]);