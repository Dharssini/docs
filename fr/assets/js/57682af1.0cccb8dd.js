"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[79745],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=a,m=p["".concat(i,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=f;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},20776:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={title:"Bulk fetch cases",sidebar_label:"Bulk fetch cases",id:"Bulk-fetch-cases-2023-03-24",keywords:["library","job","expression","http","each","get","map"]},s=void 0,l={unversionedId:"library/jobs/auto/Bulk-fetch-cases-2023-03-24",id:"library/jobs/auto/Bulk-fetch-cases-2023-03-24",title:"Bulk fetch cases",description:"This job was provided by an OpenFn.org user via the job library API.",source:"@site/adaptors/library/jobs/auto/Bulk-fetch-cases-2023-03-24.md",sourceDirName:"library/jobs/auto",slug:"/library/jobs/auto/Bulk-fetch-cases-2023-03-24",permalink:"/fr/adaptors/library/jobs/auto/Bulk-fetch-cases-2023-03-24",draft:!1,tags:[],version:"current",frontMatter:{title:"Bulk fetch cases",sidebar_label:"Bulk fetch cases",id:"Bulk-fetch-cases-2023-03-24",keywords:["library","job","expression","http","each","get","map"]},sidebar:"adaptors",previous:{title:"\ud83d\udcdc Chaining synchronous http requests",permalink:"/fr/adaptors/library/jobs/auto/synchronous-http-request"},next:{title:"Bulk fetch from CommCare [2022]",permalink:"/fr/adaptors/library/jobs/auto/Bulk-fetch-from-CommCare-2022-2022-06-27"}},i={},c=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("em",null,"This job was provided by an OpenFn.org user via the job library API."),(0,a.kt)("h2",{id:"metadata"},"Metadata"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Name: Bulk fetch cases"),(0,a.kt)("li",{parentName:"ul"},"Adaptor: ",(0,a.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-http"},(0,a.kt)("inlineCode",{parentName:"a"},"@openfn/language-http"))),(0,a.kt)("li",{parentName:"ul"},"Adaptor Version: ",(0,a.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-http/releases/tag/v4.2.3"},(0,a.kt)("inlineCode",{parentName:"a"},"v4.2.3"))),(0,a.kt)("li",{parentName:"ul"},"Created about 4 hours ago"),(0,a.kt)("li",{parentName:"ul"},"Updated about 3 hours ago"),(0,a.kt)("li",{parentName:"ul"},"Score: ",(0,a.kt)("b",null,"43")," (an ",(0,a.kt)("a",{parentName:"li",href:"/adaptors/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,a.kt)("h2",{id:"key-functions"},"Key Functions"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"each"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"get"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"map")),(0,a.kt)("h2",{id:"expression"},"Expression"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"fn(state => {\n  const baseUrl =\n    'https://www.commcarehq.org/a/lwala-community-alliance/api/v0.5/case/';\n\n  const formIds = [\n    '457C806C-B47D-44F0-BE4B-7E88F7162D1D',\n    // '320142AD-BC92-4470-951E-B3CA140BDC4A',\n    // '318B2FE0-F17F-4FC2-8EBE-1FF170F25B3F',\n  ];\n\n  const limit = 5000;\n  const indexedOnStart = '2023-03-23';\n  const receivedOnEnd = '2023-03-23';\n  // const indexedOnStart = '2022-05-31';\n  // const receivedOnEnd = '2022-05-01';\n\n  const queries = formIds.map(\n    id =>\n      //`?xmlns=http://openrosa.org/formdesigner/${id}` +\n      `?indexed_on_start=${indexedOnStart}` +\n      //`&received_on_end=${receivedOnEnd}` +\n      `&limit=${limit}`\n  );\n\n  return { ...state, queries, baseUrl, payloads: [] };\n});\n\n// create a \"recursiveGet\" which will call itself if CommCare tells us there's\n// more data to fetch for the same form\nfn(state => {\n  const recursiveGet = url =>\n    get(url, {}, nextState => {\n      const { baseUrl, data, payloads } = nextState;\n      const { meta, objects } = data;\n      console.log('Metadata in CommCare response:', meta);\n\n      const finalState = { ...nextState, payloads: [...payloads, ...objects] };\n\n      if (meta.next) {\n        console.log('Next query detected, recursing...');\n        return recursiveGet(`${baseUrl}${meta.next}`)(finalState);\n      }\n      return finalState;\n    });\n\n  return { ...state, recursiveGet };\n});\n\n// for each initial query, fetch data recursively\neach(\n  '$.queries[*]',\n  fn(state => state.recursiveGet(`${state.baseUrl}${state.data}`)(state))\n);\n// log the total number of payloads returned\nfn(state => {\n  console.log('Count of payloads', state.payloads.length);\n  return { ...state, references: [], data: {} };\n});\n\n// send all of those payloads to OpenFn in batches\n")))}d.isMDXComponent=!0}}]);