"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[3917],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),f=o,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||a;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},77634:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return y},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r,o=n(83117),a=n(80102),i=(n(67294),n(3905)),l=["components"],s={title:"Portabilit\xe9"},p=void 0,c={unversionedId:"portability",id:"portability",title:"Portabilit\xe9",description:"Intentions",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/portability.md",sourceDirName:".",slug:"/portability",permalink:"/fr/documentation/portability",draft:!1,editUrl:"https://github.com/openfn/docs/edit/main/docs/portability.md",tags:[],version:"current",frontMatter:{title:"Portabilit\xe9"},sidebar:"docs",previous:{title:"Planification du d\xe9ploiement",permalink:"/fr/documentation/deploy/options"},next:{title:"Plateforme",permalink:"/fr/documentation/deploy/platform"}},u={},d=[{value:"Intentions",id:"intentions",level:2},{value:"Proposal v2 <code>@latest</code>",id:"proposal-v2-latest",level:2},{value:"Autres versions",id:"autres-versions",level:2}],f=(r="ReactPlayer",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),m={toc:d};function y(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"intentions"},"Intentions"),(0,i.kt)("p",null,"Beyond facilitating portability/transferability between OpenFn's ",(0,i.kt)("a",{parentName:"p",href:"deploy/platform"},"platform")," and ",(0,i.kt)("a",{parentName:"p",href:"/documentation/microservice/home"},"microservice")," deployment pathways, the portability proposal (needs a better name... and...) seeks to establish a simple, globally-applicable way of ",(0,i.kt)("strong",{parentName:"p"},"specifying workflow automation")," that might be applied across workflow-engines/integration platforms across the sector. Nothing about the spec ",(0,i.kt)("em",{parentName:"p"},"must")," be specific to OpenFn or any one of our individual products. We envision a future in which software built on ",(0,i.kt)("a",{parentName:"p",href:"deploy/diy"},"core"),", ",(0,i.kt)("a",{parentName:"p",href:"deploy/diy"},"engine"),", and entirely new and different integration/workflow tools can adopt this specification."),(0,i.kt)("p",null,"Il se r\xe9sume \xe0 trois ensembles cl\xe9s d'artefacts : ",(0,i.kt)("inlineCode",{parentName:"p"},"les taches"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"les d\xe9clencheurs "),", et les ",(0,i.kt)("inlineCode",{parentName:"p"},"identifiants"),". Respectivement, ils d\xe9terminent (1) quelles actions doivent \xeatre effectu\xe9es, (2) quand elles doivent \xeatre effectu\xe9es, et (3) quelle authentification, le cas \xe9ch\xe9ant, ils auront besoin pour les effectuer."),(0,i.kt)("p",null,"Si vous souhaitez contribuer \xe0 la sp\xe9cification, contactez OpenFn via le ",(0,i.kt)("a",{parentName:"p",href:"https://community.openfn.org"},"forum de la communaut\xe9"),", \xe9crivez-nous ou sugg\xe9rez des modifications en soumettant une demande ici."),(0,i.kt)("p",null,"importer ReactPlayer depuis 'react-player' ;"),(0,i.kt)(f,{url:"https://www.youtube.com/watch?v=9xXK5xoiMgA",mdxType:"ReactPlayer"}),(0,i.kt)("h2",{id:"proposal-v2-latest"},"Proposal v2 ",(0,i.kt)("inlineCode",{parentName:"h2"},"@latest")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  job-1:\n    expression: >\n      registerPatient({\n        patient-id: state.data.id,\n        dob: state.data.birth\n      })\n    adaptor: '@openfn/language-openmrs'\n    trigger: trigger-1\n    credential: my-secret-credential\n  recurring-job:\n    expression: >\n      alterState(state => {\n        console.log(\"Hi there!\")\n        return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: every-minute\n  flow-job:\n    expression: >\n      alterState(state => {\n        state.data.number = state.data.number * 3\n        return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: after-j1\n  catch-job:\n    expression: >\n      alterState(state => {\n        state.message = \"handled it.\"\n        return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: j1-fails\n\ntriggers:\n  trigger-1:\n    criteria: '{\"number\":2}'\n  every-minute:\n    cron: '* * * * *'\n  after-j1:\n    success: job-1\n  j1-fails:\n    failure: job-1\n\n# Note that credential keys get copied, but values must be manually entered\n# after the export is completed.\ncredentials:\n  my-secret-credential:\n    username: '******'\n    password: '******'\n")),(0,i.kt)("h2",{id:"autres-versions"},"Autres versions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"portability-versions#proposal-v3"},"Portability Proposal v3")," ",(0,i.kt)("inlineCode",{parentName:"li"},"@next")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"portability-versions#proposal-v1"},"Portability Proposal v1"))))}y.isMDXComponent=!0}}]);