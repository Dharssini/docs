"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[59420],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,f=c["".concat(i,".").concat(d)]||c[d]||u[d]||o;return n?r.createElement(f,l(l({ref:t},m),{},{components:n})):r.createElement(f,l({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=c;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},60791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"05b/Update ODK eval form",sidebar_label:"05b/Update ODK eval form",id:"05b-Update-ODK-eval-form-2019-12-19",keywords:["library","job","expression","http","get","post","Number"]},l=void 0,s={unversionedId:"jobs/auto/05b-Update-ODK-eval-form-2019-12-19",id:"jobs/auto/05b-Update-ODK-eval-form-2019-12-19",title:"05b/Update ODK eval form",description:"This job was provided by an OpenFn.org user via the job library API.",source:"@site/library/jobs/auto/05b-Update-ODK-eval-form-2019-12-19.md",sourceDirName:"jobs/auto",slug:"/jobs/auto/05b-Update-ODK-eval-form-2019-12-19",permalink:"/fr/library/jobs/auto/05b-Update-ODK-eval-form-2019-12-19",draft:!1,tags:[],version:"current",frontMatter:{title:"05b/Update ODK eval form",sidebar_label:"05b/Update ODK eval form",id:"05b-Update-ODK-eval-form-2019-12-19",keywords:["library","job","expression","http","get","post","Number"]},sidebar:"library",previous:{title:"05/ Submit employee evaluation",permalink:"/fr/library/jobs/auto/05-Submit-employee-evaluation-2019-12-03"},next:{title:"1. Get CommCare Forms (Bulk Extract)",permalink:"/fr/library/jobs/auto/1-Get-CommCare-Forms-Bulk-Extract-2021-04-08"}},i={},p=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("em",null,"This job was provided by an OpenFn.org user via the job library API."),(0,a.kt)("h2",{id:"metadata"},"Metadata"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Name: 05b/Update ODK eval form"),(0,a.kt)("li",{parentName:"ul"},"Adaptor: ",(0,a.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-http"},(0,a.kt)("inlineCode",{parentName:"a"},"@openfn/language-http"))),(0,a.kt)("li",{parentName:"ul"},"Adaptor Version: ",(0,a.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-http"},(0,a.kt)("inlineCode",{parentName:"a"},"latest"))),(0,a.kt)("li",{parentName:"ul"},"Created almost 3 years ago"),(0,a.kt)("li",{parentName:"ul"},"Updated over 2 years ago"),(0,a.kt)("li",{parentName:"ul"},"Score: ",(0,a.kt)("b",null,"0")," (an ",(0,a.kt)("a",{parentName:"li",href:"/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,a.kt)("h2",{id:"key-functions"},"Key Functions"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"get"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"post"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Number")),(0,a.kt)("h2",{id:"expression"},"Expression"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Your job goes here.\nget(\n  'http://165.227.185.106/formXml',\n  {\n    query: {\n      formId: 'evaluation_form',\n    },\n  },\n  state => {\n    let template = state.data.body;\n    let templateUpdated = false;\n\n    const itemEx = /<item>\\s?<label>[^<>]*<\\/label>\\s?<value>[^<>]*<\\/value>\\s?<\\/item>/gi;\n    const itemMatches = template.match(itemEx);\n\n    const selectUserEx = /<select1\\s+ref=\"\\/EvaluationForm\\/social_worker_id\">/gi;\n\n    console.log(`Receiving ${state.new_employees.length} new data!`);\n\n    for (let j = 0; j < state.new_employees.length; j++) {\n      let userExists = false;\n\n      let userId = state.new_employees[j].person_id.split('|')[1];\n      console.log(`Processing user: ${userId}.`);\n\n      for (let i = 0; i < itemMatches.length; i++) {\n        if (itemMatches[i].indexOf(userId) >= 0) {\n          userExists = true;\n        }\n      }\n\n      if (!userExists) {\n        const selectUserMatches = template.match(selectUserEx);\n        const msisdn = state.new_employees[j].msisdn;\n        const userItem =\n          `<item><label>${state.new_employees[j].person_name}</label><value>${userId}_${msisdn}</value></item>`;\n        console.log(`Adding user: ${userItem}.`);\n        template = template.replace(\n          selectUserEx,\n          selectUserMatches[0] + userItem\n        );\n        templateUpdated = true;\n      } else {\n        console.log('Not seeing any user to add. Moving along!');\n      }\n    }\n\n    if (templateUpdated) {\n      const versionEx = /id=\"\\S+\"\\s+version=\"(\\S+)\"/;\n      const versionMatches = template.match(versionEx);\n      const currentVersion = Number.parseInt(versionMatches[1]);\n      console.log(`Updating form version from: ${currentVersion}`);\n      template = template.replace(currentVersion, currentVersion + 1);\n    }\n\n    state.template = template;\n    return state;\n  }\n);\n\npost('http://165.227.185.106/formUpload', {\n  formData: state => {\n    return {\n      form_def_file: {\n        value: state.template,\n        options: {\n          filename: 'evaluation_form.xml'\n        }\n      }\n    };\n  },\n});\n\n")))}u.isMDXComponent=!0}}]);