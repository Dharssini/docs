(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[340],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,f=m["".concat(l,".").concat(u)]||m[u]||p[u]||i;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},15101:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return l},default:function(){return d}});var r=n(22122),a=n(19756),i=(n(67294),n(3905)),o={title:"Upsert Home Visit Log Form",sidebar_label:"Upsert Home Visit Log Form",id:"Upsert-Home-Visit-Log-Form-2021-05-03",keywords:["library","job","expression","salesforce","alterState","dataValue","field","fields","query","relationship","upsert"]},s={unversionedId:"jobs/auto/Upsert-Home-Visit-Log-Form-2021-05-03",id:"jobs/auto/Upsert-Home-Visit-Log-Form-2021-05-03",isDocsHomePage:!1,title:"Upsert Home Visit Log Form",description:"This job was provided by an OpenFn.org user via the job library API.",source:"@site/library/jobs/auto/Upsert-Home-Visit-Log-Form-2021-05-03.md",sourceDirName:"jobs/auto",slug:"/jobs/auto/Upsert-Home-Visit-Log-Form-2021-05-03",permalink:"/fr/library/jobs/auto/Upsert-Home-Visit-Log-Form-2021-05-03",version:"current",sidebar_label:"Upsert Home Visit Log Form",frontMatter:{title:"Upsert Home Visit Log Form",sidebar_label:"Upsert Home Visit Log Form",id:"Upsert-Home-Visit-Log-Form-2021-05-03",keywords:["library","job","expression","salesforce","alterState","dataValue","field","fields","query","relationship","upsert"]},sidebar:"library",previous:{title:"Upsert Confirm Services Received",permalink:"/fr/library/jobs/auto/Upsert-Confirm-Services-Received-2021-06-14"},next:{title:"Upsert Intervention Notes",permalink:"/fr/library/jobs/auto/Upsert-Intervention-Notes-2021-04-28"}},l=[{value:"Metadata",id:"metadata",children:[]},{value:"Key Functions",id:"key-functions",children:[]},{value:"Expression",id:"expression",children:[]}],c={toc:l};function d(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("em",null,"This job was provided by an OpenFn.org user via the job library API."),(0,i.kt)("h2",{id:"metadata"},"Metadata"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Name: Upsert Home Visit Log Form"),(0,i.kt)("li",{parentName:"ul"},"Adaptor: ",(0,i.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-salesforce"},(0,i.kt)("inlineCode",{parentName:"a"},"@openfn/language-salesforce"))),(0,i.kt)("li",{parentName:"ul"},"Adaptor Version: ",(0,i.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-salesforce/releases/tag/v2.0.0"},(0,i.kt)("inlineCode",{parentName:"a"},"v2.0.0"))),(0,i.kt)("li",{parentName:"ul"},"Created about 2 months ago"),(0,i.kt)("li",{parentName:"ul"},"Updated about 7 hours ago"),(0,i.kt)("li",{parentName:"ul"},"Score: ",(0,i.kt)("b",null,"73")," (an ",(0,i.kt)("a",{parentName:"li",href:"/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,i.kt)("h2",{id:"key-functions"},"Key Functions"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"alterState"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"dataValue"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"field"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"fields"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"query"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"relationship"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"upsert")),(0,i.kt)("h2",{id:"expression"},"Expression"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// push to production\nalterState(state => {\n  const { form } = state.data;\n  const { basic_information } = form;\n  if (basic_information.intervention_hidden) {\n    return query(\n      `SELECT Id, Event__c, CreatedDate, Person_Attendance__c\n    FROM Attendance__c\n    WHERE Person_Attendance__r.Participant_Identification_Number_PID__c = '${form.case['@case_id']}'\n    ORDER BY CreatedDate DESC LIMIT 1`\n    )(state).then(state => {\n      const { records } = state.references[0];\n      const eventId = records[0].Event__c;\n      state.data.eventField = [field('Event__c', eventId)];\n      return state;\n    });\n    // state.data.eventField = [\n    //   relationship('Event__r', 'CommCare_Ext_ID__c', dataValue('form.basic_information.intervention_hidden')(state)),\n    // ];\n    // return state;\n  } else {\n    return query(\n      `SELECT Id, Event__c, CreatedDate, Person_Attendance__c\n    FROM Attendance__c\n    WHERE Person_Attendance__r.Participant_Identification_Number_PID__c = '${form.case['@case_id']}'\n    ORDER BY CreatedDate DESC LIMIT 1`\n    )(state).then(state => {\n      const { records } = state.references[0];\n      const eventId = records[0].Event__c;\n      state.data.eventField = [field('Event__c', eventId)];\n      return state;\n    });\n  }\n});\n\nupsert('Home_Visit__c', 'CommCare_Ext_ID__c', state => ({\n  ...fields(\n    field('CommCare_Ext_ID__c', dataValue('id')),\n    // relationship('Event__r', 'CommCare_Ext_ID__c', dataValue('form.basic_information.intervention_hidden')),\n    relationship('Person_visiting__r', 'Participant_Identification_Number_PID__c', dataValue('form.case.@case_id')),\n    //=== NOTE: We do not need to map People information because Home Visit is related to Person. ======//\n    //This info already lives on the Person-level.\n    // field('First_Name__c', dataValue('form.basic_information.participant_first_name')),\n    // field('Surname__c', dataValue('form.basic_information.participant_surname')),\n    // field('Sex__c', dataValue('form.basic_information.gender')),\n    // field('Date_of_Birth__c', dataValue('form.basic_information.date_of_birth')),\n    // field('Physical Address Community City', dataValue('form.basic_information.participant_address')),\n    //================\n    field('Consent_Given__c', dataValue('form.basic_information.consent_received')),\n    //field('Consent_Given__c', dataValue('form.participant_infomation.visit_information.consent_given')) //Repeated mapping\n    //field('From_Venue__c', dataValue('form.basic_information.venue_hidden')),\n    field('Reason_for_Home_Visit__c', dataValue('form.participant_infomation.reason_for_home_visit')),\n    field('Visit_Date__c', dataValue('form.participant_infomation.visit_information.visit_date')),\n    field('Additional_Comments__c', dataValue('form.administrative.visit_notes'))\n  ),\n  ...fields(...state.data.eventField),\n}));\n\n")))}d.isMDXComponent=!0}}]);