"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[80806],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>f});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),d=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=d(e.components);return n.createElement(l.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(t),m=r,f=c["".concat(l,".").concat(m)]||c[m]||u[m]||i;return t?n.createElement(f,o(o({ref:a},p),{},{components:t})):n.createElement(f,o({ref:a},p))}));function f(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=t[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4576:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=t(87462),r=(t(67294),t(3905));const i={title:"Introduction aux Jobs"},o=void 0,s={unversionedId:"build/jobs",id:"build/jobs",title:"Introduction aux Jobs",description:'A job defines the specific series of "operations" (think: tasks or database actions) to be performed when a triggering message is received (even-based), another run finishes (flow- or catch-based) or a pre-scheduled (and recurring) time is reached.',source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/build/jobs.md",sourceDirName:"build",slug:"/build/jobs",permalink:"/fr/documentation/build/jobs",draft:!1,editUrl:"https://github.com/openfn/docs/edit/main/docs/build/jobs.md",tags:[],version:"current",frontMatter:{title:"Introduction aux Jobs"},sidebar:"docs",previous:{title:"Glossary for Integration",permalink:"/fr/documentation/getting-started/glossary"},next:{title:"Designing a job",permalink:"/fr/documentation/jobs/job-design-intro"}},l={},d=[{value:"Les propri\xe9t\xe9s d&#39;un job",id:"les-propri\xe9t\xe9s-dun-job",level:2},{value:"Adaptors",id:"adaptors",level:2},{value:"Adaptor Versions",id:"adaptor-versions",level:3},{value:"Upgrading to newer adaptor versions",id:"upgrading-to-newer-adaptor-versions",level:3},{value:"Composing job expressions",id:"composing-job-expressions",level:2},{value:"A basic expression",id:"a-basic-expression",level:3},{value:"dataValue",id:"datavalue",level:3},{value:"An expression with custom Javascript",id:"an-expression-with-custom-javascript",level:3},{value:"Available Javascript Globals",id:"available-javascript-globals",level:2},{value:"Examples of adaptor-specific functions",id:"examples-of-adaptor-specific-functions",level:2},{value:"language-common",id:"language-common",level:3},{value:"each()",id:"each",level:4},{value:"beta.each",id:"betaeach",level:4},{value:"Salesforce",id:"salesforce",level:3},{value:"dhis2",id:"dhis2",level:3},{value:"OpenMRS",id:"openmrs",level:3},{value:"Snippets and samples",id:"snippets-and-samples",level:2},{value:"Job expression (for CommCare to SF)",id:"job-expression-for-commcare-to-sf",level:3},{value:"Accessing the &quot;data array&quot; in Open Data Kit submissions",id:"accessing-the-data-array-in-open-data-kit-submissions",level:3},{value:"ODK to Salesforce: create parent record with many children from parent data",id:"odk-to-salesforce-create-parent-record-with-many-children-from-parent-data",level:3},{value:"Create many child records WITHOUT a repeat group in ODK",id:"create-many-child-records-without-a-repeat-group-in-odk",level:3},{value:"Salesforce: perform an update",id:"salesforce-perform-an-update",level:3},{value:"Salesforce: Set record type using &#39;relationship(...)&#39;",id:"salesforce-set-record-type-using-relationship",level:3},{value:"Salesforce: Set record type using record Type ID",id:"salesforce-set-record-type-using-record-type-id",level:3},{value:"Telerivet: Send SMS based on Salesforce workflow alert",id:"telerivet-send-sms-based-on-salesforce-workflow-alert",level:3},{value:"HTTP: fetch but don&#39;t fail!",id:"http-fetch-but-dont-fail",level:3},{value:"Sample DHIS2 events API job:",id:"sample-dhis2-events-api-job",level:3},{value:"Sample DHIS2 data value sets API job:",id:"sample-dhis2-data-value-sets-api-job",level:3},{value:"sample openMRS expression, creates a person and then a patient",id:"sample-openmrs-expression-creates-a-person-and-then-a-patient",level:3},{value:"merge many values into a child path",id:"merge-many-values-into-a-child-path",level:3},{value:"arrayToString",id:"arraytostring",level:3},{value:"access an image URL from an ODK submission",id:"access-an-image-url-from-an-odk-submission",level:3},{value:"alterState (alter state) to make sure data is in an array",id:"alterstate-alter-state-to-make-sure-data-is-in-an-array",level:3},{value:"Login in to a server with a custom SSL Certificate",id:"login-in-to-a-server-with-a-custom-ssl-certificate",level:3},{value:"Anonymous Functions",id:"anonymous-functions",level:2},{value:"Custom replacer",id:"custom-replacer",level:3},{value:"Custom arrayToString",id:"custom-arraytostring",level:3},{value:"Custom concatenation",id:"custom-concatenation",level:3},{value:"Concatenation of null values",id:"concatenation-of-null-values",level:3},{value:"Custom Nth reference ID",id:"custom-nth-reference-id",level:3},{value:"Convert date string to standard ISO date for Salesforce",id:"convert-date-string-to-standard-iso-date-for-salesforce",level:3},{value:"Use external ID fields for relationships during a bulk load in Salesforce",id:"use-external-id-fields-for-relationships-during-a-bulk-load-in-salesforce",level:3},{value:"Bulk upsert with an external ID in salesforce",id:"bulk-upsert-with-an-external-id-in-salesforce",level:3}],p={toc:d};function c(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'A job defines the specific series of "operations" (think: tasks or database actions) to be performed when a triggering message is received (even-based), another run finishes (flow- or catch-based) or a pre-scheduled (and recurring) time is reached.'),(0,r.kt)("h2",{id:"les-propri\xe9t\xe9s-dun-job"},"Les propri\xe9t\xe9s d'un job"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Name")," - a human-readable name describing the series of operations"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Project")," (Projet)\xa0-\xa0le projet auquel le job appartient"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Trigger")," - the trigger that is used to automatically initiate a run of the job"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Adaptor")," - the adaptor that is used to provide tool-specific functionality for this job (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"language-dhis2")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"language-commcare"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Auto-process?")," - a true/false switch which controls whether the trigger should be used to automatically run this job when its criteria are met"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Expression"),' - the job "script" itself; a sequence of operations')),(0,r.kt)("h2",{id:"adaptors"},"Adaptors"),(0,r.kt)("p",null,"We've got a whole section on creating new ",(0,r.kt)("a",{parentName:"p",href:"/adaptors"},"Adaptors"),", but the critical thing to be aware of when writing a job is that you've got to choose an ",(0,r.kt)("strong",{parentName:"p"},"adaptor"),", and an ",(0,r.kt)("strong",{parentName:"p"},"adaptor version"),"."),(0,r.kt)("p",null,"All of the discussion below of helper functions like ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"findPatient")," requires some understanding of adaptors. When you run a job, you're borrowing a layer of functionality that's been built to connect with some specific API, type of API, or database."),(0,r.kt)("p",null,"For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," means one thing in ",(0,r.kt)("inlineCode",{parentName:"p"},"language-salesforce")," and another thing entirely in ",(0,r.kt)("inlineCode",{parentName:"p"},"language-dhis2"),". For this reason, before you can begin writing a job you have to decide which ",(0,r.kt)("inlineCode",{parentName:"p"},"adaptor")," to work with."),(0,r.kt)("h3",{id:"adaptor-versions"},"Adaptor Versions"),(0,r.kt)("p",null,'Adaptors change over time. They\'re open source, and we encourage as much contribution as possible\u2014releasing new versions for use on OpenFn.org as soon as they pass our security reviews. New features may be added and bugs may be fixed, but in order to make sure that an existing integration is not broken, we recommend that you select a specific version (rather than using the "auto-upgrade" feature) when you choose an adaptor. The highest released version is the default choice here.'),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("em",{parentName:"p"},"first 4 lines")," in the log of any run on OpenFn will tell you what adaptor you're running. (As well as the version of core and NodeJs) This is incredibly important, particularly if you're trying to troubleshoot jobs in various environments (like your own shell, OpenFn.org, OpenFn/microservice, etc.).")),(0,r.kt)("p",null,"Faites bien attention \xe0 la ",(0,r.kt)("inlineCode",{parentName:"p"},"version")," que vous utilisez pour r\xe9diger un job. Consider the following run logs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u25f2 \u25f1  @openfn/core#v1.3.12 (Node.js v12.20.1)  \u2502\n\u2502 \u25f3 \u25f0             @openfn/language-http#v2.4.15 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n...more logs here...\n\nFinished.\n")),(0,r.kt)("p",null,"Notez qu'ici, OpenFn/core version ",(0,r.kt)("inlineCode",{parentName:"p"},"1.3.12")," fonctionne sur Node.js ",(0,r.kt)("inlineCode",{parentName:"p"},"12.20.1")," et en utilisant ",(0,r.kt)("inlineCode",{parentName:"p"},"@openfn/language-http#v2. .15")," qui pourrait avoir des fonctions d'aide tr\xe8s diff\xe9rentes de ",(0,r.kt)("inlineCode",{parentName:"p"},"@openfn/language-http#v3.1.5")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"/adaptors#install-on-platform-via-npm"},"the npm section")," on the adaptors docs page to learn how to install an adaptor from ",(0,r.kt)("inlineCode",{parentName:"p"},"npm")," while using ",(0,r.kt)("inlineCode",{parentName:"p"},"platform"),".")),(0,r.kt)("h3",{id:"upgrading-to-newer-adaptor-versions"},"Upgrading to newer adaptor versions"),(0,r.kt)("p",null,"While it may be beneficial to upgrade as part of your routine maintenance, these upgrades should be carefully tested. Most often, customers upgrade to a new adaptor version for an existing job when they are making business-drives changes to that job. Some business-driven changes may actually ",(0,r.kt)("em",{parentName:"p"},"require")," upgrading the version in order to use a new feature from the adaptor. Even if those changes don't require and upgrade, if the technical team must spend time testing job-specific changes anyway, it may be an ideal opportunity to test also test an upgrade."),(0,r.kt)("p",null,"Adaptors follow ",(0,r.kt)("a",{parentName:"p",href:"https://semver.org/"},"SEMVER")," so you can be reasonably assured that upgrading from ",(0,r.kt)("inlineCode",{parentName:"p"},"x.1.z")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"x.2.z")," will not lead to existing job code failing, but an upgrade from ",(0,r.kt)("inlineCode",{parentName:"p"},"3.y.z")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"4.y.z")," may\u2014in SEMVER ",(0,r.kt)("em",{parentName:"p"},"major")," upgrades (those that change the first number in the ",(0,r.kt)("inlineCode",{parentName:"p"},"x.y.z"),' version number) have "breaking" or "non-backwards compatible" changes.'),(0,r.kt)("h2",{id:"composing-job-expressions"},"Composing job expressions"),(0,r.kt)("p",null,"In most cases, a job expression is a series of ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"upsert")," actions that are run after a message arrives, using data from that message. It could look like this:"),(0,r.kt)("h3",{id:"a-basic-expression"},"A basic expression"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"create(\n  'Patient__c',\n  fields(\n    field('Name', dataValue('form.surname')),\n    field('Other Names', dataValue('form.firstName')),\n    field('Age__c', dataValue('form.ageInYears')),\n    field('Is_Enrolled__c', true),\n    field('Enrollment_Status__c', 3)\n  )\n);\n")),(0,r.kt)("p",null,"That would create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Patient__c")," in some other system. The patient's ",(0,r.kt)("inlineCode",{parentName:"p"},"Name")," will be determined by the triggering message (the value inside ",(0,r.kt)("inlineCode",{parentName:"p"},"form.surname"),", specifically) and the patient's ",(0,r.kt)("inlineCode",{parentName:"p"},"Is_Enrolled__c")," will ",(0,r.kt)("em",{parentName:"p"},"always")," be ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". See how we hard coded it?"),(0,r.kt)("p",null,"What you see above is OpenFn's own syntax, and you've got access to dozens of common \"helper functions\" like ",(0,r.kt)("inlineCode",{parentName:"p"},"dataValue(path)")," and destination specific functions like ",(0,r.kt)("inlineCode",{parentName:"p"},"create(object,attributes)"),". While most cases are covered out-of-the-box, jobs are ",(0,r.kt)("strong",{parentName:"p"},"evaluated as Javascript"),". This means that you can write your own custom, anonymous functions to do whatever your heart desires:"),(0,r.kt)("h3",{id:"datavalue"},"dataValue"),(0,r.kt)("p",null,'The most commonly used "helper function" is ',(0,r.kt)("inlineCode",{parentName:"p"},"dataValue(...)"),". This function takes a single argument\u2014the ",(0,r.kt)("em",{parentName:"p"},"path")," to some data that you're trying to access inside the message that has triggered a particular run. In the above example, you'll notice that ",(0,r.kt)("inlineCode",{parentName:"p"},"Is_Enrolled__c")," is ",(0,r.kt)("em",{parentName:"p"},"always")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", but ",(0,r.kt)("inlineCode",{parentName:"p"},"Name")," will change for each message that triggers the running of this job. It's set to ",(0,r.kt)("inlineCode",{parentName:"p"},"dataValue('form.surname')")," which means it will set ",(0,r.kt)("inlineCode",{parentName:"p"},"Name")," to whatever value is present at ",(0,r.kt)("inlineCode",{parentName:"p"},"state.data.form.surname")," for the triggering message. It might be Bob for one message, and Alice for another."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Note that for message-triggered jobs, ",(0,r.kt)("inlineCode",{parentName:"p"},"state")," will always have it's ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," key (i.e., ",(0,r.kt)("inlineCode",{parentName:"p"},"state.data"),") set to the body of the triggering message (aka HTTP request)."),(0,r.kt)("p",{parentName:"admonition"},"I.e., ",(0,r.kt)("inlineCode",{parentName:"p"},"dataValue('some.path') === state.data.some.path"),", as evaluated at the time that the operation (",(0,r.kt)("inlineCode",{parentName:"p"},"create")," in the above expression) is executed.")),(0,r.kt)("h3",{id:"an-expression-with-custom-javascript"},"An expression with custom Javascript"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"create(\n  'Patient__c',\n  fields(\n    field('Name', state => {\n      console.log('Manipulate state to get your desired output.');\n      return Array.apply(null, state.data.form.names).join(', ');\n    }),\n    field('Age__c', 7)\n  )\n);\n")),(0,r.kt)("p",null,"Here, the patient's name will be a comma separated concatenation of all the values in the ",(0,r.kt)("inlineCode",{parentName:"p"},"patient_names")," array from our source message."),(0,r.kt)("h2",{id:"available-javascript-globals"},"Available Javascript Globals"),(0,r.kt)("p",null,"For security reasons, users start with access to the following standard Javascript globals, and can request more by opening an issue on Github:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"},(0,r.kt)("inlineCode",{parentName:"a"},"Array"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/api/console.html"},(0,r.kt)("inlineCode",{parentName:"a"},"console"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON"},(0,r.kt)("inlineCode",{parentName:"a"},"JSON"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"},(0,r.kt)("inlineCode",{parentName:"a"},"Number"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},(0,r.kt)("inlineCode",{parentName:"a"},"Promise"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"},(0,r.kt)("inlineCode",{parentName:"a"},"String")))),(0,r.kt)("h2",{id:"examples-of-adaptor-specific-functions"},"Examples of adaptor-specific functions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"N.B.: This is just a sample.")," There are lots more available in the language-packs."),(0,r.kt)("h3",{id:"language-common"},"language-common"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"field('destination_field_name__c', 'value')")," Renvoie une cl\xe9 ou la paire de valeurs dans un tableau. ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L248"},"(source)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fields(list_of_fields)")," compresse les paires de valeurs cl\xe9s dans un objet. ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L258"},"(source)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dataValue('JSON_path')")," extrait une seule valeur des donn\xe9es sources. ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L71"},"(source)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"each(JSON_path, op\xe9ration(...))")," D\xe9termine un tableau de donn\xe9es en fonction d'un JSONPath ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L194"},"(source)"),". Voir beta.each lorsque vous utilisez plusieurs each() dans une expression."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'each(merge(dataPath("CHILD_ARRAY[*]"),fields(field("metaId", dataValue("*meta-instance-id*")),field("parentId", lastReferenceValue("id")))), create(...))')," fusionne les donn\xe9es dans un tableau puis cr\xe9e pour chaque \xe9l\xe9ment du tableau ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L272"},"(source)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lastReferenceValue('id')")," obtient le sfID du dernier \xe9l\xe9ment cr\xe9\xe9 ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L96-L100"},"(source)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"function(state){return state.references[state.references.length-N].id})")," r\xe9cup\xe8re le sfID du ni\xe8me \xe9l\xe9ment cr\xe9\xe9")),(0,r.kt)("h4",{id:"each"},"each()"),(0,r.kt)("p",null,"Read more about each here: ",(0,r.kt)("a",{parentName:"p",href:"/documentation/jobs/each"},"The each(...) operation")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"each(\n  dataPath('csvData[*]'),\n  upsertTEI(\n    'aX5hD4qUpRW', //piirs uid\n    {\n      trackedEntityType: 'bsDL4dvl2ni',\n      orgUnit: dataValue('OrgUnit'),\n      attributes: [\n        {\n          attribute: 'aX5hD4qUpRW',\n          value: dataValue('aX5hD4qUpRW'),\n        },\n        {\n          attribute: 'MxQPuS9G7hh',\n          value: dataValue('MxQPuS9G7hh'),\n        },\n      ],\n    },\n    { strict: false }\n  )\n);\n")),(0,r.kt)("h4",{id:"betaeach"},"beta.each"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"beta.each(JSON_path, operation(...))\n")),(0,r.kt)("p",null,"Scopes an array of data based on a JSONPath but then returns to the state it was given upon completion ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenFn/language-common/blob/master/src/beta.js#L44"},"(source)"),". This is necessary if you string multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"each(...)")," functions together in-line in the same expression. (E.g., Given data which has multiple separate 'repeat groups' in a form which are rendered as arrays, you want to create new records for each item inside the first repeat group, then ",(0,r.kt)("em",{parentName:"p"},"RETURN TO THE TOP LEVEL")," of the data, and then create new records for each item in the second repeat group. Using ",(0,r.kt)("inlineCode",{parentName:"p"},"beta.each(...)")," lets you enter the first array, create your records, then return to the top level and be able to enter the second array."),(0,r.kt)("h3",{id:"salesforce"},"Salesforce"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'create("DEST_OBJECT_NAME__C", fields(...))')," Cr\xe9er un nouvel objet. Prend 2 param\xe8tres : un objet et des attributs. ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L42-L63"},"(source)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'upsert("DEST_OBJECT_NAME__C", "DEST_OBJECT_EXTERNAL_ID__C", fields(...))')," Cr\xe9e ou met \xe0 jour un objet. Prend 3 param\xe8tres\xa0: un objet, un champ ID et des attributs . ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L65-L80"},"(source)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'relation ("DEST_RELATIONSHIP_NAME__r", "EXTERNAL_ID_ON_RELATED_OBJECT__C", "SOURCE_DATA_OR_VALUE")')," Ajoute une recherche ou une \xab\xa0insersion de d\xf4me\xa0\xbb \xe0 un enregistrement. ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-salesforce/blob/master/src/sourceHelpers.js#L21-L40"},"(source)"))),(0,r.kt)("h3",{id:"dhis2"},"dhis2"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"event(...)")," Cr\xe9e un \xe9v\xe9nement. ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-dhis2/blob/master/src/Adaptor.js#L31-L60"},"(source)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dataValueSet(...)")," Envoie des valeurs de donn\xe9es en utilisant la ressource dataValueSets ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-dhis2/blob/master/src/Adaptor.js#L62-L82"},"(source)"))),(0,r.kt)("h3",{id:"openmrs"},"OpenMRS"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"person(...)")," Prend une charge utile de donn\xe9es pour cr\xe9er une personne ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-openmrs/blob/master/src/Adaptor.js#L31-L60"},"(source)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"patient(...)")," Prend une charge utile de donn\xe9es pour cr\xe9er un patient ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-openmrs/blob/master/src/Adaptor.js#L62-L90"},"(source)"))),(0,r.kt)("h2",{id:"snippets-and-samples"},"Snippets and samples"),(0,r.kt)("p",null,"Below you can find some examples of block code for different functions and data handling contexts."),(0,r.kt)("h3",{id:"job-expression-for-commcare-to-sf"},"Job expression (for CommCare to SF)"),(0,r.kt)("p",null,"The following job expression will take a matching receipt and use data from that receipt to upsert a ",(0,r.kt)("inlineCode",{parentName:"p"},"Patient__c")," record in Salesforce and create multiple new ",(0,r.kt)("inlineCode",{parentName:"p"},"Patient_Visit__c")," (child to Patient) records."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"upsert(\n  'Patient__c',\n  'Patient_Id__c',\n  fields(\n    field('Patient_Id__c', dataValue('form.patient_ID')),\n    relationship('Nurse__r', 'Nurse_ID_code__c', dataValue('form.staff_id')),\n    field('Phone_Number__c', dataValue('form.mobile_phone'))\n  )\n),\n  each(\n    join('$.data.form.visits[*]', '$.references[0].id', 'Id'),\n    create(\n      'Visit__c',\n      fields(\n        field('Patient__c', dataValue('Id')),\n        field('Date__c', dataValue('date')),\n        field('Reason__c', dataValue('why_did_they_see_doctor'))\n      )\n    )\n  );\n")),(0,r.kt)("h3",{id:"accessing-the-data-array-in-open-data-kit-submissions"},'Accessing the "data array" in Open Data Kit submissions'),(0,r.kt)("p",null,'Notice how we use "each" to get data from each item inside the "data array" in ODK.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"each(\n  '$.data.data[*]',\n  create(\n    'ODK_Submission__c',\n    fields(\n      field('Site_School_ID_Number__c', dataValue('school')),\n      field('Date_Completed__c', dataValue('date')),\n      field('comments__c', dataValue('comments')),\n      field('ODK_Key__c', dataValue('*meta-instance-id*'))\n    )\n  )\n);\n")),(0,r.kt)("h3",{id:"odk-to-salesforce-create-parent-record-with-many-children-from-parent-data"},"ODK to Salesforce: create parent record with many children from parent data"),(0,r.kt)("p",null,"Here, the user brings ",(0,r.kt)("inlineCode",{parentName:"p"},"time_end")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"parentId")," onto the line items from the parent object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"each(\n  dataPath('data[*]'),\n  combine(\n    create(\n      'transaction__c',\n      fields(\n        field('Transaction_Date__c', dataValue('today')),\n        relationship(\n          'Person_Responsible__r',\n          'Staff_ID_Code__c',\n          dataValue('person_code')\n        ),\n        field('metainstanceid__c', dataValue('*meta-instance-id*'))\n      )\n    ),\n    each(\n      merge(\n        dataPath('line_items[*]'),\n        fields(\n          field('end', dataValue('time_end')),\n          field('parentId', lastReferenceValue('id'))\n        )\n      ),\n      create(\n        'line_item__c',\n        fields(\n          field('transaction__c', dataValue('parentId')),\n          field('Barcode__c', dataValue('product_barcode')),\n          field('ODK_Form_Completed__c', dataValue('end'))\n        )\n      )\n    )\n  )\n);\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"NB\xa0: il y a eu un bug connu avec la fonction ",(0,r.kt)("inlineCode",{parentName:"strong"},"combine")," qui a \xe9t\xe9 r\xe9solue. ",(0,r.kt)("inlineCode",{parentName:"strong"},"combine")," peut \xeatre utilis\xe9e pour combiner deux op\xe9rations en une et est commun\xe9ment utilis\xe9 pour ex\xe9cuter plusieurs ",(0,r.kt)("inlineCode",{parentName:"strong"},"create")," \xe0 l'int\xe9rieur d'un ",(0,r.kt)("inlineCode",{parentName:"strong"},"each(path, operation)"),". Le code source de combine peut \xeatre trouv\xe9 ici : ",(0,r.kt)("a",{parentName:"strong",href:"https://github.com/OpenFn/language-common/blob/master/src/index.js#L204-L222"},"language-common: combine")))),(0,r.kt)("h3",{id:"create-many-child-records-without-a-repeat-group-in-odk"},"Create many child records WITHOUT a repeat group in ODK"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"beta.each(\n  '$.data.data[*]',\n  upsert(\n    'Outlet__c',\n    'Outlet_Code__c',\n    fields(\n      field('Outlet_Code__c', dataValue('outlet_code')),\n      field('Location__Latitude__s', dataValue('gps:Latitude')),\n      field('Location__Longitude__s', dataValue('gps:Longitude'))\n    )\n  )\n),\n  beta.each(\n    '$.data.data[*]',\n    upsert(\n      'Outlet_Call__c',\n      'Invoice_Number__c',\n      fields(\n        field('Invoice_Number__c', dataValue('invoice_number')),\n        relationship('Outlet__r', 'Outlet_Code__c', dataValue('outlet_code')),\n        relationship('RecordType', 'name', 'No Call Card'),\n        field('Trip__c', 'a0FN0000008jPue'),\n        relationship(\n          'Sales_Person__r',\n          'Sales_Rep_Code__c',\n          dataValue('sales_rep_code')\n        ),\n        field('Date__c', dataValue('date')),\n        field('Comments__c', dataValue('comments'))\n      )\n    )\n  );\n")),(0,r.kt)("h3",{id:"salesforce-perform-an-update"},"Salesforce: perform an update"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'update("Patient__c", fields(\n  field("Id", dataValue("pathToSalesforceId")),\n  field("Name__c", dataValue("patient.first_name")),\n  field(...)\n));\n')),(0,r.kt)("h3",{id:"salesforce-set-record-type-using-relationship"},"Salesforce: Set record type using 'relationship(...)'"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"create(\n  'custom_obj__c',\n  fields(\n    relationship(\n      'RecordType',\n      'name',\n      dataValue('submission_type'),\n      field('name', dataValue('Name'))\n    )\n  )\n);\n")),(0,r.kt)("h3",{id:"salesforce-set-record-type-using-record-type-id"},"Salesforce: Set record type using record Type ID"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"each(\n  '$.data.data[*]',\n  create(\n    'fancy_object__c',\n    fields(\n      field('RecordTypeId', '012110000008s19'),\n      field('site_size', dataValue('size'))\n    )\n  )\n);\n")),(0,r.kt)("h3",{id:"telerivet-send-sms-based-on-salesforce-workflow-alert"},"Telerivet: Send SMS based on Salesforce workflow alert"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"send(\n  fields(\n    field(\n      'to_number',\n      dataValue(\n        'Envelope.Body.notifications.Notification.sObject.phone_number__c'\n      )\n    ),\n    field('message_type', 'sms'),\n    field('route_id', ''),\n    field('content', function (state) {\n      return 'Hey there. Your name is '.concat(\n        dataValue('Envelope.Body.notifications.Notification.sObject.name__c')(\n          state\n        ),\n        '.'\n      );\n    })\n  )\n);\n")),(0,r.kt)("h3",{id:"http-fetch-but-dont-fail"},"HTTP: fetch but don't fail!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// =============\n// We use "fetchWithErrors(...)" so that when the\n// SMS gateway returns an error the run does not "fail".\n// It "succeeds" and then delivers that error message\n// back to Salesforce with the "Update SMS Status" job.\n// =============\nfetchWithErrors({\n  getEndpoint: \'send_to_contact\',\n  query: function (state) {\n    return {\n      msisdn:\n        state.data.Envelope.Body.notifications.Notification.sObject\n          .SMS__Phone_Number__c,\n      message:\n        state.data.Envelope.Body.notifications.Notification.sObject\n          .SMS__Message__c,\n      api_key: \'some-secret-key\',\n    };\n  },\n  externalId: state.data.Envelope.Body.notifications.Notification.sObject.Id,\n  postUrl: \'https://www.openfn.org/inbox/another-secret-key\',\n});\n')),(0,r.kt)("h3",{id:"sample-dhis2-events-api-job"},"Sample DHIS2 events API job:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"event(\n  fields(\n    field('program', 'eBAyeGv0exc'),\n    field('orgUnit', 'DiszpKrYNg8'),\n    field('eventDate', dataValue('properties.date')),\n    field('status', 'COMPLETED'),\n    field('storedBy', 'admin'),\n    field('coordinate', {\n      latitude: '59.8',\n      longitude: '10.9',\n    }),\n    field('dataValues', function (state) {\n      return [\n        {\n          dataElement: 'qrur9Dvnyt5',\n          value: dataValue('properties.prop_a')(state),\n        },\n        {\n          dataElement: 'oZg33kd9taw',\n          value: dataValue('properties.prop_b')(state),\n        },\n        {\n          dataElement: 'msodh3rEMJa',\n          value: dataValue('properties.prop_c')(state),\n        },\n      ];\n    })\n  )\n);\n")),(0,r.kt)("h3",{id:"sample-dhis2-data-value-sets-api-job"},"Sample DHIS2 data value sets API job:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"dataValueSet(\n  fields(\n    field('dataSet', 'pBOMPrpg1QX'),\n    field('orgUnit', 'DiszpKrYNg8'),\n    field('period', '201401'),\n    field('completeData', dataValue('date')),\n    field('dataValues', function (state) {\n      return [\n        { dataElement: 'f7n9E0hX8qk', value: dataValue('prop_a')(state) },\n        { dataElement: 'Ix2HsbDMLea', value: dataValue('prop_b')(state) },\n        { dataElement: 'eY5ehpbEsB7', value: dataValue('prop_c')(state) },\n      ];\n    })\n  )\n);\n")),(0,r.kt)("h3",{id:"sample-openmrs-expression-creates-a-person-and-then-a-patient"},"sample openMRS expression, creates a person and then a patient"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"person(\n  fields(\n    field('gender', 'F'),\n    field('names', function (state) {\n      return [\n        {\n          givenName: dataValue('form.first_name')(state),\n          familyName: dataValue('form.last_name')(state),\n        },\n      ];\n    })\n  )\n),\n  patient(\n    fields(\n      field('person', lastReferenceValue('uuid')),\n      field('identifiers', function (state) {\n        return [\n          {\n            identifier: '1234',\n            identifierType: '8d79403a-c2cc-11de-8d13-0010c6dffd0f',\n            location: '8d6c993e-c2cc-11de-8d13-0010c6dffd0f',\n            preferred: true,\n          },\n        ];\n      })\n    )\n  );\n")),(0,r.kt)("h3",{id:"merge-many-values-into-a-child-path"},"merge many values into a child path"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'each(\n  merge(\n    dataPath("CHILD_ARRAY[*]"),\n    fields(\n      field("metaId", dataValue("*meta-instance-id*")),\n      field("parentId", lastReferenceValue("id"))\n    )\n  ),\n  create(...)\n)\n')),(0,r.kt)("h3",{id:"arraytostring"},"arrayToString"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"arrayToString(arr, separator_string);\n")),(0,r.kt)("h3",{id:"access-an-image-url-from-an-odk-submission"},"access an image URL from an ODK submission"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// In ODK the image URL is inside an image object...\nfield("Photo_URL_text__c", dataValue("image.url")),\n')),(0,r.kt)("h3",{id:"alterstate-alter-state-to-make-sure-data-is-in-an-array"},"alterState (alter state) to make sure data is in an array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Here, we make sure CommCare gives us an array to use in each(merge(...), ...)\nalterState(state => {\n  const idCards = state.data.form.ID_cards_given_to_vendor;\n  if (!Array.isArray(idCards)) {\n    state.data.form.ID_cards_given_to_vendor = [idCards];\n  }\n  return state;\n});\n\n// Now state has been changed, and we carry on...\neach(\n  merge(\n    dataPath('form.ID_cards_given_to_vendor[*]'),\n    fields(\n      field('Vendor_Id', dataValue('form.ID_vendor')),\n      field('form_finished_time', dataValue('form.meta.timeEnd'))\n    )\n  ),\n  upsert(\n    'Small_Packet__c',\n    'sp_id__c',\n    fields(\n      field('sp_id__c', dataValue('ID_cards_given_to_vendor')),\n      relationship('Vendor__r', 'Badge_Code__c', dataValue('Vendor_Id')),\n      field(\n        'Small_Packet_Distribution_Date__c',\n        dataValue('form_finished_time')\n      )\n    )\n  )\n);\n")),(0,r.kt)("h3",{id:"login-in-to-a-server-with-a-custom-ssl-certificate"},"Login in to a server with a custom SSL Certificate"),(0,r.kt)("p",null,"This snippet describes how you would connect to a secure server ignoring SSL certificate verification. Set ",(0,r.kt)("inlineCode",{parentName:"p"},"strictSSL: false")," in the options argument of the ",(0,r.kt)("inlineCode",{parentName:"p"},"post")," function in ",(0,r.kt)("inlineCode",{parentName:"p"},"language-http"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"post(\n  `${state.configuration.url}/${path}`,\n  {\n    headers: { 'content-type': 'application/json' },\n    body: {\n      email: 'Luka',\n      password: 'somethingSecret',\n    },\n    strictSSL: false,\n  },\n  callback\n);\n")),(0,r.kt)("h2",{id:"anonymous-functions"},"Anonymous Functions"),(0,r.kt)("p",null,"Different to ",(0,r.kt)("a",{parentName:"p",href:"#examples-of-adaptor-specific-functions"},"Named Functions"),", Anonymous functions are generic pieces of javascript which you can write to suit your needs. Here are some examples of these custom functions:"),(0,r.kt)("h3",{id:"custom-replacer"},"Custom replacer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"field('destination__c', state => {\n  console.log(something);\n  return dataValue('path_to_data')(state).toString().replace('cats', 'dogs');\n});\n")),(0,r.kt)("p",null,'This will replace all "cats" with "dogs" in the string that lives at ',(0,r.kt)("inlineCode",{parentName:"p"},"path_to_data"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"REMARQUE :")," La fonction JavaScript ",(0,r.kt)("inlineCode",{parentName:"p"},"replace()")," ne remplace que la premi\xe8re instance de n'importe quel argument que vous sp\xe9cifiez. Si vous cherchez un moyen de remplacer toutes les occurences , nous vous sugg\xe9rons d'utiliser un regex comme dans l'",(0,r.kt)("a",{parentName:"p",href:"#custom-concatenation-of-null-values"},"exemple")," ci-dessous.")),(0,r.kt)("h3",{id:"custom-arraytostring"},"Custom arrayToString"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'field("target_specie_list__c", function(state) {\n  return Array.apply(\n    null, sourceValue("$.data.target_specie_list")(state)\n  ).join(\', \')\n}),\n')),(0,r.kt)("p",null,'It will take an array, and concatenate each item into a string with a ", " separator.'),(0,r.kt)("h3",{id:"custom-concatenation"},"Custom concatenation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"field('ODK_Key__c', function (state) {\n  return dataValue('metaId')(state).concat('(', dataValue('index')(state), ')');\n});\n")),(0,r.kt)("p",null,"This will concatenate two values."),(0,r.kt)("h3",{id:"concatenation-of-null-values"},"Concatenation of null values"),(0,r.kt)("p",null,"This will concatenate many values, even if one or more are null, writing them to a field called Main_Office_City_c."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'...\n  field("Main_Office_City__c", function(state) {\n    return arrayToString([\n      dataValue("Main_Office_City_a")(state) === null ? "" : dataValue("Main_Office_City_a")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_b")(state) === null ? "" : dataValue("Main_Office_City_b")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_c")(state) === null ? "" : dataValue("Main_Office_City_c")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_d")(state) === null ? "" : dataValue("Main_Office_City_d")(state).toString().replace(/-/g, " "),\n    ].filter(Boolean), \',\')\n  })\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Notez comment cette fonction personnalis\xe9e utilise la fonction ",(0,r.kt)("strong",{parentName:"p"},"regex")," ",(0,r.kt)("inlineCode",{parentName:"p"},"/-/g")," pour s'assurer que toutes les instances sont comptabilis\xe9es pour (g = recherche globale).")),(0,r.kt)("h3",{id:"custom-nth-reference-id"},"Custom Nth reference ID"),(0,r.kt)("p",null,"If you ever want to retrieve the FIRST object you created, or the SECOND, or the Nth, for that matter, a function like this will do the trick."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"field('parent__c', function (state) {\n  return state.references[state.references.length - 1].id;\n});\n")),(0,r.kt)("p",null,'See how instead of taking the id of the "last" thing that was created in Salesforce, you\'re taking the id of the 1st thing, or 2nd thing if you replace "length-1" with "length-2".'),(0,r.kt)("h3",{id:"convert-date-string-to-standard-iso-date-for-salesforce"},"Convert date string to standard ISO date for Salesforce"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"field('Payment_Date__c', function (state) {\n  return new Date(dataValue('payment_date')(state)).toISOString();\n});\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"REMARQUE"),": La sortie de cette fonction sera toujours format\xe9e en fonction du fuseau horaire GMT.")),(0,r.kt)("h3",{id:"use-external-id-fields-for-relationships-during-a-bulk-load-in-salesforce"},"Use external ID fields for relationships during a bulk load in Salesforce"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"array.map(item => {\n  return {\n    Patient_Name__c: item.fullName,\n    'Account.Account_External_ID__c': item.account\n    'Clinic__r.Unique_Clinic_Identifier__c': item.clinicId,\n    'RecordType.Name': item.type,\n  };\n});\n")),(0,r.kt)("h3",{id:"bulk-upsert-with-an-external-id-in-salesforce"},"Bulk upsert with an external ID in salesforce"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"bulk(\n  'Visit_new__c',\n  'upsert',\n  {\n    extIdField: 'commcare_case_id__c',\n    failOnError: true,\n    allowNoOp: true,\n  },\n  dataValue('patients')\n);\n")))}c.isMDXComponent=!0}}]);