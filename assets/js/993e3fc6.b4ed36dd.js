"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[99797],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>f});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),g=a,f=c["".concat(l,".").concat(g)]||c[g]||d[g]||o;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},25704:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(58168),a=(n(96540),n(15680));const o={title:"Initial and final state"},s=void 0,i={unversionedId:"build/steps/state",id:"build/steps/state",title:"Initial and final state",description:"Each Step requires an input state and (in most cases) will produce an output",source:"@site/docs/build/steps/state.md",sourceDirName:"build/steps",slug:"/build/steps/state",permalink:"/documentation/build/steps/state",draft:!1,editUrl:"https://github.com/openfn/docs/edit/main/docs/build/steps/state.md",tags:[],version:"current",frontMatter:{title:"Initial and final state"},sidebar:"docs",previous:{title:"Chaining operations",permalink:"/documentation/build/steps/multiple-operations"},next:{title:"The each(...) operation",permalink:"/documentation/build/steps/each"}},l={},p=[{value:"Input &amp; output state for runs",id:"input--output-state-for-runs",level:2},{value:"Webhook triggered runs",id:"webhook-triggered-runs",level:3},{value:"Cron triggered runs",id:"cron-triggered-runs",level:3},{value:"Input &amp; output state for steps",id:"input--output-state-for-steps",level:2},{value:"On success",id:"on-success",level:3},{value:"On failure",id:"on-failure",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...o}=e;return(0,a.yg)(c,(0,r.A)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Each Step requires an input state and (in most cases) will produce an output\nstate. This article explains these concepts in greater detail."),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Job State Overview",src:n(57276).A,width:"960",height:"540"})),(0,a.yg)("h2",{id:"input--output-state-for-runs"},"Input & output state for runs"),(0,a.yg)("p",null,"Depending on whether you're running Workflows locally or on the app, the input\n",(0,a.yg)("inlineCode",{parentName:"p"},"state")," for a Run can be generated differently. When creating a work order by\nhand, you must select or generate your input manually (e.g., by creating a\ncustom ",(0,a.yg)("inlineCode",{parentName:"p"},"Input")," on the app or ",(0,a.yg)("inlineCode",{parentName:"p"},"state.json")," file if working locally\n",(0,a.yg)("a",{parentName:"p",href:"/documentation/cli"},"in the CLI"),"). When a work order is\nautomatically created via a webhook trigger or cron trigger, state will be\ncreated as described below."),(0,a.yg)("p",null,"The final state of a Run is determined by what's returned from the last\noperation. Remember that job expressions are a series of ",(0,a.yg)("inlineCode",{parentName:"p"},"operations"),"\u2014they each\ntake ",(0,a.yg)("inlineCode",{parentName:"p"},"state")," and return ",(0,a.yg)("inlineCode",{parentName:"p"},"state"),", after creating any number of side effects. You\ncan control what is returned at the end of all of these operations."),(0,a.yg)("h3",{id:"webhook-triggered-runs"},"Webhook triggered runs"),(0,a.yg)("p",null,"Initial state contains important parts of the inbound ",(0,a.yg)("strong",{parentName:"p"},"http request"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"{\n  data: httpRequest.body,\n  request: { headers: httpRequest.headers },\n  configuration: credential.body\n}\n")),(0,a.yg)("h3",{id:"cron-triggered-runs"},"Cron triggered runs"),(0,a.yg)("p",null,"Initiate state is either an empty object ",(0,a.yg)("inlineCode",{parentName:"p"},"{}")," or the final state of the ",(0,a.yg)("strong",{parentName:"p"},"last\nsuccesful run")," for this workflow."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},"{\n  ...finalStateOfLastSuccessfulRun,\n  configuration: credential.body\n}\n")),(0,a.yg)("h2",{id:"input--output-state-for-steps"},"Input & output state for steps"),(0,a.yg)("p",null,"State is also passed between each step in a workflow. The output state of the\nprevious step is used as the input state for the next step."),(0,a.yg)("h3",{id:"on-success"},"On success"),(0,a.yg)("p",null,"When a job succeeds, its output state will be whatever is returned by the last\noperation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'{\n  data: "blah",\n  references: [1, 2, 3]\n}\n')),(0,a.yg)("h3",{id:"on-failure"},"On failure"),(0,a.yg)("p",null,"When a step in a workflow fails, the error will be added to an ",(0,a.yg)("inlineCode",{parentName:"p"},"errors")," object\non state, keyed by the ID of the job that failed."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-js"},'{\n  data: "blah",\n  references: [1, 2, 3],\n  errors: { jobId: error }\n}\n')),(0,a.yg)("p",null,"See the below diagram for a visual description of how state might be passed\nbetween Steps in a Workflow."),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Passing State",src:n(19410).A,width:"960",height:"540"})))}d.isMDXComponent=!0},19410:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/passing-state-steps-17bc7cfe23cd67dd8cf13db396f77c9b.png"},57276:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/state-javascript-3f1f25457b3d41d55ff5192953265f65.png"}}]);