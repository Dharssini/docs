"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[311],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return c}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(t),c=o,h=m["".concat(p,".").concat(c)]||m[c]||u[c]||r;return t?a.createElement(h,i(i({ref:n},d),{},{components:t})):a.createElement(h,i({ref:n},d))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},71262:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return d},default:function(){return m}});var a=t(83117),o=t(80102),r=(t(67294),t(3905)),i=["components"],l={title:"Adaptors"},p=void 0,s={unversionedId:"build/adaptors",id:"build/adaptors",title:"Adaptors",description:"An adaptor is an open-source Javascript module that provides OpenFn core users",source:"@site/docs/build/adaptors.md",sourceDirName:"build",slug:"/build/adaptors",permalink:"/documentation/build/adaptors",editUrl:"https://github.com/openfn/docs/edit/main/docs/build/adaptors.md",tags:[],version:"current",frontMatter:{title:"Adaptors"},sidebar:"docs",previous:{title:"Devtools",permalink:"/documentation/devtools/home"},next:{title:"Planning for Deployment",permalink:"/documentation/deploy/options"}},d=[{value:"Where to find them?",id:"where-to-find-them",children:[{value:"On GitHub",id:"on-github",children:[],level:3},{value:"On platform",id:"on-platform",children:[],level:3},{value:"On npm",id:"on-npm",children:[{value:"Install on platform via npm",id:"install-on-platform-via-npm",children:[],level:4}],level:3}],level:2},{value:"Developing adaptors",id:"developing-adaptors",children:[{value:"Extending an adaptor",id:"extending-an-adaptor",children:[],level:3},{value:"Developing a new adaptor",id:"developing-a-new-adaptor",children:[],level:3},{value:"Default operation",id:"default-operation",children:[],level:3},{value:"General considerations",id:"general-considerations",children:[{value:"Using <code>@openfn/language-common.http</code>",id:"using-openfnlanguage-commonhttp",children:[],level:4},{value:"Import language-common from npm",id:"import-language-common-from-npm",children:[],level:4}],level:3}],level:2},{value:"Build and tests",id:"build-and-tests",children:[{value:"Build",id:"build",children:[],level:3},{value:"Tests",id:"tests",children:[],level:3}],level:2}],u={toc:d};function m(e){var n=e.components,l=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'An adaptor is an open-source Javascript module that provides OpenFn core users\nwith a set of operations that help communicate with a specific external system.\nIn the past, we often referred to them as "language packages". And the two terms\nare sometimes used interchangeably, but the preferred way of communicating about\nadaptors is as follows:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'"What ',(0,r.kt)("em",{parentName:"li"},(0,r.kt)("strong",{parentName:"em"},"adaptor")),' is that job using?" ("That job is using\n',(0,r.kt)("inlineCode",{parentName:"li"},"language-dhis2"),'.")'),(0,r.kt)("li",{parentName:"ul"},'"The DHIS2 ',(0,r.kt)("em",{parentName:"li"},(0,r.kt)("strong",{parentName:"em"},"adaptor"))," is called ",(0,r.kt)("inlineCode",{parentName:"li"},"language-dhis2"),'."'),(0,r.kt)("li",{parentName:"ul"},"\"I don't have the right ",(0,r.kt)("em",{parentName:"li"},(0,r.kt)("strong",{parentName:"em"},"adaptor"))," for this job, let me install it by\nrunning ",(0,r.kt)("inlineCode",{parentName:"li"},"npm install @openfn/language-dhis2"),".")),(0,r.kt)("p",null,"In short, ",(0,r.kt)("em",{parentName:"p"},"most")," ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"adaptors"))," follow the naming convention\n",(0,r.kt)("inlineCode",{parentName:"p"},"@openfn/language-xyz"),", but not all do!"),(0,r.kt)("h2",{id:"where-to-find-them"},"Where to find them?"),(0,r.kt)("h3",{id:"on-github"},"On GitHub"),(0,r.kt)("p",null,"The developed adaptors can be found in GitHub under ",(0,r.kt)("inlineCode",{parentName:"p"},"https://github.com/openfn"),",\nstarting with the prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"language-xyz"),". Some examples are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-http"},"language-http")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-postgresql"},"language-postgresql")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenFn/language-primero"},"language-primero"))),(0,r.kt)("h3",{id:"on-platform"},"On platform"),(0,r.kt)("p",null,'When creating or editing a job on platform, you can choose the adaptor to run\nthe job. This way you "import" the needed operations. Simply open the dropdown\nlist of adaptors, and click on one.'),(0,r.kt)("img",{src:"/img/adaptor_choice_openfn.png",width:"300"}),(0,r.kt)("h3",{id:"on-npm"},"On npm"),(0,r.kt)("p",null,"Most of our adaptors are also available on\n",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/search?q=%40openfn"},"npmjs"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Adaptors list in npm",src:t(82362).Z})),(0,r.kt)("h4",{id:"install-on-platform-via-npm"},"Install on platform via npm"),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"platform"),", you can install adaptors that are not part of the\nrecommended adaptors picklist directly from\n",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/search?q=%40openfn"},"npm"),"."),(0,r.kt)("p",null,"To install from npm, click on the ",(0,r.kt)("em",{parentName:"p"},"cloud download icon")," next to the adaptor\nversion picklist. In the ",(0,r.kt)("strong",{parentName:"p"},"Select Unreleased Adaptor")," dialog box, enter the\n",(0,r.kt)("inlineCode",{parentName:"p"},"adaptor name"),"(e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"dhis2")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"language-dhis2"),") and the corresponding\n",(0,r.kt)("inlineCode",{parentName:"p"},"version number"),"(e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"v2.3.4"),"), as listed on\n",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/search?q=%40openfn"},"npmjs"),", for the adaptor of your\nchoice. The platform will attempt to install the selected adaptor version it can\nbe used to run the specified job."),(0,r.kt)("p",null,"Note that, after this custom installation of the adaptor, ",(0,r.kt)("inlineCode",{parentName:"p"},"platform")," will not\nadd this adaptor version to the picklist of recommended adaptors in\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.openfn.org/documentation/jobs/job-studio"},"JobStudio"),", but you are\nguaranteed that the adaptor will be available to use in any of your jobs as long\nas you specify it via the ",(0,r.kt)("strong",{parentName:"p"},"Select Unreleased Adaptor")," dialog."),(0,r.kt)("h2",{id:"developing-adaptors"},"Developing adaptors"),(0,r.kt)("p",null,"You can develop a new adaptor from scratch or extend an existing one."),(0,r.kt)("h3",{id:"extending-an-adaptor"},"Extending an adaptor"),(0,r.kt)("p",null,"Extending an adaptor equals adding one or multiple new operations. The new\noperations can be added inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/Adaptor.js")," file of the adaptor."),(0,r.kt)("img",{src:"/img/srcfolder.png",width:"400"}),(0,r.kt)("h3",{id:"developing-a-new-adaptor"},"Developing a new adaptor"),(0,r.kt)("p",null,"Developing a new adaptor can be done by cloning the template available\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenFn/adaptor"},"here")," via the ",(0,r.kt)("inlineCode",{parentName:"p"},"USE THIS TEMPLATE")," button\nover on Github."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Use this template button",src:t(73371).Z})),(0,r.kt)("h3",{id:"default-operation"},"Default operation"),(0,r.kt)("p",null,"This template contains a default ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," operation that can be customized\naccording to the objectives of the new adaptor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"export function create(path, params, callback) {\n  return state => {\n    // expand references for the data argument with state\n    // do the work\n    // return state\n  };\n}\n")),(0,r.kt)("h3",{id:"general-considerations"},"General considerations"),(0,r.kt)("h4",{id:"using-openfnlanguage-commonhttp"},"Using ",(0,r.kt)("inlineCode",{parentName:"h4"},"@openfn/language-common.http")),(0,r.kt)("p",null,"In many cases, it's useful to be able to execute regular HTTP requests inside a\nspecialized adaptor (e.g. posting the output of a Primero case fetch to an\nOpenFn inbox). Considering these types of situations, ",(0,r.kt)("inlineCode",{parentName:"p"},"language-common"),"\nimplements and exports an ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," module. To use ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," in any job executed with\na specific adaptor consider exporting it directly from ",(0,r.kt)("inlineCode",{parentName:"p"},"language-common"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"...\nexport {\n  alterState,\n  ...\n  http,\n  ...\n  sourceValue,\n} from '@openfn/language-common';\n")),(0,r.kt)("h4",{id:"import-language-common-from-npm"},"Import language-common from npm"),(0,r.kt)("p",null,"To leverage the last tested available version of our language-common adaptor,\nconsider importing the one published in ",(0,r.kt)("inlineCode",{parentName:"p"},"npm")," through ",(0,r.kt)("inlineCode",{parentName:"p"},"@openfn/language-common"),"."),(0,r.kt)("p",null,"Accordingly, your ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," should add a dependency to that version as this\n(snippet taken from ",(0,r.kt)("inlineCode",{parentName:"p"},"language-postgresql"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@openfn/language-common": "1.2.6",\n    "pg": "^8.3.2",\n    "pg-format": "^1.0.4"\n  },\n  ...rest\n}\n')),(0,r.kt)("h2",{id:"build-and-tests"},"Build and tests"),(0,r.kt)("h3",{id:"build"},"Build"),(0,r.kt)("p",null,"Building an adaptor for release is done by running the command ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run build")," from the root folder."),(0,r.kt)("h3",{id:"tests"},"Tests"),(0,r.kt)("p",null,"Tests can be written with nock under the path ",(0,r.kt)("inlineCode",{parentName:"p"},"test/index.js"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"describe('createPatient', () => {\n  before(() => {\n    nock('https://fakepatient.server.com')\n      .post('/api/patients')\n      .reply(200, (uri, requestBody) => {\n        return { ...requestBody, fullName: 'Mamadou', gender: 'M' };\n      });\n  });\n\n  it('makes a post request to the patient endpoint', async () => {\n    const state = {\n      configuration: {\n        baseUrl: 'https://fakepatient.server.com',\n        username: 'hello',\n        password: 'there',\n      },\n      data: {\n        fullName: 'Mamadou',\n        gender: 'M',\n      },\n    };\n\n    const finalState = await execute(\n      create('api/patients', {\n        name: dataValue('fullName')(state),\n        gender: dataValue('gender')(state),\n      })\n    )(state);\n\n    expect(finalState.data).to.eql({\n      fullName: 'Mamadou',\n      gender: 'M',\n    });\n  });\n});\n")),(0,r.kt)("p",null,"Run your tests with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run test"),". Tests are written to assess dummy calls on\nthe available helper functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"}," ~/devtools/adaptors/adaptor > npm run test\n\n> language-template@1.0.0 test /home/taylor/devtools/adaptors/adaptor\n> mocha --require @babel/register\n\n\n\n  execute\n    \u2713 executes each operation in sequence\n    \u2713 assigns references, data to the initialState\n\n  create\n    \u2713 makes a post request to the right endpoint\n    \u2713 throws an error for a 404\n    \u2713 handles and throws different kinds of errors\n\n  createPatient\n    \u2713 makes a post request to the patient endpoint\n\n\n  6 passing (16ms)\n\n ~/devtools/adaptors/adaptor >\n")),(0,r.kt)("p",null,"When writing tests, bear in mind as well for scenarios that could trigger\nerrors."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"describe('create', () => {\n  before(() => {\n    nock('https://fake.server.com')\n      .post('/api/noAccess')\n      .reply(404, (uri, requestBody) => {\n        return { detail: 'Not found.' };\n      });\n\n  it('throws an error for a 404', async () => {\n    const state = {\n      configuration: {\n        baseUrl: 'https://fake.server.com',\n        username: 'hello',\n        password: 'there',\n      },\n    };\n    const error = await execute(create('api/noAccess', { name: 'taylor' }))(\n      state\n    ).catch(error => {\n      return error;\n    });\n    expect(error.message).to.eql('Request failed with status code 404');\n  });\n\n});\n")))}m.isMDXComponent=!0},82362:function(e,n,t){n.Z=t.p+"assets/images/adaptor_npm-2141b2789fbf572fb682e67a828e768f.png"},73371:function(e,n,t){n.Z=t.p+"assets/images/usethistemplate-aede212d4072939e4ed47bc6b0e95e1b.png"}}]);