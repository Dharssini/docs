"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[4343],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return f}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(a),f=r,y=d["".concat(l,".").concat(f)]||d[f]||c[f]||i;return a?n.createElement(y,o(o({ref:t},p),{},{components:a})):n.createElement(y,o({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},79539:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return c}});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),o={title:"Using findValue with an array of data",sidebar_label:"\ud83d\udcdc Using findValue with an array of data",id:"async-findValue",keywords:["library","job","expression","postgresql","alterState","findValue","upsertMany","async","await"]},s=void 0,l={unversionedId:"jobs/auto/async-findValue",id:"jobs/auto/async-findValue",isDocsHomePage:!1,title:"Using findValue with an array of data",description:"\ud83d\udcdc This job is an official example from OpenFn.",source:"@site/library/jobs/auto/async-findValue.md",sourceDirName:"jobs/auto",slug:"/jobs/auto/async-findValue",permalink:"/library/jobs/auto/async-findValue",tags:[],version:"current",frontMatter:{title:"Using findValue with an array of data",sidebar_label:"\ud83d\udcdc Using findValue with an array of data",id:"async-findValue",keywords:["library","job","expression","postgresql","alterState","findValue","upsertMany","async","await"]},sidebar:"library",previous:{title:"mBrana",permalink:"/library/jobs/auto/mBrana-2021-05-11"},next:{title:"1. Create Payment in SF",permalink:"/library/jobs/auto/1-Create-Payment-in-SF-2018-09-03"}},u=[{value:"Metadata",id:"metadata",children:[]},{value:"Key Functions",id:"key-functions",children:[]},{value:"Expression",id:"expression",children:[]}],p={toc:u};function c(e){var t=e.components,a=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\ud83d\udcdc ",(0,i.kt)("em",null,"This job is an official example from OpenFn.")),(0,i.kt)("h2",{id:"metadata"},"Metadata"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Name: Using findValue with an array of data"),(0,i.kt)("li",{parentName:"ul"},"Adaptor: ",(0,i.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-postgresql"},(0,i.kt)("inlineCode",{parentName:"a"},"@openfn/language-postgresql"))),(0,i.kt)("li",{parentName:"ul"},"Adaptor Version: ",(0,i.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-postgresql"},(0,i.kt)("inlineCode",{parentName:"a"},"latest"))),(0,i.kt)("li",{parentName:"ul"},"Created date unknown"),(0,i.kt)("li",{parentName:"ul"},"Updated date unknown"),(0,i.kt)("li",{parentName:"ul"},"Score: ",(0,i.kt)("b",null,"100")," (an ",(0,i.kt)("a",{parentName:"li",href:"/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,i.kt)("h2",{id:"key-functions"},"Key Functions"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"alterState"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"findValue"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"upsertMany"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"async"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"await")),(0,i.kt)("h2",{id:"expression"},"Expression"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'alterState(async state => {\n  const dataArray =\n    state.data.body.st_grass_repeat ||\n    state.data.body["plot_forest_area/st_grass_repeat"] ||\n    [];\n  const dataGrass = [];\n  const path = state.data.body.st_grass_repeat\n    ? "st_grass_repeat"\n    : "plot_forest_area/st_grass_repeat";\n\n  for (let data of uniqueGrass) {\n    dataGrass.push({\n      WCSPROGRAMS_TaxaID: await findValue({\n        uuid: "WCSPROGRAMS_TaxaID",\n        relation: "WCSPROGRAMS_Taxa",\n        where: {\n          ScientificName: `%${state.handleValue(\n            data["st_grass_repeat/grass_species"]\n          )}%`,\n        },\n        operator: { ScientificName: "like" },\n      })(state),\n      UnknownSpeciesImage: data[`${path}/noknown`],\n      GrassPercent: data[`${path}/grass_perc`],\n      GrassHeight: data[`${path}/grass_height`],\n      AnswerId: state.data.body._id,\n    });\n  }\n  return upsertMany(\n    "WCSPROGRAMS_VegetationGrass",\n    "WCSPROGRAMS_VegetationGrassCode",\n    () => dataGrass\n  )(state);\n});\n\n')))}c.isMDXComponent=!0}}]);