"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[37274],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,f=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(f,p(p({ref:t},d),{},{components:n})):a.createElement(f,p({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,p=new Array(o);p[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,p[1]=i;for(var s=2;s<o;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},61506:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const o={title:"openmrs developer readme",id:"openmrs-readme",keywords:["adaptor","readme","openmrs"]},p="openmrs Adaptor developer README.md",i={unversionedId:"packages/openmrs-readme",id:"packages/openmrs-readme",title:"openmrs developer readme",description:"Source//github.com/OpenFn/adaptors/tree/main/packages/openmrs",source:"@site/adaptors/packages/openmrs-readme.md",sourceDirName:"packages",slug:"/packages/openmrs-readme",permalink:"/adaptors/packages/openmrs-readme",draft:!1,tags:[],version:"current",frontMatter:{title:"openmrs developer readme",id:"openmrs-readme",keywords:["adaptor","readme","openmrs"]},sidebar:"adaptors",previous:{title:"openmrs changelog",permalink:"/adaptors/packages/openmrs-changelog"},next:{title:"PostgreSQL",permalink:"/adaptors/postgresql"}},l={},s=[{value:"Documentation",id:"documentation",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Get a patient by some criteria",id:"get-a-patient-by-some-criteria",level:3},{value:"Example of searching for patients based on their <code>EMR Id</code>",id:"example-of-searching-for-patients-based-on-their-emr-id",level:4},{value:"Create an Encounter",id:"create-an-encounter",level:3},{value:"Make a request to any OpenMRS endpoint",id:"make-a-request-to-any-openmrs-endpoint",level:3},{value:"Create new patient",id:"create-new-patient",level:2},{value:"Development",id:"development",level:2}],d={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"openmrs-adaptor-developer-readmemd"},"openmrs Adaptor developer README.md"),(0,r.kt)("p",null,"Source: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenFn/adaptors/tree/main/packages/openmrs"},"https://github.com/OpenFn/adaptors/tree/main/packages/openmrs")),(0,r.kt)("h1",{id:"language-openmrs"},"Language OpenMRS"),(0,r.kt)("p",null,"Language Pack for building expressions and operations for working with the\n",(0,r.kt)("a",{parentName:"p",href:"https://wiki.openmrs.org/display/docs/API"},"OpenMRS API"),"."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://burkeware.com/openmrs-data-model/openmrs-data-model-1.11.html#"},"OpenMRS Data Model Explorer")),(0,r.kt)("h2",{id:"documentation"},"Documentation"),(0,r.kt)("h3",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"View all the required and optional properties for ",(0,r.kt)("inlineCode",{parentName:"p"},"state.configuration")," in the\nofficial\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.openfn.org/adaptors/packages/openmrs-configuration-schema/"},"configuration-schema"),"\ndefinition."),(0,r.kt)("h3",{id:"get-a-patient-by-some-criteria"},"Get a patient by some criteria"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// getPatient({ uuid: '516af9aa-0402-4e11-ad79-e394fdec0c91' });\n// getPatient({ uuid: dataValue('patientId')(state) });\ngetPatient({\n  uuid: state => state.data[0].uuid,\n});\n")),(0,r.kt)("h4",{id:"example-of-searching-for-patients-based-on-their-emr-id"},"Example of searching for patients based on their ",(0,r.kt)("inlineCode",{parentName:"h4"},"EMR Id")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"getPatients(\n  {\n    identifier: state => state.data.emrId,\n    v: 'full',\n  },\n  {\n    exactlyOne: true,\n  }\n);\n")),(0,r.kt)("h3",{id:"create-an-encounter"},"Create an Encounter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"createEncounter({\n  encounterDatetime: dataValue('visit_date'), //dynamically fill with source app data\n  patient: dataValue('uuid'),\n  encounterType: dataValue('visit_type'),\n  location: dataValue('location.uuid'),\n  encounterProviders: [\n    {\n      provider: dataValue('provider_name'),\n      encounterRole: '240b26f9-dd88-4172-823d-4a8bfeb7841f', //hardcoded value\n    },\n  ],\n});\n")),(0,r.kt)("h3",{id:"make-a-request-to-any-openmrs-endpoint"},"Make a request to any OpenMRS endpoint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"req({ method: 'GET', url: '/ws/rest/v1/concept' }, state => {\n  console.log(JSON.stringify(state, null, 2));\n  return state;\n});\n")),(0,r.kt)("h2",{id:"create-new-patient"},"Create new patient"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"patient(\n  fields(\n    field('gender', 'M'),\n    field('names', function (state) {\n      return [\n        {\n          patient_id: dataValue('form.patientId')(state),\n          creator: dataValue('form.user')(state),\n        },\n      ];\n    })\n  )\n);\n")),(0,r.kt)("h2",{id:"development"},"Development"),(0,r.kt)("p",null,"Clone the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenFn/adaptors"},"adaptors monorepo"),". Follow the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Getting Started")," guide inside to get set up."),(0,r.kt)("p",null,"Run tests using ",(0,r.kt)("inlineCode",{parentName:"p"},"pnpm run test")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"pnpm run test:watch")),(0,r.kt)("p",null,"Build the project using ",(0,r.kt)("inlineCode",{parentName:"p"},"pnpm build"),"."),(0,r.kt)("p",null,"To just build the docs run ",(0,r.kt)("inlineCode",{parentName:"p"},"pnpm build docs")))}c.isMDXComponent=!0}}]);