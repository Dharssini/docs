(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{186:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return b}));var r=t(3),i=t(8),o=(t(0),t(259)),a={title:"Microservice"},c={unversionedId:"microservice/home",id:"microservice/home",isDocsHomePage:!1,title:"Microservice",description:"Intent",source:"@site/docs/microservice/home.md",slug:"/microservice/home",permalink:"/documentation/microservice/home",editUrl:"https://github.com/openfn/docs/edit/main/docs/microservice/home.md",version:"current",sidebar:"docs",previous:{title:"Platform",permalink:"/documentation/deploy/platform"},next:{title:"Do-it-yourself Deployments",permalink:"/documentation/deploy/diy"}},p=[{value:"Intent",id:"intent",children:[]},{value:"Introduction",id:"introduction",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Docker up and running",id:"docker-up-and-running",children:[]},{value:"Development up and running guide",id:"development-up-and-running-guide",children:[{value:"Up and running inside Docker",id:"up-and-running-inside-docker",children:[]}]},{value:"Project configuration",id:"project-configuration",children:[{value:"First setup using the sample config",id:"first-setup-using-the-sample-config",children:[]},{value:"Setup from your existing OpenFn platform project",id:"setup-from-your-existing-openfn-platform-project",children:[]}]}],l={toc:p};function b(e){var n=e.components,a=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,a,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"intent"},"Intent"),Object(o.b)("p",null,"OpenFn is used by numerous health and humanitarian organizations around the\nworld to scale their programs through real-time interoperability, systems\nintegration, and workflow automation. ",Object(o.b)("strong",{parentName:"p"},"OpenFn/microservice")," makes use of\nOpenFn's open-core technology\u2014namely ",Object(o.b)("strong",{parentName:"p"},"OpenFn/core"),", ",Object(o.b)("strong",{parentName:"p"},"OpenFn/engine"),", and the\nvarious OpenFn ",Object(o.b)("strong",{parentName:"p"},"adaptors"),"\u2014to create standalone microservices which can be\ndeployed on any hardware."),Object(o.b)("p",null,"This microservice approach helps to ensure that governments and NGOs are never\nlocked-in to OpenFn's SaaS offering, and can port their existing jobs, triggers,\nand credentials from ",Object(o.b)("a",{parentName:"p",href:"https://www.openfn.org"},"OpenFn.org")," to their own infrastructure\neasily."),Object(o.b)("h2",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"Similar to ",Object(o.b)("inlineCode",{parentName:"p"},"platform"),", OpenFn/microservice runs on ",Object(o.b)("inlineCode",{parentName:"p"},"project.yaml")," files. This\nmeans that when organizations or governments have an open-source license\nrequirement, all their jobs, credentials, and project configurations can be\nexported from OpenFn's iPaaS and used to create a microservice deployment."),Object(o.b)("p",null,"While this approach doesn't provide the OpenFn platform front-end with its\nvarious project management and configuration features, it's perfect for groups\nwith DevOps experience and 100% compatible with the platform. You can even build\nand test entire projects on ",Object(o.b)("inlineCode",{parentName:"p"},"platform")," and then export the ",Object(o.b)("inlineCode",{parentName:"p"},"project.yaml")," file\nto run on your own servers using ",Object(o.b)("inlineCode",{parentName:"p"},"microservice"),"."),Object(o.b)("p",null,"This microservice approach provides flexibility to governments and NGOs, so they\nare never locked-in to OpenFn's SaaS platform offering. At any time, an\norganization can port their existing jobs, triggers, and credentials from\nOpenFn.org to run with our FOSS integration toolkit, using their own\ninfrastructure."),Object(o.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(o.b)("p",null,"Familiarity with other elements of OpenFn's open source integration toolkit is\nhelpful when considering the microservice approach."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://docs.openfn.org/"},"OpenFn/docs")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://github.com/openfn/engine"},"OpenFn/engine")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://github.com/openFn/core"},"OpenFn/core")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://openfn.github.io/devtools/"},"OpenFn/devtools"))),Object(o.b)("h2",{id:"docker-up-and-running"},"Docker up and running"),Object(o.b)("p",null,"Assuming you've got an ",Object(o.b)("inlineCode",{parentName:"p"},".env")," and a sample project at ",Object(o.b)("inlineCode",{parentName:"p"},"./sample-project"),"\ndirectory with a ",Object(o.b)("inlineCode",{parentName:"p"},"project.yaml")," spec:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},"docker-compose up\n")),Object(o.b)("p",null,"You can configure either the compose file or the .env, or run the container\nusing ",Object(o.b)("inlineCode",{parentName:"p"},"docker run"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},"docker run -v <path-to-your-project-folder>:/home/microservice/<path-to-your-project-folder> \\\n  --env-file <path-to-your-env-file> \\\n  --network host \\\n  openfn/microservice:v0.3.2\n")),Object(o.b)("h2",{id:"development-up-and-running-guide"},"Development up and running guide"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Clone this repo with ",Object(o.b)("inlineCode",{parentName:"li"},"git clone git@github.com:OpenFn/microservice.git")),Object(o.b)("li",{parentName:"ul"},"Enter the directory with ",Object(o.b)("inlineCode",{parentName:"li"},"cd microservice")),Object(o.b)("li",{parentName:"ul"},"Install dependencies with ",Object(o.b)("inlineCode",{parentName:"li"},"mix setup")),Object(o.b)("li",{parentName:"ul"},"Run the tests with ",Object(o.b)("inlineCode",{parentName:"li"},"mix test")),Object(o.b)("li",{parentName:"ul"},"Make a project directory to hold your project artifacts with\n",Object(o.b)("inlineCode",{parentName:"li"},"mkdir sample-project")),Object(o.b)("li",{parentName:"ul"},"Create a new project specification with\n",Object(o.b)("inlineCode",{parentName:"li"},"cp project.yaml.example ./sample-project/project.yaml")),Object(o.b)("li",{parentName:"ul"},"Create a ",Object(o.b)("inlineCode",{parentName:"li"},".env")," file with ",Object(o.b)("inlineCode",{parentName:"li"},"cp .env.example .env")),Object(o.b)("li",{parentName:"ul"},"Install necessary adaptors via\n",Object(o.b)("inlineCode",{parentName:"li"},"npm install @openfn/language-http --prefix priv/openfn/runtime/node_modules --no-save --no-package-lock --global-style")),Object(o.b)("li",{parentName:"ul"},"Start your microservice server with\n",Object(o.b)("inlineCode",{parentName:"li"},'env $(cat .env | grep -v "#" | xargs ) iex -S mix phx.server'))),Object(o.b)("h3",{id:"up-and-running-inside-docker"},"Up and running inside Docker"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Build a docker image with ",Object(o.b)("inlineCode",{parentName:"li"},"docker build -t openfn/microservice:v0.3.0 .")),Object(o.b)("li",{parentName:"ul"},"Run with the ",Object(o.b)("a",{parentName:"li",href:"#Docker-run"},"docker run command"))),Object(o.b)("h2",{id:"project-configuration"},"Project configuration"),Object(o.b)("p",null,"You can configure the jobs, triggers, credentials and language packs used in\nyour microservice in the ",Object(o.b)("inlineCode",{parentName:"p"},"project.yaml")," config file."),Object(o.b)("h3",{id:"first-setup-using-the-sample-config"},"First setup using the sample config"),Object(o.b)("p",null,"The\n",Object(o.b)("a",{parentName:"p",href:"https://github.com/OpenFn/microservice/blob/main/project.yaml.example"},"sample project configuration file"),"\ndescribes an example project setup to help you get acquainted with this\nstructure."),Object(o.b)("p",null,"By default microservice is configured with 4 sample jobs:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"job-1")," is triggered when a matching message arrives to the inbox (see\n",Object(o.b)("inlineCode",{parentName:"li"},"trigger-1"),")."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"recurring-job")," is a timed job scheduled to run every minute and is linked to\nthe ",Object(o.b)("inlineCode",{parentName:"li"},"every-minute")," cron trigger."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"flow-job")," and ",Object(o.b)("inlineCode",{parentName:"li"},"catch-job")," run after the ",Object(o.b)("inlineCode",{parentName:"li"},"success")," and ",Object(o.b)("inlineCode",{parentName:"li"},"failure")," of job-1,\nrespectively.")),Object(o.b)("p",null,"All of the jobs are configured with the language pack ",Object(o.b)("inlineCode",{parentName:"p"},"openfn/language-common"),"."),Object(o.b)("p",null,"In the default sample configuration a new message posted to\n",Object(o.b)("inlineCode",{parentName:"p"},"localhost:4000/inbox")," that matches ",Object(o.b)("inlineCode",{parentName:"p"},"trigger-1")," (i.e. the message contains\n",Object(o.b)("inlineCode",{parentName:"p"},'"number":2'),") is greeted with an asynchronous acknowledgement receipt\n(",Object(o.b)("inlineCode",{parentName:"p"},"HTTP 202")," ",Object(o.b)("inlineCode",{parentName:"p"},"Data accepted and processing has begun"),") and will trigger ",Object(o.b)("inlineCode",{parentName:"p"},"job-1"),"\nto run."),Object(o.b)("p",null,"You can try this out with the following snippet:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},'curl -X POST -H "Content-Type: application/json" \\\n -d \'{\n  "number":2,\n  "surveyId": 37479\n}\' \\\n http://localhost:4000/inbox\n')),Object(o.b)("p",null,"Posting a message not matching any of the triggers (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"\u201cnumber\u201d:3"),") equally\nprompts an acknowledgement but doesn\u2019t trigger any jobs."),Object(o.b)("p",null,"Example message post for this non-match scenario:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},'curl -X POST -H "Content-Type: application/json" \\\n -d \'{\n  "number":3,\n  "surveyId": 37479\n}\' \\\n http://localhost:4000/inbox\n')),Object(o.b)("p",null,"HTTP ",Object(o.b)("inlineCode",{parentName:"p"},"post")," requests made to\n",Object(o.b)("a",{parentName:"p",href:"http://localhost:4000/inbox"},Object(o.b)("inlineCode",{parentName:"a"},"localhost:4000/inbox"))," will be processed by the\n",Object(o.b)("inlineCode",{parentName:"p"},"Receiver"),", according to the ",Object(o.b)("inlineCode",{parentName:"p"},"credential"),", ",Object(o.b)("inlineCode",{parentName:"p"},"expression"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"adaptor")," defined\nin the project configuration ",Object(o.b)("inlineCode",{parentName:"p"},"YAML")," file."),Object(o.b)("p",null,"Time-based jobs will be run by ",Object(o.b)("inlineCode",{parentName:"p"},"Engine")," according to the ",Object(o.b)("inlineCode",{parentName:"p"},"credential"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"expression"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"adaptor")," defined in your ",Object(o.b)("inlineCode",{parentName:"p"},"project.yaml")," file."),Object(o.b)("h3",{id:"setup-from-your-existing-openfn-platform-project"},"Setup from your existing OpenFn platform project"),Object(o.b)("p",null,"If you have a project configured on OpenFn, you have two ways for exporting your\nconfig on the Project Settings page and running your project in microservice."),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"If you export as ",Object(o.b)("inlineCode",{parentName:"p"},"project.yaml"),", you can download your settings in ",Object(o.b)("inlineCode",{parentName:"p"},"yaml"),"\nformat from your platform project Download page or from a link in the\nauto-generated email sent to your address. You can plug this file into your\nenvironment as set up using the\n",Object(o.b)("a",{parentName:"p",href:"#Development-up-and-running-guide"},"Development Up and Running Guide"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"If you export as ",Object(o.b)("inlineCode",{parentName:"p"},"microservice.zip"),", you'll get your microservice folder\nready to run with ",Object(o.b)("inlineCode",{parentName:"p"},"docker"),", containing"))),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"a ",Object(o.b)("inlineCode",{parentName:"li"},"docker-compose.yaml")," config file"),Object(o.b)("li",{parentName:"ul"},"a project folder containing ",Object(o.b)("inlineCode",{parentName:"li"},"project.yaml")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},".env")," file with the default environment variables for docker"),Object(o.b)("li",{parentName:"ul"},"a ",Object(o.b)("inlineCode",{parentName:"li"},"Readme")," file")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"cd")," into the folder and run the project with ",Object(o.b)("inlineCode",{parentName:"p"},"docker-compose up"),". If you don't\nhave the docker image, it will be auto-pulled from ",Object(o.b)("inlineCode",{parentName:"p"},"hub.docker.com"),"."),Object(o.b)("p",null,Object(o.b)("img",{alt:"Export Microservice Zip",src:t(431).default})))}b.isMDXComponent=!0},259:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return d}));var r=t(0),i=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=i.a.createContext({}),b=function(e){var n=i.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=b(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},m=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=b(t),m=r,d=s["".concat(a,".").concat(m)]||s[m]||u[m]||o;return t?i.a.createElement(d,c(c({ref:n},l),{},{components:t})):i.a.createElement(d,c({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=m;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var l=2;l<o;l++)a[l]=t[l];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},431:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/microservice_zip_export-9ae611d479650754fcb804c827f42f5c.gif"}}]);