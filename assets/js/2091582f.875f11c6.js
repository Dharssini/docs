"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[74089],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},82394:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"What's an operation?"},i=void 0,s={unversionedId:"jobs/operations",id:"jobs/operations",title:"What's an operation?",description:"An Operation is a function which returns a function which takes state and",source:"@site/docs/jobs/operations.md",sourceDirName:"jobs",slug:"/jobs/operations",permalink:"/documentation/next/jobs/operations",draft:!1,editUrl:"https://github.com/openfn/docs/edit/main/docs/jobs/operations.md",tags:[],version:"current",frontMatter:{title:"What's an operation?"},sidebar:"docs",previous:{title:"A closer look at jobs",permalink:"/documentation/next/jobs/understanding"},next:{title:"Using multiple operations",permalink:"/documentation/next/jobs/multiple-operations"}},p={},l=[],c={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"An Operation is a function which returns a function which takes ",(0,a.kt)("inlineCode",{parentName:"p"},"state")," and\nreturns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"state"),"."),(0,a.kt)("p",null,"The purpose of an Operation is to act as an unresolved unit of behaviour."),(0,a.kt)("p",null,"For example, when creating an expression - the code itself doesn't know what the\nstate is going to be, only what ",(0,a.kt)("em",{parentName:"p"},"it's going to do"),"."),(0,a.kt)("p",null,"Language packs all follow this convention, where the functions that are provided\nall return Operations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"create('My_Custom_Object__c', {\n  Custom_Field__c: dataValue('foo'),\n});\n")),(0,a.kt)("p",null,"In the snippet above, the ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," function doesn't know anything about\ncredentials, or any dynamic data that you may be available at runtime."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"function create(objectName, data) {\n  return function (state) {\n    // expand the data argument using state\n    // actually do the work\n  };\n}\n")),(0,a.kt)("p",null,"In this snippet is a simple example of what most functions in OpenFn look like.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," function returns a function that takes state, this is an\n",(0,a.kt)("inlineCode",{parentName:"p"},"Operation"),". The runtime using ",(0,a.kt)("inlineCode",{parentName:"p"},"execute")," will call all Operations with ",(0,a.kt)("inlineCode",{parentName:"p"},"state"),"."))}d.isMDXComponent=!0}}]);