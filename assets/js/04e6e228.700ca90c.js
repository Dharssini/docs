"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[4157],{3905:function(n,e,a){a.d(e,{Zo:function(){return d},kt:function(){return c}});var t=a(67294);function r(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function o(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,t)}return a}function i(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function s(n,e){if(null==n)return{};var a,t,r=function(n,e){if(null==n)return{};var a,t,r={},o=Object.keys(n);for(t=0;t<o.length;t++)a=o[t],e.indexOf(a)>=0||(r[a]=n[a]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)a=o[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(r[a]=n[a])}return r}var l=t.createContext({}),_=function(n){var e=t.useContext(l),a=e;return n&&(a="function"==typeof n?n(e):i(i({},e),n)),a},d=function(n){var e=_(n.components);return t.createElement(l.Provider,{value:e},n.children)},f={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},u=t.forwardRef((function(n,e){var a=n.components,r=n.mdxType,o=n.originalType,l=n.parentName,d=s(n,["components","mdxType","originalType","parentName"]),u=_(a),c=r,m=u["".concat(l,".").concat(c)]||u[c]||f[c]||o;return a?t.createElement(m,i(i({ref:e},d),{},{components:a})):t.createElement(m,i({ref:e},d))}));function c(n,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:r,i[1]=s;for(var _=2;_<o;_++)i[_]=a[_];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},22722:function(n,e,a){a.r(e),a.d(e,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return _},toc:function(){return d},default:function(){return u}});var t=a(83117),r=a(80102),o=(a(67294),a(3905)),i=["components"],s={title:"TEST] 513 Enroll Person",sidebar_label:"TEST] 513 Enroll Person",id:"TEST-513-Enroll-Person-2022-01-17",keywords:["library","job","expression","salesforce","alterState","dataValue","field","fields","join","map","relationship","upsert"]},l=void 0,_={unversionedId:"jobs/auto/TEST-513-Enroll-Person-2022-01-17",id:"jobs/auto/TEST-513-Enroll-Person-2022-01-17",title:"TEST] 513 Enroll Person",description:"This job was provided by an OpenFn.org user via the job library API.",source:"@site/library/jobs/auto/TEST-513-Enroll-Person-2022-01-17.md",sourceDirName:"jobs/auto",slug:"/jobs/auto/TEST-513-Enroll-Person-2022-01-17",permalink:"/library/jobs/auto/TEST-513-Enroll-Person-2022-01-17",tags:[],version:"current",frontMatter:{title:"TEST] 513 Enroll Person",sidebar_label:"TEST] 513 Enroll Person",id:"TEST-513-Enroll-Person-2022-01-17",keywords:["library","job","expression","salesforce","alterState","dataValue","field","fields","join","map","relationship","upsert"]},sidebar:"library",previous:{title:"Risk and Vulnerability Assessment",permalink:"/library/jobs/auto/Risk-and-Vulnerability-Assessment-2021-05-27"},next:{title:"TEST] 513_Enroll_Household_in_SF",permalink:"/library/jobs/auto/TEST-513_Enroll_Household_in_SF-2021-09-27"}},d=[{value:"Metadata",id:"metadata",children:[],level:2},{value:"Key Functions",id:"key-functions",children:[],level:2},{value:"Expression",id:"expression",children:[],level:2}],f={toc:d};function u(n){var e=n.components,a=(0,r.Z)(n,i);return(0,o.kt)("wrapper",(0,t.Z)({},f,a,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("em",null,"This job was provided by an OpenFn.org user via the job library API."),(0,o.kt)("h2",{id:"metadata"},"Metadata"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Name: TEST] 513 Enroll Person"),(0,o.kt)("li",{parentName:"ul"},"Adaptor: ",(0,o.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-salesforce"},(0,o.kt)("inlineCode",{parentName:"a"},"@openfn/language-salesforce"))),(0,o.kt)("li",{parentName:"ul"},"Adaptor Version: ",(0,o.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-salesforce/releases/tag/v1.3.2"},(0,o.kt)("inlineCode",{parentName:"a"},"v1.3.2"))),(0,o.kt)("li",{parentName:"ul"},"Created about 1 month ago"),(0,o.kt)("li",{parentName:"ul"},"Updated about 1 month ago"),(0,o.kt)("li",{parentName:"ul"},"Score: ",(0,o.kt)("b",null,"0")," (an ",(0,o.kt)("a",{parentName:"li",href:"/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,o.kt)("h2",{id:"key-functions"},"Key Functions"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"alterState"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"dataValue"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"field"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"fields"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"join"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"map"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"relationship"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"upsert")),(0,o.kt)("h2",{id:"expression"},"Expression"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// ** MOH513 Enroll Person form ** -> Upserting person record based on CommCare ID\n\n// Provide a function which checks if dates are empty strings\nalterState(state => {\n  const truthyValue = value => value || null;\n  return { ...state, truthyValue };\n});\n\nalterState(state => {\n  if (\n    dataValue('form.Source')(state) == 1\n  ) {\n    console.log('case id', dataValue('form.subcase_0.case.@case_id')(state));\n    console.log('case id', dataValue('form.case.@case_id')(state));\n    return upsert(\n      'Person__c',\n      'CommCare_ID__c',\n      fields(\n        field('CommCare_Username__c', dataValue('metadata.username')),\n        field('CommCare_ID__c', dataValue('form.subcase_0.case.@case_id')),\n        relationship(\n          'Household__r',\n          'CommCare_Code__c',\n          dataValue('form.case.@case_id')\n        ),\n        relationship('Catchment__r', 'Name', state => {\n          var catchment = dataValue('form.catchment')(state);\n          return catchment === '' || catchment === undefined\n            ? 'Unknown Location'\n            : catchment;\n        }), // check\n        // field('Area__c', state => {\n        //   var area = dataValue('form.area')(state);\n        //   return area === '' || area === undefined ? 'a002400000k6IKi' : area;\n        // }),\n        field('Household_Village__c', dataValue('form.village')),\n        //field('Household_CHW__c', dataValue('form.CHW_ID')),\n        field('Name', state => {\n          var status = dataValue('form.Person.Basic_Information.Child_Status')(\n            state\n          );\n          var name1 = dataValue('form.Person.Basic_Information.Person_Name')(\n            state\n          );\n\n          var name2 =\n            name1 === undefined\n              ? 'No Name'\n              : name1.replace(/\\w\\S*/g, function (txt) {\n                  return (\n                    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n                  );\n                });\n          return status !== 'Unborn' ? name2 : 'Unborn Child';\n        }),\n        relationship('RecordType', 'Name', state => {\n          var rt = dataValue('form.Person.Basic_Information.Record_Type')(\n            state\n          );\n          var status = dataValue('form.Person.Basic_Information.Child_Status')(\n            state\n          );\n          return rt === 'Unborn' || (status && status === 'Unborn')\n            ? 'Child'\n            : rt.toString().replace(/_/g, ' '); //convert Unborn children to Child RT\n        }),\n        field('Client_Status__c', 'Active'),\n        field('Relation_to_the_head_of_the_household__c', state => {\n          var relation = dataValue(\n            'form.Person.Basic_Information.relation_to_hh'\n          )(state)\n            .toString()\n            .replace(/_/g, ' ');\n          var toTitleCase =\n            relation.charAt(0).toUpperCase() + relation.slice(1);\n          return toTitleCase;\n        }),\n        field('Child_Status__c', state => {\n          var dob = dataValue('form.Person.Basic_Information.DOB')(state);\n          var status = dataValue('form.Person.Basic_Information.Child_Status')(\n            state\n          );\n          return dob !== undefined || status == 'Born' ? 'Born' : 'Unborn'; //what about deceased?\n        }),\n        field('Date_of_Birth__c', state =>\n          state.truthyValue(\n            dataValue('form.Person.Basic_Information.DOB')(state)\n          )\n        ),\n        field('Gender__c', dataValue('form.Person.Basic_Information.Gender')),\n        field(\n          'Birth_Certificate__c',\n          dataValue('form.Person.Basic_Information.birth_certificate')\n        ),\n        field(\n          'Currently_enrolled_in_school__c',\n          dataValue('form.Person.Basic_Information.enrolled_in_school')\n        ),\n        field('Education_Level__c', state => {\n          var level = dataValue(\n            'form.Person.Basic_Information.Education_Level'\n          )(state);\n          return level !== undefined\n            ? level.toString().replace(/_/g, ' ')\n            : null;\n        }),\n        field(\n          'Telephone__c',\n          dataValue(\n            'form.Person.Basic_Information.Contact_Info.contact_phone_number_short'\n          )\n        ),\n        field(\n          'Family_Planning__c',\n          dataValue(\n            'form.Person.Basic_Information.family_planning.Currently_on_family_planning'\n          )\n        ),\n        field(\n          'Family_Planning_Method__c',\n          dataValue(\n            'form.Person.Basic_Information.family_planning.Family_Planning_Method'\n          )\n        ),\n        field(\n          'Use_mosquito_net__c',\n          dataValue('form.Person.Basic_Information.person_info.sleep_under_net')\n        ),\n        field('Chronic_illness__c', state => {\n          var chronic = dataValue(\n            'form.Person.Basic_Information.person_info.chronic_illness'\n          )(state);\n          if (chronic !== undefined) {\n            chronic = chronic\n              .toLowerCase()\n              .split(' ')\n              .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n              .join(';');\n            return chronic.toString().replace(/_/g, ' ');\n          } else {\n            chronic == null;\n          }\n          return chronic;\n        }),\n        field(\n          'Two_weeks_or_more_cough__c',\n          dataValue('form.Person.Basic_Information.person_info.cough_for_2wks')\n        ),\n        field(\n          'Knowledge_of_HIV_Status__c',\n          dataValue(\n            'form.Person.Basic_Information.person_info.known_hiv_status'\n          )\n        ),\n        field(\n          'HIV_Status__c',\n          dataValue('form.Person.Basic_Information.person_info.hiv_status')\n        ),\n        field('Disability__c', state => {\n          var disability = dataValue(\n            'form.Person.Basic_Information.person_info.disability'\n          )(state);\n          var toTitleCase =\n            disability !== undefined\n              ? disability\n                  .toLowerCase()\n                  .split(' ')\n                  .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n                  .join(';')\n              : null;\n          return toTitleCase;\n        }),\n        field('Other_disability__c', state => {\n          var disability = dataValue(\n            'form.Person.Basic_Information.person_info.other_disability'\n          )(state);\n          var toTitleCase =\n            disability !== undefined\n              ? disability\n                  .toLowerCase()\n                  .split(' ')\n                  .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n                  .join(';')\n              : null;\n          return toTitleCase;\n        }),\n        field('Active_TT5_Mother__c', state => {\n          var preg = dataValue('form.Person.TT5.Mother_Information.Pregnant')(\n            state\n          );\n          return preg == 'Yes' ? 'Yes' : null;\n        }),\n        field('TT5_Mother_Registrant__c', state => {\n          var preg = dataValue('form.Person.TT5.Mother_Information.Pregnant')(\n            state\n          );\n          return preg == 'Yes' ? 'Yes' : null;\n        }),\n        field('Active_in_Thrive_Thru_5__c', state => {\n          var age = dataValue('form.Person.Basic_Information.age')(state);\n          var preg = dataValue('form.Person.TT5.Mother_Information.Pregnant')(\n            state\n          );\n          return age < 5 || preg == 'Yes' ? 'Yes' : 'No';\n        }),\n        field('Active_in_HAWI__c', state => {\n          var status = dataValue(\n            'form.Person.Basic_Information.person_info.hiv_status'\n          )(state);\n          return status == 'positive' ? 'Yes' : 'No';\n        }),\n        field('Enrollment_Date__c', state => {\n          var age = dataValue('form.Person.Basic_Information.age')(state);\n          var date = dataValue('metadata.timeEnd')(state);\n          var preg = dataValue('form.Person.TT5.Mother_Information.Pregnant')(\n            state\n          );\n          return age < 5 || preg == 'Yes' ? date : null;\n        }),\n        field('HAWI_Enrollment_Date__c', state => {\n          var date = dataValue('metadata.timeEnd')(state);\n          var status = dataValue(\n            'form.Person.Basic_Information.person_info.hiv_status'\n          )(state);\n          return status == 'positive' ? date : null;\n        }),\n        field('Thrive_Thru_5_Registrant__c', state => {\n          var age = dataValue('form.Person.Basic_Information.age')(state);\n          var preg = dataValue('form.Person.TT5.Mother_Information.Pregnant')(\n            state\n          );\n          return age < 5 || preg == 'Yes' ? 'Yes' : 'No';\n        }),\n        field('HAWI_Registrant__c', state => {\n          var status = dataValue(\n            'form.Person.Basic_Information.person_info.hiv_status'\n          )(state);\n          return status == 'positive' ? 'Yes' : 'No';\n        }),\n        field(\n          'LMP__c',\n          dataValue('form.Person.TT5.Child_Information.ANCs.LMP')\n        ),\n        field('Source__c', 1),\n        field('ANC_1__c', state =>\n          state.truthyValue(\n            dataValue('form.Person.TT5.Child_Information.ANCs.ANC_1')(state)\n          )\n        ),\n        field('ANC_2__c', state =>\n          state.truthyValue(\n            dataValue('form.Person.TT5.Child_Information.ANCs.ANC_2')(state)\n          )\n        ),\n        field('ANC_3__c', state =>\n          state.truthyValue(\n            dataValue('form.Person.TT5.Child_Information.ANCs.ANC_3')(state)\n          )\n        ),\n        field('ANC_4__c', state =>\n          state.truthyValue(\n            dataValue('form.Person.TT5.Child_Information.ANCs.ANC_4')(state)\n          )\n        ),\n        field('ANC_5__c', state =>\n          state.truthyValue(\n            dataValue('form.Person.TT5.Child_Information.ANCs.ANC_5')(state)\n          )\n        ),\n        field('BCG__c', state =>\n          state.truthyValue(\n            dataValue('form.Person.TT5.Child_Information.Immunizations.BCG')(\n              state\n            )\n          )\n        ),\n        field(\n          'OPV_0__c',\n          dataValue('form.Person.TT5.Child_Information.Immunizations.OPV_0')\n        ),\n        field(\n          'OPV_1__c',\n          dataValue(\n            'form.Person.TT5.Child_Information.Immunizations.OPV_PCV_Penta_1'\n          )\n        ),\n        field(\n          'OPV_2__c',\n          dataValue(\n            'form.Person.TT5.Child_Information.Immunizations.OPV_PCV_Penta_2'\n          )\n        ),\n        field(\n          'OPV_3__c',\n          dataValue(\n            'form.Person.TT5.Child_Information.Immunizations.OPV_PCV_Penta_3'\n          )\n        ),\n        field(\n          'Measles_6__c',\n          dataValue('form.Person.TT5.Child_Information.Immunizations.Measles_6')\n        ),\n        field(\n          'Measles_9__c',\n          dataValue('form.Person.TT5.Child_Information.Immunizations.Measles_9')\n        ),\n        field(\n          'Measles_18__c',\n          dataValue(\n            'form.Person.TT5.Child_Information.Immunizations.Measles_18'\n          )\n        ),\n        field('Pregnant__c', state => {\n          var preg = dataValue('form.Person.TT5.Mother_Information.Pregnant')(\n            state\n          );\n          return preg == 'Yes' ? true : false;\n        }),\n        field(\n          'Gravida__c',\n          dataValue(\n            'form.Person.TT5.Mother_Information.Pregnancy_Information.Gravida'\n          )\n        ),\n        field(\n          'Parity__c',\n          dataValue(\n            'form.Person.TT5.Mother_Information.Pregnancy_Information.Parity'\n          )\n        ),\n        field(\n          'Unique_Patient_Code__c',\n          dataValue('form.Person.HAWI.Unique_Patient_Code')\n        ),\n        field(\n          'Active_in_Support_Group__c',\n          dataValue('form.Person.HAWI.Active_in_Support_Group')\n        ),\n        field('CommCare_HH_Code__c', dataValue('form.case.@case_id')),\n        field('Currently_on_ART_s__c', dataValue('form.Person.HAWI.ART')),\n        field('ART_Regimen__c', dataValue('form.Person.HAWI.ARVs')),\n        field(\n          'Exclusive_Breastfeeding__c',\n          dataValue(\n            'form.Person.TT5.Child_Information.Exclusive_Breastfeeding.Exclusive_Breastfeeding'\n          )\n        ),\n        field(\n          'Immediate_Breastfeeding__c',\n          dataValue('form.subcase_0.case.update.Immediate_Breastfeeding')\n        ),\n        field(\n          'Vitamin_A__c',\n          dataValue('form.Person.TT5.Child_Information.nutrition.vitamin_a')\n        ),\n        field(\n          'Food_groups_3_times_a_day__c',\n          dataValue('form.Person.TT5.Child_Information.nutrition.food_groups')\n        ),\n        field(\n          'Initial_MUAC__c',\n          dataValue('form.Person.TT5.Child_Information.nutrition.MUAC')\n        ),\n        field(\n          'MCH_booklet__c',\n          dataValue('form.Person.TT5.Mother_Information.mch_booklet')\n        ),\n        field('Preferred_Care_Facility__c', state => {\n          var facility = dataValue('form.Person.HAWI.Preferred_Care_Facility')(\n            state\n          );\n          return facility !== undefined\n            ? facility.toString().replace(/_/g, ' ')\n            : null;\n        }),\n        field('Delivery_Facility__c', state => {\n          var facility = dataValue(\n            'form.Person.TT5.Child_Information.Delivery_Information.Birth_Facility'\n          )(state);\n          return facility !== undefined\n            ? facility.toString().replace(/_/g, ' ')\n            : null;\n        }),\n        field(\n          'Delivery_Facility_Other__c',\n          dataValue(\n            'form.Person.TT5.Child_Information.Delivery_Information.Delivery_Facility_Other'\n          )\n        ),\n        field('Place_of_Delivery__c', state => {\n          var facility = dataValue(\n            'form.Person.TT5.Child_Information.Delivery_Information.Skilled_Unskilled'\n          )(state);\n          if (facility !== undefined) {\n            return facility == 'Skilled' ? 'Facility' : 'Home';\n          }\n          return facility;\n        }),\n        field(\n          'Cough_14_days_referral__c',\n          dataValue('form.Person.Basic_Information.person_info.refer_for_cough')\n        ),\n        field('Cough_14_days_referral_date__c', state =>\n          state.truthyValue(\n            dataValue(\n              'form.Person.Basic_Information.person_info.date_refer_to_clinc'\n            )(state)\n          )\n        ),\n        field(\n          'Know_HIV_status__c',\n          dataValue(\n            'form.Person.Basic_Information.person_info.known_hiv_status'\n          )\n        ),\n        field(\n          'HIV_counselling_and_testing_referral__c',\n          dataValue(\n            'form.Person.Basic_Information.person_info.hiv_counselling_testing'\n          )\n        ),\n        field('HIV_counseling_and_testing_referral_date__c', state =>\n          state.truthyValue(\n            dataValue(\n              'form.Person.Basic_Information.person_info.when_hiv_testing'\n            )(state)\n          )\n        ),\n        field(\n          'Chronic_illness_referral__c',\n          dataValue(\n            'form.Person.Basic_Information.person_info.refer_chronic_illness'\n          )\n        ),\n        field('Chronic_illness_referral_date__c', state =>\n          state.truthyValue(\n            dataValue(\n              'form.Person.Basic_Information.person_info.datereferal_chronic_illness'\n            )(state)\n          )\n        ),\n        field(\n          'Current_Height__c',\n          dataValue('form.Person.TT5.Child_Information.nutrition.height')\n        ),\n        field('Nutrition_referral_date__c', state =>\n          state.truthyValue(\n            dataValue(\n              'form.Person.TT5.Child_Information.nutrition.date_malnutrition'\n            )(state)\n          )\n        ),\n        field('Received_pregnancy_test__c', state => {\n          var preg = dataValue(\n            'form.Person.Basic_Information.family_planning.administer_preg_test'\n          )(state);\n          return preg && preg === 'OK' ? 'Yes' : preg;\n        }),\n        field(\n          'Pregnancy_test_result__c',\n          dataValue(\n            'form.Person.Basic_Information.family_planning.pregnancy_test_result'\n          )\n        ),\n        field(\n          'Pregnancy_referral__c',\n          dataValue('form.Person.Basic_Information.family_planning.refer_preg')\n        ),\n        field('Pregnancy_referral_date__c', state =>\n          state.truthyValue(\n            dataValue(\n              'form.Person.Basic_Information.family_planning.referal_pregnancy'\n            )(state)\n          )\n        ),\n        field('Family_Planning__c', state => {\n          var plan = dataValue(\n            'form.Person.Basic_Information.family_planning.Currently_on_family_planning'\n          )(state);\n          return plan ? 'Yes' : plan;\n        }),\n        field('Family_Planning_Method__c', state => {\n          var method = dataValue(\n            'form.Person.Basic_Information.family_planning.Family_Planning_Method'\n          )(state);\n          return method ? method.toString().replace(/_/g, ' ') : method;\n        }),\n        field('Reasons_for_not_taking_FP_method__c', state => {\n          var reason = dataValue(\n            'form.Person.Basic_Information.family_planning.No_FPmethod_reason'\n          )(state);\n          var reasonsMap = {\n            lack_of_access_to_fp_information:\n              'Lack of access to FP information',\n            lack_of_hospitals_or_places_where_fp_services_can_be_accessed:\n              'Lack of hospitals or places where FP services can be accessed',\n            myths_and_misconceptions: 'Myths and misconceptions',\n            barriers_at_service_delivery_points:\n              'Barriers at service delivery points',\n            pregnant: 'The client is pregnant',\n            intentions_of_getting_pregnant: 'Intentions of getting pregnant',\n            not_sexually_active: 'The client is not sexually active',\n            other_barriers_culture_male_partners_parents_etc:\n              'Other barriers (culture, male partners, parents, etc)',\n          };\n          return reason ? reasonsMap[reason] : reason;\n        }),\n        field('Reason_for_not_taking_a_pregnancy_test__c', state => {\n          var reason = dataValue(\n            'form.Person.asic_Information.family_planning.No_Preg_Test'\n          )(state);\n          return reason ? reason.toString().replace(/_/g, ' ') : reason;\n        }),\n        field('Cause_of_Death__c', state => {\n          var death = dataValue(\n            'form.Person.Basic_Information.cause_of_death_dead'\n          )(state);\n          return death ? death.toString().replace(/_/g, ' ') : death;\n        })\n      )\n    )(state);\n  }\n  console.log('form.Source does not equal 1, not upserting person record.');\n  return state;\n});\n\n// **Update HH Members Total_Number_of_Members\nalterState(state => {\n  if (\n    dataValue('form.Person.Updated_Total_Number_of_Members')(state) !== null &&\n    dataValue('form.Person.Updated_Total_Household_Members')(state) !==\n      undefined\n  ) {\n    return upsert(\n      'Household__c',\n      'CommCare_Code__c',\n      fields(\n        field('CommCare_Code__c', dataValue('form.case.@case_id')),\n        field(\n          'Total_household_people__c',\n          dataValue('Updated_Total_Number_of_Members')\n        )\n      )\n    )(state);\n  }\n\n  console.log('Members are null or undefined, not upserting household.');\n  return state;\n});\n\n// **Upserting Supervisor Visit records; checks if Visit already exists via CommCare Visit ID which = CommCare submission ID\n\nalterState(state => {\n  if (\n    dataValue('form.Source')(state) == 1 &&\n    dataValue('metadata.username')(state) !== 'test.2021'\n  ) {\n    return upsert(\n      'Visit__c',\n      'CommCare_Visit_ID__c',\n      fields(\n        field('CommCare_Visit_ID__c', dataValue('id')),\n        relationship(\n          'Household__r',\n          'CommCare_Code__c',\n          dataValue('form.case.@case_id')\n        ),\n        field('Visit_UID__c', state => {\n          var hh = dataValue('form.case.@case_id')(state);\n          var date = dataValue('form.Date')(state);\n          return hh + date;\n        }),\n        field('Name', 'CHW Visit'),\n        field('Supervisor_Visit__c', state => {\n          var visit = dataValue('form.supervisor_visit')(state);\n          return visit !== undefined\n            ? visit.toString().replace(/ /g, ';').replace(/_/g, ' ')\n            : null;\n        }),\n        field('Date__c', state =>\n          state.truthyValue(dataValue('form.Date')(state))\n        ),\n        // field('Household_CHW__c', state => {\n        //   var chw = dataValue('form.CHW_ID')(state);\n        //   return chw === 'a030800001zQrk'\n        //     ? 'a030800001zQrk5'\n        //     : chw === 'a031x000004oJe2' || chw === 'a031x000004oJe2AAE'\n        //     ? 'a0308000021zm8Z'\n        //     : chw\n        //     ? chw\n        //     : 'a0308000021zm8Z';\n        //   //otherwise return 'Unknown CHW'\n        // }),\n        field('Household_CHW__c', 'a030Q000008XyXVQA0'), //HARDCODED FOR SANDBOX TESTING --\x3e To replace with line above\n        field('Location__latitude__s', state => {\n          var lat = state.data.metadata.location;\n          return lat !== null ? lat.substring(0, lat.indexOf(' ')) : null;\n        }),\n        field('Location__longitude__s', state => {\n          var long = state.data.metadata.location;\n          return long !== null\n            ? long.substring(long.indexOf(' ') + 1, long.indexOf(' ') + 7)\n            : null;\n        })\n      )\n    )(state);\n  }\n  console.log('Data is from test user, not inserting visit');\n  return state;\n});\n")))}u.isMDXComponent=!0}}]);