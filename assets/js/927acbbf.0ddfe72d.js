(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{190:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(3),r=n(8),o=(n(0),n(277)),i=n(320),s=n.n(i),l={title:"Portability"},p={unversionedId:"portability",id:"portability",isDocsHomePage:!1,title:"Portability",description:"Intent",source:"@site/docs/portability.md",sourceDirName:".",slug:"/portability",permalink:"/documentation/portability",editUrl:"https://github.com/openfn/docs/edit/main/docs/portability.md",version:"current",frontMatter:{title:"Portability"},sidebar:"docs",previous:{title:"Planning for Deployment",permalink:"/documentation/deploy/options"},next:{title:"Platform",permalink:"/documentation/deploy/platform"}},c=[{value:"Intent",id:"intent",children:[]},{value:"Proposal v2 <code>@latest</code>",id:"proposal-v2-latest",children:[]},{value:"Other Versions",id:"other-versions",children:[]}],b={toc:c};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"intent"},"Intent"),Object(o.b)("p",null,"Beyond facilitating portability/transferability between OpenFn's\n",Object(o.b)("a",{parentName:"p",href:"deploy/platform"},"platform")," and ",Object(o.b)("a",{parentName:"p",href:"/documentation/microservice/home"},"microservice"),"\ndeployment pathways, the portability proposal (needs a better name... and...)\nseeks to establish a simple, globally-applicable way of ",Object(o.b)("strong",{parentName:"p"},"specifying workflow\nautomation")," that might be applied across workflow-engines/integration platforms\nacross the sector. Nothing about the spec ",Object(o.b)("em",{parentName:"p"},"must")," be specific to OpenFn or any\none of our individual products. We envision a future in which software built on\n",Object(o.b)("a",{parentName:"p",href:"deploy/diy"},"core"),", ",Object(o.b)("a",{parentName:"p",href:"deploy/diy"},"engine"),", and entirely new and different\nintegration/workflow tools can adopt this specification."),Object(o.b)("p",null,"It boils down to three key sets of artifacts: ",Object(o.b)("inlineCode",{parentName:"p"},"jobs"),", ",Object(o.b)("inlineCode",{parentName:"p"},"triggers"),", and\n",Object(o.b)("inlineCode",{parentName:"p"},"credentials"),". Respectively, they determine (1) what actions must be performed,\n(2) when they must be performed, and (3) what, if any, authentication they'll\nneed to perform them."),Object(o.b)("p",null,"If you're interested in contributing to the specification, reach out to OpenFn\nvia the ",Object(o.b)("a",{parentName:"p",href:"https://community.openfn.org"},"community forum"),", write to us, or suggest\nchanges by submitting a pull request here."),Object(o.b)(s.a,{url:"https://www.youtube.com/watch?v=9xXK5xoiMgA",mdxType:"ReactPlayer"}),Object(o.b)("h2",{id:"proposal-v2-latest"},"Proposal v2 ",Object(o.b)("inlineCode",{parentName:"h2"},"@latest")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  job-1:\n    expression: >\n      registerPatient({\n        patient-id: state.data.id,\n        dob: state.data.birth\n      })\n    adaptor: '@openfn/language-openmrs'\n    trigger: trigger-1\n    credential: my-secret-credential\n  recurring-job:\n    expression: >\n      alterState(state => {\n        console.log(\"Hi there!\")\n        return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: every-minute\n  flow-job:\n    expression: >\n      alterState(state => {\n        state.data.number = state.data.number * 3\n        return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: after-j1\n  catch-job:\n    expression: >\n      alterState(state => {\n        state.message = \"handled it.\"\n        return state;\n      })\n    adaptor: '@openfn/language-common'\n    trigger: j1-fails\n\ntriggers:\n  trigger-1:\n    criteria: '{\"number\":2}'\n  every-minute:\n    cron: '* * * * *'\n  after-j1:\n    success: job-1\n  j1-fails:\n    failure: job-1\n\n# Note that credential keys get copied, but values must be manually entered\n# after the export is completed.\ncredentials:\n  my-secret-credential:\n    username: '******'\n    password: '******'\n")),Object(o.b)("h2",{id:"other-versions"},"Other Versions"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"portability-versions#proposal-v3"},"Portability Proposal v3")," ",Object(o.b)("inlineCode",{parentName:"li"},"@next")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"portability-versions#proposal-v1"},"Portability Proposal v1"))))}d.isMDXComponent=!0}}]);