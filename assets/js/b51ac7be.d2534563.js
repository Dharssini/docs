"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[63329],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(n),f=r,m=u["".concat(d,".").concat(f)]||u[f]||c[f]||l;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},58627:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={title:"Handling multiple ODK repeat groups",sidebar_label:"\ud83d\udcdc Handling multiple ODK repeat groups",id:"ODK-Create-Many-Records-Moving-In-And-Out-Of-Repeat-Blocks",keywords:["library","job","expression","salesforce","create","dataPath","dataValue","each","field","fields","lastReferenceValue","merge"]},i=void 0,o={unversionedId:"jobs/auto/ODK-Create-Many-Records-Moving-In-And-Out-Of-Repeat-Blocks",id:"jobs/auto/ODK-Create-Many-Records-Moving-In-And-Out-Of-Repeat-Blocks",title:"Handling multiple ODK repeat groups",description:"\ud83d\udcdc This job is an official example from OpenFn.",source:"@site/library/jobs/auto/ODK-Create-Many-Records-Moving-In-And-Out-Of-Repeat-Blocks.md",sourceDirName:"jobs/auto",slug:"/jobs/auto/ODK-Create-Many-Records-Moving-In-And-Out-Of-Repeat-Blocks",permalink:"/library/jobs/auto/ODK-Create-Many-Records-Moving-In-And-Out-Of-Repeat-Blocks",draft:!1,tags:[],version:"current",frontMatter:{title:"Handling multiple ODK repeat groups",sidebar_label:"\ud83d\udcdc Handling multiple ODK repeat groups",id:"ODK-Create-Many-Records-Moving-In-And-Out-Of-Repeat-Blocks",keywords:["library","job","expression","salesforce","create","dataPath","dataValue","each","field","fields","lastReferenceValue","merge"]},sidebar:"library",previous:{title:"\ud83d\udcdc Create/update records if...",permalink:"/library/jobs/auto/create-if-proposal"},next:{title:"HIV Testing Event Snapshot",permalink:"/library/jobs/auto/HIV-Testing-Event-Snapshot-2021-05-03"}},d={},s=[{value:"Metadata",id:"metadata",level:2},{value:"Key Functions",id:"key-functions",level:2},{value:"Expression",id:"expression",level:2}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\ud83d\udcdc ",(0,r.kt)("em",null,"This job is an official example from OpenFn.")),(0,r.kt)("h2",{id:"metadata"},"Metadata"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Name: Handling multiple ODK repeat groups"),(0,r.kt)("li",{parentName:"ul"},"Adaptor: ",(0,r.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-salesforce"},(0,r.kt)("inlineCode",{parentName:"a"},"@openfn/language-salesforce"))),(0,r.kt)("li",{parentName:"ul"},"Adaptor Version: ",(0,r.kt)("a",{parentName:"li",href:"https://www.github.com/openfn/language-salesforce"},(0,r.kt)("inlineCode",{parentName:"a"},"latest"))),(0,r.kt)("li",{parentName:"ul"},"Created date unknown"),(0,r.kt)("li",{parentName:"ul"},"Updated date unknown"),(0,r.kt)("li",{parentName:"ul"},"Score: ",(0,r.kt)("b",null,"100")," (an ",(0,r.kt)("a",{parentName:"li",href:"/library/#library-scores"},"indicator")," of how useful this job may be)")),(0,r.kt)("h2",{id:"key-functions"},"Key Functions"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"dataPath"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"dataValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"each"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"field"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"fields"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lastReferenceValue"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"merge")),(0,r.kt)("h2",{id:"expression"},"Expression"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"/*\n  Create many records from an ODK submission, moving in and out of repeat\n  blocks, submitted by Taylor Downs @ OpenFn.\n*/\n\nbeta.each(\n  '$.data.data[*]',\n  create(\n    'ODK__c',\n    fields(\n      field('Event_Type__c', dataValue('event_type')),\n      field('Training_Type__c', dataValue('training_type')),\n      field('Event_Leader_ID__c', dataValue('leader')),\n      field('Event_Date__c', dataValue('date')),\n      field('metainstanceid__c', dataValue('*meta-instance-id*'))\n    )\n  )\n);\n\nbeta.each(\n  merge(\n    dataPath('data[*].attendee_new[*]'),\n    fields(field('parentId', lastReferenceValue('id')))\n  ),\n  create(\n    'ODK_Child_2__c',\n    fields(\n      field('ODK__c', dataValue('parentId')),\n      field('Barcode__c', dataValue('new_attendee_id')),\n      field('First_Name__c', dataValue('new_attendee_first_name')),\n      field('Last_Name__c', dataValue('new_attendee_last_name')),\n      field('Phone_Number__c', dataValue('new_attendee_phone'))\n    )\n  )\n);\n\nbeta.each(\n  merge(\n    dataPath('data[*].attendee[*]'),\n    fields(\n      field('parentId', function (state) {\n        return state.references[state.references.length - 1].id;\n      })\n      // ^^ This will get the sfID of the 1st item created.\n    )\n  ),\n  create(\n    'ODK_Child_1__c',\n    fields(\n      field('ODK__c', dataValue('parentId')),\n      field('Barcode__c', dataValue('attendee_id')),\n      field('Late__c', dataValue('late'))\n    )\n  )\n);\n\n")))}c.isMDXComponent=!0}}]);