(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{331:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},d=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(a),b=n,h=d["".concat(o,".").concat(b)]||d[b]||u[b]||i;return a?r.a.createElement(h,c(c({ref:t},p),{},{components:a})):r.a.createElement(h,c({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var p=2;p<i;p++)o[p]=a[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"},88:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(8),i=(a(0),a(331)),o={id:"each",title:"The each(...) operation"},c={unversionedId:"jobs/each",id:"jobs/each",isDocsHomePage:!1,title:"The each(...) operation",description:"The each operation allows you to perform another operation on each item in an",source:"@site/docs/jobs/each.md",sourceDirName:"jobs",slug:"/jobs/each",permalink:"/documentation/jobs/each",editUrl:"https://github.com/openfn/docs/edit/main/docs/jobs/each.md",version:"current",frontMatter:{id:"each",title:"The each(...) operation"},sidebar:"docs",previous:{title:"Initial and final state for runs",permalink:"/documentation/jobs/state"},next:{title:"The OpenFn Job Studio",permalink:"/documentation/jobs/job-studio"}},l=[{value:"Each takes two arguments",id:"each-takes-two-arguments",children:[{value:"arrayPath",id:"arraypath",children:[]},{value:"the operation",id:"the-operation",children:[]}]},{value:"dataValue(...) <em>inside</em> each(...)",id:"datavalue-inside-each",children:[]},{value:"merge(...) and bringing data &#39;down&#39; into an array:",id:"merge-and-bringing-data-down-into-an-array",children:[]},{value:"beta.each",id:"betaeach",children:[]}],p={toc:l};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"each")," operation allows you to perform another operation on each item in an\narray."),Object(i.b)("h2",{id:"each-takes-two-arguments"},"Each takes two arguments"),Object(i.b)("p",null,"In other words, ",Object(i.b)("inlineCode",{parentName:"p"},"each(arrayPath, operation)")," will ",Object(i.b)("em",{parentName:"p"},"do")," ",Object(i.b)("inlineCode",{parentName:"p"},"operation")," on each item\nit finds in the ",Object(i.b)("inlineCode",{parentName:"p"},"arrayPath")," array. It takes just two arguments:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"an arrayPath"),Object(i.b)("li",{parentName:"ol"},"an operation(...)")),Object(i.b)("h3",{id:"arraypath"},"arrayPath"),Object(i.b)("p",null,"Let's look at the first argument in ",Object(i.b)("inlineCode",{parentName:"p"},"each"),"... the path to the array. Consider\nthe following code using the Salesforce adaptor:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"each(\n  dataPath('form.participants[*]'),\n  upsert(\n    'Person__c',\n    'Participant_Identification_Number_PID__c',\n    fields(\n      field('Participant_Identification_Number_PID__c', dataValue('pid')),\n      relationship('RecordType', 'Name', 'Participant'),\n      field('First_Name__c', dataValue('participant_first_name')),\n      field('Surname__c', dataValue('participant_surname')),\n      field('Mobile_Number_1__c', dataValue('mobile_number'))\n      field('Sex__c', dataValue('gender')),\n    )\n  )\n);\n")),Object(i.b)("p",null,"This will upsert a ",Object(i.b)("inlineCode",{parentName:"p"},"Person__c")," resource in Salesforce for each item found in the\n",Object(i.b)("inlineCode",{parentName:"p"},"state.data.form.participants")," array. You could specify this path in the\nfollowing ways:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"'$.data.form.participants[*]'")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dataPath('form.participants[*]')"))),Object(i.b)("p",null,"Note the JSON path syntax."),Object(i.b)("h3",{id:"the-operation"},"the operation"),Object(i.b)("p",null,"If there are 5 participants in there, it will execute the ",Object(i.b)("inlineCode",{parentName:"p"},"upsert")," operation on\nall 5 items, in sequence. ",Object(i.b)("inlineCode",{parentName:"p"},"upsert")," takes whatever arguments it takes normally\nbut it operates ",Object(i.b)("em",{parentName:"p"},"inside")," the array. See below for more details on the ",Object(i.b)("em",{parentName:"p"},"scope")," of\nthis operation."),Object(i.b)("h2",{id:"datavalue-inside-each"},"dataValue(...) ",Object(i.b)("em",{parentName:"h2"},"inside")," each(...)"),Object(i.b)("p",null,"Note that inside the ",Object(i.b)("inlineCode",{parentName:"p"},"each(...)")," operation, using ",Object(i.b)("inlineCode",{parentName:"p"},"dataValue(path)")," will\nevaluate a path inside each item in the array."),Object(i.b)("h2",{id:"merge-and-bringing-data-down-into-an-array"},"merge(...) and bringing data 'down' into an array:"),Object(i.b)("p",null,"What if you want to access data in your ",Object(i.b)("inlineCode",{parentName:"p"},"upsert")," operation that does ",Object(i.b)("em",{parentName:"p"},"not")," exist\nin the array itself. You could use a data preparation step (see: ",Object(i.b)("inlineCode",{parentName:"p"},"alterState"),")\nor make use of ",Object(i.b)("inlineCode",{parentName:"p"},"merge(path, data)")," which allows you to merge data from the\ninitial scope down into your array and access it from the ",Object(i.b)("inlineCode",{parentName:"p"},"upsert")," operation."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"each(\n  merge(\n    dataPath('form.participants[*]'),\n    fields(\n      field('school_id', dataValue('form.school.id')),\n      field('intervention_type', dataValue('form.type'))\n    )\n  ),\n  upsert(\n    'Person__c',\n    'Participant_Identification_Number_PID__c',\n    fields(\n      field('Participant_Identification_Number_PID__c', dataValue('pid')),\n      relationship('RecordType', 'Name', 'Participant'),\n      field('First_Name__c', dataValue('participant_first_name')),\n      field('Surname__c', dataValue('participant_surname')),\n      field('Mobile_Number_1__c', dataValue('mobile_number'))\n      field('Sex__c', dataValue('gender')),\n      // new fields...\n      field('School__c', dataValue('school_id')),\n      field('Intervention_Type__c', dataValue('intervention_type'))\n    )\n  )\n);\n")),Object(i.b)("h2",{id:"betaeach"},"beta.each"),Object(i.b)("p",null,"After using an ",Object(i.b)("inlineCode",{parentName:"p"},"each(...)")," operation the scope of subsequent operations will be\ninside the array at ",Object(i.b)("inlineCode",{parentName:"p"},"arrayPath"),". If you want to return to the top-level scope so\nthat you can iterate through another array rather than continuing to work inside\nthe first array called with ",Object(i.b)("inlineCode",{parentName:"p"},"each()"),", you can use ",Object(i.b)("inlineCode",{parentName:"p"},"beta.each")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"beta.each(...)")," will scopes an array of data based on a JSONPath but then\n",Object(i.b)("strong",{parentName:"p"},"return")," to the state it was given upon completion. See the\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/OpenFn/language-common/blob/master/src/beta.js#L44"},"source"),"\nhere."),Object(i.b)("p",null,"This is necessary if you string multiple ",Object(i.b)("inlineCode",{parentName:"p"},"each(...)")," functions together in-line\nin the same expression. (E.g., given data which has multiple separate 'repeat\ngroups' in a form which are rendered as arrays, you want to create new records\nfor each item inside the first repeat group, then ",Object(i.b)("em",{parentName:"p"},"RETURN TO THE TOP LEVEL")," of\nthe data, and then create new records for each item in the second repeat group.\nUsing ",Object(i.b)("inlineCode",{parentName:"p"},"beta.each(...)")," lets you enter the first array, create your records, then\nreturn to the top level and be able to enter the second array."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"// create some schools from the state.data.form.schools array...\nbeta.each(\n  dataPath('form.schools[*]'),\n  upsert(\n    'School__c',\n    'School_ID__c',\n    fields(\n      field('School_ID__c', dataValue('schoolId')),\n      field('School_Name__c', dataValue('schoolName')),\n    )\n  )\n);\n\n// back up at the top level, we scope the next array with each...\nbeta.each(\n  dataPath('form.participants[*]'),\n  upsert(\n    'Person__c',\n    'Participant_Identification_Number_PID__c',\n    fields(\n      field('Participant_Identification_Number_PID__c', dataValue('pid')),\n      relationship('RecordType', 'Name', 'Participant'),\n      field('First_Name__c', dataValue('participant_first_name')),\n      field('Surname__c', dataValue('participant_surname')),\n      field('Mobile_Number_1__c', dataValue('mobile_number'))\n      field('Sex__c', dataValue('gender')),\n    )\n  )\n);\n")))}s.isMDXComponent=!0}}]);