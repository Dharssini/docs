"use strict";(self.webpackChunk_openfn_docs=self.webpackChunk_openfn_docs||[]).push([[53048],{95788:(e,a,n)=>{n.d(a,{Iu:()=>c,yg:()=>g});var t=n(11504);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),p=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},c=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?t.createElement(g,o(o({ref:a},c),{},{components:n})):t.createElement(g,o({ref:a},c))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},10032:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var t=n(45072),r=(n(11504),n(95788));const l={title:"Write Job expressions"},o=void 0,i={unversionedId:"build/steps/job-expressions",id:"build/steps/job-expressions",title:"Write Job expressions",description:"To define the business logic and data transformation rules or logic for",source:"@site/docs/build/steps/job-expressions.md",sourceDirName:"build/steps",slug:"/build/steps/job-expressions",permalink:"/documentation/next/build/steps/job-expressions",draft:!1,editUrl:"https://github.com/openfn/docs/edit/main/docs/build/steps/job-expressions.md",tags:[],version:"current",frontMatter:{title:"Write Job expressions"},sidebar:"docs",previous:{title:"Design your Step",permalink:"/documentation/next/build/steps/step-design-intro"},next:{title:"Operations",permalink:"/documentation/next/build/steps/operations"}},s={},p=[{value:"About Job expressions",id:"about-job-expressions",level:2},{value:"dataValue",id:"datavalue",level:3},{value:"A Job with custom JavaScript",id:"a-job-with-custom-javascript",level:3},{value:"Available JavaScript Globals",id:"available-javascript-globals",level:2},{value:"Examples of adaptor-specific functions",id:"examples-of-adaptor-specific-functions",level:2},{value:"language-common",id:"language-common",level:3},{value:"each()",id:"each",level:4},{value:"Salesforce",id:"salesforce",level:3},{value:"dhis2",id:"dhis2",level:3},{value:"OpenMRS",id:"openmrs",level:3},{value:"Snippets and samples",id:"snippets-and-samples",level:2},{value:"Anonymous Functions",id:"anonymous-functions",level:2},{value:"Custom replacer",id:"custom-replacer",level:3},{value:"Custom arrayToString",id:"custom-arraytostring",level:3},{value:"Custom concatenation",id:"custom-concatenation",level:3},{value:"Concatenation of null values",id:"concatenation-of-null-values",level:3},{value:"Custom Nth reference ID",id:"custom-nth-reference-id",level:3},{value:"Convert date string to standard ISO date for Salesforce",id:"convert-date-string-to-standard-iso-date-for-salesforce",level:3}],c={toc:p},d="wrapper";function u(e){let{components:a,...n}=e;return(0,r.yg)(d,(0,t.c)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"To define the business logic and data transformation rules or logic for\nindividual ",(0,r.yg)("inlineCode",{parentName:"p"},"Steps")," in your workflow, you will need to write a ",(0,r.yg)("inlineCode",{parentName:"p"},"Job"),". This\narticle will provide a basic overview of Job expressions & writing tips."),(0,r.yg)("h2",{id:"about-job-expressions"},"About Job expressions"),(0,r.yg)("p",null,"A ",(0,r.yg)("inlineCode",{parentName:"p"},"Job")," is evaluated as a JavaScript expression and primarily defines the\nspecific series of ",(0,r.yg)("a",{parentName:"p",href:"/documentation/next/build/steps/operations"},"Operations")," (think: tasks,\ndatabase actions, custom functions) to be performed in a specific Workflow Step."),(0,r.yg)("p",null,"In most cases, a Job is a series of ",(0,r.yg)("inlineCode",{parentName:"p"},"create")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"upsert")," operations that are\ntriggered by a webhook event (e.g., form submission forwarded from ODK mobile\ndata collection app) or cron (e.g., daily @ 12:00). See this basic example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"create(\n  'Patient__c',\n  fields(\n    field('Name', dataValue('form.surname')),\n    field('Other Names', dataValue('form.firstName')),\n    field('Age__c', dataValue('form.ageInYears')),\n    field('Is_Enrolled__c', true),\n    field('Enrollment_Status__c', 3)\n  )\n);\n")),(0,r.yg)("p",null,"This would create a new ",(0,r.yg)("inlineCode",{parentName:"p"},"Patient__c")," record in the connected app. The patient's\n",(0,r.yg)("inlineCode",{parentName:"p"},"Name"),' will be mapped from the form submission forwarded to OpenFn from the\nsource mobile data collection app via a webhook request. Then, because we assume\nthat all Patients registered in the mobile app are always considered "enrolled",\nwe hard code the patient enrollment status as true - see the mapping for\n',(0,r.yg)("inlineCode",{parentName:"p"},"Is_Enrolled__c"),"."),(0,r.yg)("p",null,"The functions see above is OpenFn's own syntax, and you've got access to dozens\nof common \"helper functions\" like ",(0,r.yg)("inlineCode",{parentName:"p"},"dataValue(path)")," and destination specific\nfunctions like ",(0,r.yg)("inlineCode",{parentName:"p"},"create(object, attributes)"),". You can choose to either write jobs\nusing this OpenFn syntax or write your own custom, anonymous functions in\nJavaScript to do whatever your heart desires. Remember that ",(0,r.yg)("strong",{parentName:"p"},"Steps are\nevaluated as JavaScript"),"."),(0,r.yg)("h3",{id:"datavalue"},"dataValue"),(0,r.yg)("p",null,'The most commonly used "helper function" is ',(0,r.yg)("inlineCode",{parentName:"p"},"dataValue(...)"),". This function\ntakes a single argument\u2014the ",(0,r.yg)("em",{parentName:"p"},"path")," to some data that you're trying to access\ninside the message that has triggered a particular run. In the above example,\nyou'll notice that ",(0,r.yg)("inlineCode",{parentName:"p"},"Is_Enrolled__c")," is ",(0,r.yg)("em",{parentName:"p"},"always")," set to ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),", but ",(0,r.yg)("inlineCode",{parentName:"p"},"Name")," will\nchange for each message that triggers the running of this step. It's set to\n",(0,r.yg)("inlineCode",{parentName:"p"},"dataValue('form.surname')")," which means it will set ",(0,r.yg)("inlineCode",{parentName:"p"},"Name")," to whatever value is\npresent at ",(0,r.yg)("inlineCode",{parentName:"p"},"state.data.form.surname")," for the triggering webhook request. It\nmight be Bob for one message, and Alice for another."),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"Note that for message-triggered steps, ",(0,r.yg)("inlineCode",{parentName:"p"},"state")," will always have it's ",(0,r.yg)("inlineCode",{parentName:"p"},"data")," key\n(i.e., ",(0,r.yg)("inlineCode",{parentName:"p"},"state.data"),") set to the body of the triggering webhook request (aka HTTP\nrequest)."),(0,r.yg)("p",{parentName:"admonition"},"I.e., ",(0,r.yg)("inlineCode",{parentName:"p"},"dataValue('some.path') === state.data.some.path"),", as evaluated at the\ntime that the operation (",(0,r.yg)("inlineCode",{parentName:"p"},"create")," in the above expression) is executed.")),(0,r.yg)("h3",{id:"a-job-with-custom-javascript"},"A Job with custom JavaScript"),(0,r.yg)("p",null,"See below for an example Job with custom JavaScript code for data\ntransformation."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"create(\n  'Patient__c',\n  fields(\n    field('Name', state => {\n      console.log('Manipulate state to get your desired output.');\n      return Array.apply(null, state.data.form.names).join(', ');\n    }),\n    field('Age__c', 7)\n  )\n);\n")),(0,r.yg)("p",null,"Here, the patient's name will be a comma separated concatenation of all the\nvalues in the ",(0,r.yg)("inlineCode",{parentName:"p"},"patient_names")," array from our source message."),(0,r.yg)("h2",{id:"available-javascript-globals"},"Available JavaScript Globals"),(0,r.yg)("p",null,"For security reasons, users start with access to the following standard\nJavaScript globals, and can request more by opening an issue on Github:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"},(0,r.yg)("inlineCode",{parentName:"a"},"Array"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://nodejs.org/api/console.html"},(0,r.yg)("inlineCode",{parentName:"a"},"console"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON"},(0,r.yg)("inlineCode",{parentName:"a"},"JSON"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"},(0,r.yg)("inlineCode",{parentName:"a"},"Number"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"},(0,r.yg)("inlineCode",{parentName:"a"},"Promise"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"},(0,r.yg)("inlineCode",{parentName:"a"},"String")))),(0,r.yg)("h2",{id:"examples-of-adaptor-specific-functions"},"Examples of adaptor-specific functions"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"N.B.: This is just a sample.")," There are lots more available in the\n",(0,r.yg)("a",{parentName:"p",href:"/adaptors/"},"Adaptors docs")," and\n",(0,r.yg)("a",{parentName:"p",href:"https://github.com/OpenFn/adaptors"},"repository"),"."),(0,r.yg)("h3",{id:"language-common"},"language-common"),(0,r.yg)("p",null,'These are available functions "common" across Adaptors. You can use any of these\nwhen writing Job expressions.'),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"field('destination_field_name__c', 'value')")," Returns a key, value pair in an\narray.\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/common/src/Adaptor.js#L364"},"(source)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"fields(list_of_fields)")," zips key value pairs into an object.\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/common/src/Adaptor.js#L377"},"(source)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"dataValue('JSON_path')")," Picks out a single value from source data.\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/common/src/Adaptor.js#L146"},"(source)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"each(JSON_path, operation(...))")," Scopes an array of data based on a JSONPath\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/common/src/Adaptor.js#L262"},"(source)"),".\nSee beta.each when using multiple each()'s in an expression."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},'each(merge(dataPath("CHILD_ARRAY[*]"),fields(field("metaId", dataValue("*meta-instance-id*")),field("parentId", lastReferenceValue("id")))), create(...))'),"\nmerges data into an array then creates for each item in the array\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/common/src/Adaptor.js#L396"},"(source)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"lastReferenceValue('id')")," gets the sfID of the last item created\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/common/src/Adaptor.js#L175"},"(source)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"fn(state){return state.references[state.references.length-N].id})")," gets the\nsfID of the nth item created")),(0,r.yg)("h4",{id:"each"},"each()"),(0,r.yg)("p",null,"For more on the ",(0,r.yg)("inlineCode",{parentName:"p"},"each(...)")," operation, see\n",(0,r.yg)("a",{parentName:"p",href:"/documentation/next/build/steps/each"},"this page")," and the below example."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"each(\n  dataPath('csvData[*]'),\n  upsertTEI(\n    'aX5hD4qUpRW', //piirs uid\n    {\n      trackedEntityType: 'bsDL4dvl2ni',\n      orgUnit: dataValue('OrgUnit'),\n      attributes: [\n        {\n          attribute: 'aX5hD4qUpRW',\n          value: dataValue('aX5hD4qUpRW'),\n        },\n        {\n          attribute: 'MxQPuS9G7hh',\n          value: dataValue('MxQPuS9G7hh'),\n        },\n      ],\n    },\n    { strict: false }\n  )\n);\n")),(0,r.yg)("h3",{id:"salesforce"},"Salesforce"),(0,r.yg)("p",null,"See below for some example functions for the Salesforce Adaptor. See the\n",(0,r.yg)("a",{parentName:"p",href:"/adaptors/"},"Adaptor")," for more."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},'create("DEST_OBJECT_NAME__C", fields(...))')," Create a new object. Takes 2\nparameters: An object and attributes.\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/salesforce/src/Adaptor.js#L466-L480"},"(source)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},'upsert("DEST_OBJECT_NAME__C", "DEST_OBJECT_EXTERNAL_ID__C", fields(...))'),"\nCreates or updates an object. Takes 3 paraneters: An object, an ID field and\nattributes.\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/salesforce/src/Adaptor.js#L539-L560"},"(source)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},'relationship("DEST_RELATIONSHIP_NAME__r", "EXTERNAL_ID_ON_RELATED_OBJECT__C", "SOURCE_DATA_OR_VALUE")'),"\nAdds a lookup or 'dome insert' to a record.\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/salesforce/src/Adaptor.js#L49-L56"},"(source)"))),(0,r.yg)("h3",{id:"dhis2"},"dhis2"),(0,r.yg)("p",null,"See below for some example functions for the DHIS2 Adaptor. See the\n",(0,r.yg)("a",{parentName:"p",href:"/adaptors/"},"Adaptor")," for more."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"create('events', {..})")," Creates an event.\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/dhis2/src/Adaptor.js#L137-L142"},"(source)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"create('dataValueSet', {..})")," Send data values using the dataValueSets\nresource\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/dhis2/src/Adaptor.js#L185-L191"},"(source)"))),(0,r.yg)("h3",{id:"openmrs"},"OpenMRS"),(0,r.yg)("p",null,"See below for some example functions for the OpenMRS Adaptor. See the\n",(0,r.yg)("a",{parentName:"p",href:"/adaptors/"},"Adaptor")," for more."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"create('person',{..})")," Takes a payload of data to create a person\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/openmrs/src/Adaptor.js#L292-L311"},"(source)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"createPatient(...)")," Takes a payload of data to create a patient\n",(0,r.yg)("a",{parentName:"li",href:"https://github.com/OpenFn/adaptors/blob/main/packages/openmrs/src/Adaptor.js#L292-L311"},"(source)"))),(0,r.yg)("h2",{id:"snippets-and-samples"},"Snippets and samples"),(0,r.yg)("p",null,"Below you can find some examples of block code for different functions and data\nhandling contexts."),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"Step expression (for commcare to SF)")),(0,r.yg)("p",null,"The following step expression will take a matching receipt and use data from\nthat receipt to upsert a ",(0,r.yg)("inlineCode",{parentName:"p"},"Patient__c")," record in Salesforce and create multiple\nnew ",(0,r.yg)("inlineCode",{parentName:"p"},"Patient_Visit__c")," (child to Patient) records."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"upsert(\n  'Patient__c',\n  'Patient_Id__c',\n  fields(\n    field('Patient_Id__c', dataValue('form.patient_ID')),\n    relationship('Nurse__r', 'Nurse_ID_code__c', dataValue('form.staff_id')),\n    field('Phone_Number__c', dataValue('form.mobile_phone'))\n  )\n),\n  each(\n    join('$.data.form.visits[*]', '$.references[0].id', 'Id'),\n    create(\n      'Visit__c',\n      fields(\n        field('Patient__c', dataValue('Id')),\n        field('Date__c', dataValue('date')),\n        field('Reason__c', dataValue('why_did_they_see_doctor'))\n      )\n    )\n  );\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,'Accessing the "data array" in Open Data Kit submissions')),(0,r.yg)("p",null,'Notice how we use "each" to get data from each item inside the "data array" in\nODK.'),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"each(\n  '$.data.data[*]',\n  create(\n    'ODK_Submission__c',\n    fields(\n      field('Site_School_ID_Number__c', dataValue('school')),\n      field('Date_Completed__c', dataValue('date')),\n      field('comments__c', dataValue('comments')),\n      field('ODK_Key__c', dataValue('*meta-instance-id*'))\n    )\n  )\n);\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"ODK to Salesforce: create parent record with many children from parent data")),(0,r.yg)("p",null,"Here, the user brings ",(0,r.yg)("inlineCode",{parentName:"p"},"time_end")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"parentId")," onto the line items from the\nparent object."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"each(\n  dataPath('data[*]'),\n  combine(\n    create(\n      'transaction__c',\n      fields(\n        field('Transaction_Date__c', dataValue('today')),\n        relationship(\n          'Person_Responsible__r',\n          'Staff_ID_Code__c',\n          dataValue('person_code')\n        ),\n        field('metainstanceid__c', dataValue('*meta-instance-id*'))\n      )\n    ),\n    each(\n      merge(\n        dataPath('line_items[*]'),\n        fields(\n          field('end', dataValue('time_end')),\n          field('parentId', lastReferenceValue('id'))\n        )\n      ),\n      create(\n        'line_item__c',\n        fields(\n          field('transaction__c', dataValue('parentId')),\n          field('Barcode__c', dataValue('product_barcode')),\n          field('ODK_Form_Completed__c', dataValue('end'))\n        )\n      )\n    )\n  )\n);\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"Salesforce: perform an update")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'update("Patient__c", fields(\n  field("Id", dataValue("pathToSalesforceId")),\n  field("Name__c", dataValue("patient.first_name")),\n  field(...)\n));\n'))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"Salesforce: Set record type using 'relationship(...)'")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"create(\n  'custom_obj__c',\n  fields(\n    relationship(\n      'RecordType',\n      'name',\n      dataValue('submission_type'),\n      field('name', dataValue('Name'))\n    )\n  )\n);\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"Salesforce: Set record type using record Type ID")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"each(\n  '$.data.data[*]',\n  create(\n    'fancy_object__c',\n    fields(\n      field('RecordTypeId', '012110000008s19'),\n      field('site_size', dataValue('size'))\n    )\n  )\n);\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"Telerivet: Send SMS based on Salesforce workflow alert")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"send(\n  fields(\n    field(\n      'to_number',\n      dataValue(\n        'Envelope.Body.notifications.Notification.sObject.phone_number__c'\n      )\n    ),\n    field('message_type', 'sms'),\n    field('route_id', ''),\n    field('content', function (state) {\n      return 'Hey there. Your name is '.concat(\n        dataValue('Envelope.Body.notifications.Notification.sObject.name__c')(\n          state\n        ),\n        '.'\n      );\n    })\n  )\n);\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"Sample DHIS2 events API step")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"event(\n  fields(\n    field('program', 'eBAyeGv0exc'),\n    field('orgUnit', 'DiszpKrYNg8'),\n    field('eventDate', dataValue('properties.date')),\n    field('status', 'COMPLETED'),\n    field('storedBy', 'admin'),\n    field('coordinate', {\n      latitude: '59.8',\n      longitude: '10.9',\n    }),\n    field('dataValues', function (state) {\n      return [\n        {\n          dataElement: 'qrur9Dvnyt5',\n          value: dataValue('properties.prop_a')(state),\n        },\n        {\n          dataElement: 'oZg33kd9taw',\n          value: dataValue('properties.prop_b')(state),\n        },\n        {\n          dataElement: 'msodh3rEMJa',\n          value: dataValue('properties.prop_c')(state),\n        },\n      ];\n    })\n  )\n);\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"merge many values into a child path")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'each(\n  merge(\n    dataPath("CHILD_ARRAY[*]"),\n    fields(\n      field("metaId", dataValue("*meta-instance-id*")),\n      field("parentId", lastReferenceValue("id"))\n    )\n  ),\n  create(...)\n)\n'))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"arrayToString")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"arrayToString(arr, separator_string);\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"access an image URL from an ODK submission")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'// In ODK the image URL is inside an image object...\nfield("Photo_URL_text__c", dataValue("image.url")),\n'))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"Use external ID fields for relationships during a bulk load in Salesforce")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"fn(state) => {\n  const patients = array.map(item => {\n    return {\n      Patient_Name__c: item.fullName,\n      'Account.Account_External_ID__c': item.account\n      'Clinic__r.Unique_Clinic_Identifier__c': item.clinicId,\n      'RecordType.Name': item.type,\n    };\n  });\n\n  return {...state, patients}\n}\n"))),(0,r.yg)("details",null,(0,r.yg)("summary",null,(0,r.yg)("b",null,"Bulk upsert with an external ID in salesforce")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"bulk(\n  'Visit_new__c',\n  'upsert',\n  {\n    extIdField: 'commcare_case_id__c',\n    failOnError: true,\n    allowNoOp: true,\n  },\n  dataValue('patients')\n);\n"))),(0,r.yg)("h2",{id:"anonymous-functions"},"Anonymous Functions"),(0,r.yg)("p",null,"Different to ",(0,r.yg)("a",{parentName:"p",href:"#examples-of-adaptor-specific-functions"},"Named Functions"),",\nAnonymous functions are generic pieces of JavaScript which you can write to suit\nyour needs. Read on for some examples of these custom functions."),(0,r.yg)("h3",{id:"custom-replacer"},"Custom replacer"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"field('destination__c', state => {\n  console.log(something);\n  return dataValue('path_to_data')(state).toString().replace('cats', 'dogs');\n});\n")),(0,r.yg)("p",null,'This will replace all "cats" with "dogs" in the string that lives at\n',(0,r.yg)("inlineCode",{parentName:"p"},"path_to_data"),"."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"NOTE:")," The JavaScript ",(0,r.yg)("inlineCode",{parentName:"p"},"replace()")," function only replaces the first instance\nof whatever argument you specify. If you're looking for a way to replace all\ninstances, we suggest you use a regex like we did in the\n",(0,r.yg)("a",{parentName:"p",href:"#custom-concatenation-of-null-values"},"example")," below.")),(0,r.yg)("h3",{id:"custom-arraytostring"},"Custom arrayToString"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'field("target_specie_list__c", function(state) {\n  return Array.apply(\n    null, sourceValue("$.data.target_specie_list")(state)\n  ).join(\', \')\n}),\n')),(0,r.yg)("p",null,'It will take an array, and concatenate each item into a string with a ", "\nseparator.'),(0,r.yg)("h3",{id:"custom-concatenation"},"Custom concatenation"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"field('ODK_Key__c', function (state) {\n  return dataValue('metaId')(state).concat('(', dataValue('index')(state), ')');\n});\n")),(0,r.yg)("p",null,"This will concatenate two values."),(0,r.yg)("h3",{id:"concatenation-of-null-values"},"Concatenation of null values"),(0,r.yg)("p",null,"This will concatenate many values, even if one or more are null, writing them to\na field called Main_Office_City_c."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},'...\n  field("Main_Office_City__c", function(state) {\n    return arrayToString([\n      dataValue("Main_Office_City_a")(state) === null ? "" : dataValue("Main_Office_City_a")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_b")(state) === null ? "" : dataValue("Main_Office_City_b")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_c")(state) === null ? "" : dataValue("Main_Office_City_c")(state).toString().replace(/-/g, " "),\n      dataValue("Main_Office_City_d")(state) === null ? "" : dataValue("Main_Office_City_d")(state).toString().replace(/-/g, " "),\n    ].filter(Boolean), \',\')\n  })\n')),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Notice how this custom function makes use of the ",(0,r.yg)("strong",{parentName:"p"},"regex")," ",(0,r.yg)("inlineCode",{parentName:"p"},"/-/g")," to ensure\nthat all instances are accounted for (g = global search).")),(0,r.yg)("h3",{id:"custom-nth-reference-id"},"Custom Nth reference ID"),(0,r.yg)("p",null,"If you ever want to retrieve the FIRST object you created, or the SECOND, or the\nNth, for that matter, a function like this will do the trick."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"field('parent__c', function (state) {\n  return state.references[state.references.length - 1].id;\n});\n")),(0,r.yg)("p",null,'See how instead of taking the id of the "last" thing that was created in\nSalesforce, you\'re taking the id of the 1st thing, or 2nd thing if you replace\n"length-1" with "length-2".'),(0,r.yg)("h3",{id:"convert-date-string-to-standard-iso-date-for-salesforce"},"Convert date string to standard ISO date for Salesforce"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-js"},"field('Payment_Date__c', function (state) {\n  return new Date(dataValue('payment_date')(state)).toISOString();\n});\n")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"NOTE"),": The output of this function will always be formatted according to\nGMT time-zone.")))}u.isMDXComponent=!0}}]);