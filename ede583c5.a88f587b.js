(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{154:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),i=(n(0),n(169)),o={title:"Triggers"},s={unversionedId:"build/triggers",id:"build/triggers",isDocsHomePage:!1,title:"Triggers",description:"Triggers start jobs running. They come in 4 types. The most common are",source:"@site/docs/build/triggers.md",slug:"/build/triggers",permalink:"/documentation/build/triggers",editUrl:"https://github.com/openfn/docs/edit/main/docs/build/triggers.md",version:"current",sidebar:"docs",previous:{title:"Credentials",permalink:"/documentation/build/credentials"},next:{title:"Your Inbox",permalink:"/documentation/build/inbox"}},l=[{value:"Trigger types",id:"trigger-types",children:[{value:"Message Filter Triggers",id:"message-filter-triggers",children:[]},{value:"Cron Triggers (formerly timers)",id:"cron-triggers-formerly-timers",children:[]},{value:"Flow Triggers",id:"flow-triggers",children:[]},{value:"Fail Triggers",id:"fail-triggers",children:[]}]},{value:"Processing cron jobs",id:"processing-cron-jobs",children:[]},{value:"Filter Matching in Detail",id:"filter-matching-in-detail",children:[{value:"Filter 1",id:"filter-1",children:[]}]},{value:"More filter samples",id:"more-filter-samples",children:[{value:"Match messages <code>WHERE</code> the <code>formId</code> is <code>&quot;Robot_Photo_21.04.2015&quot;</code>",id:"match-messages-where-the-formid-is-robot_photo_21042015",children:[]},{value:"Match a message <code>WHERE</code> this <code>AND</code> that are both included",id:"match-a-message-where-this-and-that-are-both-included",children:[]},{value:"Match a message with two fragments inside an array called <code>data</code>",id:"match-a-message-with-two-fragments-inside-an-array-called-data",children:[]},{value:"Match a message with a fragment inside another object called <code>form</code>",id:"match-a-message-with-a-fragment-inside-another-object-called-form",children:[]}]}],c={toc:l};function b(e){var t=e.components,o=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,o,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Triggers ",Object(i.b)("em",{parentName:"p"},"start"),' jobs running. They come in 4 types. The most common are\n"message filter" triggers, but there are also "cron" triggers, "flow" triggers,\nand "fail" triggers.'),Object(i.b)("h2",{id:"trigger-types"},"Trigger types"),Object(i.b)("h3",{id:"message-filter-triggers"},"Message Filter Triggers"),Object(i.b)("p",null,"Message Filter triggers watch for inbound messages and check to see if the data\nin those message match their ",Object(i.b)("strong",{parentName:"p"},"criteria"),". If they do, and there is an active\njob configured to use that trigger, a run will be started."),Object(i.b)("p",null,"You, as a user, specify the filter ",Object(i.b)("strong",{parentName:"p"},"criteria")," which determines which inbound\nmessages should trigger job runs. This means that if any segment of a message\nbody ",Object(i.b)("strong",{parentName:"p"},"matches")," the string of ",Object(i.b)("inlineCode",{parentName:"p"},"JSON")," you gave as a filter, the filter will run\nand trigger a job (assuming you created one)."),Object(i.b)("p",null,"The filter criteria takes the form of a string of valid ",Object(i.b)("inlineCode",{parentName:"p"},"JSON"),". In a SQL query,\nthis string will be used in the WHERE clause, for example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql"}),'SELECT * FROM receipts\n  WHERE body::jsonb @>\n    \'{"Name":"Aleksa Iwobi"}\'::jsonb;\n')),Object(i.b)("p",null,"There is a more detailed explanation of filter matching below."),Object(i.b)("h3",{id:"cron-triggers-formerly-timers"},"Cron Triggers (formerly timers)"),Object(i.b)("p",null,"Cron triggers run jobs based on a cron scheuled. They can run as frequently as\nonce every minutes, or as infrequently as you desire and can be scheuled on very\nspecific dates or times. Each time a timed job succeeds, its ",Object(i.b)("inlineCode",{parentName:"p"},"final_state")," will\nbe saved and used as the ",Object(i.b)("inlineCode",{parentName:"p"},"initial_state"),' for its next run. See "Managing state"\nand "Keeping a cursor" below for implementation help.'),Object(i.b)("p",null,"The best way to learn about ",Object(i.b)("inlineCode",{parentName:"p"},"cron"),", if you're not already familiar, is through\nthe OpenFn interface or"),Object(i.b)("a",{href:"https://crontab.guru",target:"_blank"},"crontab.guru"),".",Object(i.b)("h3",{id:"flow-triggers"},"Flow Triggers"),Object(i.b)("p",null,"Flow triggers will execute a job ",Object(i.b)("em",{parentName:"p"},"after")," another specified job finishes\nsuccessfully. E.g., a flow trigger which specifies the succesful run of Job A\ncan be used by Job B. Each time Job A succeeds, Job B will start to run with the\n",Object(i.b)("inlineCode",{parentName:"p"},"final_state")," of Job A as its ",Object(i.b)("inlineCode",{parentName:"p"},"initial_state"),"."),Object(i.b)("h3",{id:"fail-triggers"},"Fail Triggers"),Object(i.b)("p",null,'Fail, or "catch", triggers work just like flow triggers, except that they watch\nfor the failure, rather than the success, of a specified job. (E.g., Job A pays\na CHW via MPESA. If Job A ',Object(i.b)("em",{parentName:"p"},"fails")," we should initiate Job B, which sends an SMS\nto the district manager instructing them to manually pay the CHW.)"),Object(i.b)("h2",{id:"processing-cron-jobs"},"Processing cron jobs"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"On-demand processing for cron jobs.")," If you\u2019re leveraging cron triggers to\nrun jobs at specific times, you can also run that cron triggered job on demand.\nThis way you don\u2019t have to wait for the timer to expire before testing! Simply\nclick the process/ \u201cplay\u201d button now available via the Job, Run, and Activity\nHistory pages."),Object(i.b)("p",null,Object(i.b)("img",{alt:"Runs list run time trigger button",src:n(536).default})),Object(i.b)("p",null,Object(i.b)("img",{alt:"Run history time trigger button",src:n(537).default})),Object(i.b)("h2",{id:"filter-matching-in-detail"},"Filter Matching in Detail"),Object(i.b)("p",null,"To illustrate filter matching, refer to the ",Object(i.b)("inlineCode",{parentName:"p"},"JSON"),' strings below. Message "a"\nwill match filter \'1\', but message "b" will not.'),Object(i.b)("h3",{id:"filter-1"},"Filter 1"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{ "formID": "patient_registration_v7" }\n')),Object(i.b)("h4",{id:"message-a-match"},"Message a (MATCH)"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "submissionDate": "2016-01-15",\n  "formID": "patient_registration_v7",\n  "name": "Jack Wilshere",\n  "dob": "1986-05-16",\n  "medications": ["anaphlene", "zaradood", "morphofast"]\n}\n')),Object(i.b)("h4",{id:"message-b-no-match"},"Message b (NO MATCH)"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "submissionDate": "2016-01-16",\n  "formID": "patient_registration_v8",\n  "name": "Larry Bird",\n  "dob": "1982-03-21",\n  "medications": ["anaphlene", "zaradood", "morphofast"]\n}\n')),Object(i.b)("p",null,"Message 'b' does not include ",Object(i.b)("inlineCode",{parentName:"p"},'"formID":"patient_registration_v7"')," and will not\nmatch filter '1'."),Object(i.b)("h4",{id:"keeping-a-cursor-in-state-for-timer-jobs"},"Keeping a cursor in ",Object(i.b)("inlineCode",{parentName:"h4"},"state")," for timer Jobs"),Object(i.b)("p",null,"Because many timer jobs require keeping some sort of record of their previous\nrun to modify their later actions, ",Object(i.b)("inlineCode",{parentName:"p"},"state"),' is passed between the runs. One\nexample might be keeping a "cursor" to select only new records from a database.\nWe\'d expect the following logic:'),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"job-1")," fetches patients from the database"),Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"job-1")," does something important with those patient records"),Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"job-1")," saves the ",Object(i.b)("inlineCode",{parentName:"li"},"id")," of the last successfully processed patient to\n",Object(i.b)("inlineCode",{parentName:"li"},"final_state")),Object(i.b)("li",{parentName:"ol"},"when ",Object(i.b)("inlineCode",{parentName:"li"},"job-1")," runs again, it fetches patients whose ",Object(i.b)("inlineCode",{parentName:"li"},"id")," is greater than the\n",Object(i.b)("inlineCode",{parentName:"li"},"id")," of the last successfully processed patient.")),Object(i.b)("p",null,"To achieve this you might write:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"fetchPatient({ type: 'referral', offset: state.lastId }, state => {\n  // Assuming the system returned an array of patients in the \"data\" key.\n  state.lastId = state.data.patients.sort((a, b) => b.id - a.id)[0];\n  return state;\n});\n")),Object(i.b)("p",null,"The initial offset will be ",Object(i.b)("inlineCode",{parentName:"p"},"null"),', but the subsequent runs will automatically\nonly fetch "new" patients.'),Object(i.b)("h4",{id:"managing-the-size-of-state-for-timer-jobs"},"Managing the size of ",Object(i.b)("inlineCode",{parentName:"h4"},"state")," for Timer Jobs"),Object(i.b)("p",null,"Since state is passed between each run of a timer job, if your job adds\nsomething new to state each time it runs, it may quickly become too large to be\npractically handled. Imagine if a server response were adding, via\n",Object(i.b)("inlineCode",{parentName:"p"},"array.push(...)"),", to ",Object(i.b)("inlineCode",{parentName:"p"},"state.references")," each time the job ran. OpenFn supports\nup to 50,000 bytes (via Erlang's ",Object(i.b)("inlineCode",{parentName:"p"},"byte_size"),"), though most ",Object(i.b)("inlineCode",{parentName:"p"},"final_state")," byte\nsizes are between 100 and 1000."),Object(i.b)("p",null,"If the size of your ",Object(i.b)("inlineCode",{parentName:"p"},"final_state")," exceeds 10,000 bytes, OpenFn will send project\ncollaborators a warning email. If it exceeds 50,000 bytes, your run will still\nsucceed but its ",Object(i.b)("inlineCode",{parentName:"p"},"final_state")," will not be saved and the next time that job runs\nit will inherit the previous, un-updated final state. (I.e., the last state that\nwas < 50,000 bytes.)"),Object(i.b)("h5",{id:"a-quick-fix-for-final-state-bloat"},"A quick fix for final state bloat"),Object(i.b)("p",null,"Most often, final state bloat is due to improper handling of ",Object(i.b)("inlineCode",{parentName:"p"},"state.references"),"\nor ",Object(i.b)("inlineCode",{parentName:"p"},"state.data"),". This can be fixed by adding the following lines ",Object(i.b)("em",{parentName:"p"},"either")," to the\ncallback of your language-package's operation (if it allows for one) or by\nappending an ",Object(i.b)("inlineCode",{parentName:"p"},"alterState(...)")," operation after your operation."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"alterState(state => {\n  state.custom = somethingIntentional;\n  state.data = {};\n  state.references = [];\n  return state;\n});\n")),Object(i.b)("h2",{id:"more-filter-samples"},"More filter samples"),Object(i.b)("h3",{id:"match-messages-where-the-formid-is-robot_photo_21042015"},"Match messages ",Object(i.b)("inlineCode",{parentName:"h3"},"WHERE")," the ",Object(i.b)("inlineCode",{parentName:"h3"},"formId")," is ",Object(i.b)("inlineCode",{parentName:"h3"},'"Robot_Photo_21.04.2015"')),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{ "formId": "Robot_Photo_21.04.2015" }\n')),Object(i.b)("h3",{id:"match-a-message-where-this-and-that-are-both-included"},"Match a message ",Object(i.b)("inlineCode",{parentName:"h3"},"WHERE")," this ",Object(i.b)("inlineCode",{parentName:"h3"},"AND")," that are both included"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{ "formId": "Robot_Photo_21.04.2015", "secret_number": 8 }\n')),Object(i.b)("h3",{id:"match-a-message-with-two-fragments-inside-an-array-called-data"},"Match a message with two fragments inside an array called ",Object(i.b)("inlineCode",{parentName:"h3"},"data")),Object(i.b)("p",null,"(This is useful when gathering data via ODK)"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{ "data": [{ "outlet_call": "TRUE", "new_existing": "Existing" }] }\n')),Object(i.b)("h3",{id:"match-a-message-with-a-fragment-inside-another-object-called-form"},"Match a message with a fragment inside another object called ",Object(i.b)("inlineCode",{parentName:"h3"},"form")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "form": {\n    "@xmlns": "http://openrosa.org/formdesigner/F732194-3278-nota-ReAL-one"\n  }\n}\n')))}b.isMDXComponent=!0},169:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=b(n),m=a,u=d["".concat(o,".").concat(m)]||d[m]||p[m]||i;return n?r.a.createElement(u,s(s({ref:t},c),{},{components:n})):r.a.createElement(u,s({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},536:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/timetriggerunslist-30591afe14b40286a89b96a5a78f3c55.png"},537:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/runtimetrigger1-6895401e3fee9878d136613b44c469e9.png"}}]);