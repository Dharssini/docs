[{"title":"To Automate or Not to Automate? Ask Yourself These 3 Questions.","type":0,"sectionRef":"#","url":"articles/2020/06/24/three-questions-to-ask","content":"","keywords":""},{"title":"Our partners use OpenFn automation solutions to drive efficiency and scale their processes, delivering integrated digital systems that work better, faster, and together.","type":1,"pageTitle":"To Automate or Not to Automate? Ask Yourself These 3 Questions.","url":"articles/2020/06/24/three-questions-to-ask#our-partners-use-openfn-automation-solutions-to-drive-efficiency-and-scale-their-processes-delivering-integrated-digital-systems-that-work-better-faster-and-together","content":"To date, we have worked with 43 social sector organizations that operate across sectors–from health, education, and agriculture, to livelihoods and emergency response. Over the last 6 years, OpenFn has been implemented worldwide for a wide range of use cases, including building real-time data monitoring systems, streamlining data cleaning pipelines, securely exchanging sensitive information, and automating routine processes like uploading indicator results, sending SMS/email alerts, making mobile payments,and more. By connecting any app, OpenFn can integrate and automate all apps within a digital ecosystem. However, a question that we frequently ask our partners is: Just because you can automate—should you?# While integration and automation have the potential to enable scale and save time and money (we’ve learned this from ourpartners), solutions require investment to set up and maintain. These costs sometimes outweigh expected efficiency gains and service outcomes. Therefore, when evaluating the cost-benefit of investing in automation and integration solutions, we at Open Function Group typically ask 3 key questions. 1. Security — Will automation limit the exposure of sensitive data?# Can the exposure of sensitive data be limited by integrating with secure API endpoints (rather than relying on human beings to interact with those data, for example)? Or by automating a data cleaning process? 2. Accuracy — Will automation increase data accuracy and reduce data entry errors?# Can the process take place more reliably by limiting the opportunity for human error (in automating data manipulation or simple algorithmic work, for example)? 3. Speed — Will automation increase the speed of impact?# Can the process be done more quickly via automation and is there value in having it done faster? (The answer to the first part is almost always yes, but sometimes there's not actually lots of value generated by doing something faster.) If you find yourself answering “yes” to these questions, it may be time to consider automating critical processes at your organization.# Tasks that meet these 3 criteria, take a lot of time to complete or are very repetitive, and/or involve moving data between apps are typically great candidates for automation. If you find yourself answering “no”, then it may not be worth the investment in automation... at least not yet. This is especially true if these processes are still in flux or require a lot of human involvement to complete. That said, now may be a good time to refine your existing workflows, think about how your processes might change at scale, and consider what new processes, services, or outcomes could be unlocked by automation. "},{"title":"Delegate your busywork to OpenFn, and try it today!","type":1,"pageTitle":"To Automate or Not to Automate? Ask Yourself These 3 Questions.","url":"articles/2020/06/24/three-questions-to-ask#delegate-your-busywork-to-openfn-and-try-it-today","content":"If you want to try out automation for your organization,sign up for OpenFn, free of charge. Check outour documentation and websiteto learn how to get started. Having trouble setting up your first automation \"job\"? Email us atadmin@openfn.org for support. Our team is always happy to assist and help you evaluate the total cost of ownership of automation solutions. "},{"title":"How Information Is Organized... In Organizations","type":0,"sectionRef":"#","url":"articles/2020/06/16/how-information-is-organized","content":"","keywords":""},{"title":"Drawing a \"relational object model\" sounds technical, but it's actually an exercise in clear communication... and everyone can benefit from it.","type":1,"pageTitle":"How Information Is Organized... In Organizations","url":"articles/2020/06/16/how-information-is-organized#drawing-a-relational-object-model-sounds-technical-but-its-actually-an-exercise-in-clear-communication-and-everyone-can-benefit-from-it","content":"When we—human beings—wrestle with complex problems (like managing lots of programs, other humans, community stakeholders, etc.) we have the capacity to trick ourselves into thinking that we have wrapped our heads around a system (for clinic registration, for after-school education, etc.) when, in fact, we’re engaging in mental hand-waving and are simply ‘papering-over’ sections which are secretly not just complicated, but totally incongruous with other parts of the system. We can make ourselves believe that our logic is sound because we want it to be sound, when in reality the organization might be held together by good people, not good, clear, defined processes. By learning a couple of key concepts, it’s possible for non-technical people to articulate their thoughts clearly using “boxes” and “crow’s feet” and see whether or not there is an underlying structure to their organization’s information. "},{"title":"By forcing yourself to reduce complex systems to sketches containing only two elements, you’ll be able to detect important conflicts and confusions in how you think about your organization that you might otherwise miss.","type":1,"pageTitle":"How Information Is Organized... In Organizations","url":"articles/2020/06/16/how-information-is-organized#by-forcing-yourself-to-reduce-complex-systems-to-sketches-containing-only-two-elements-youll-be-able-to-detect-important-conflicts-and-confusions-in-how-you-think-about-your-organization-that-you-might-otherwise-miss","content":"If you can’t diagram the information structure in your organization using boxes and crow’s feet, it’s a smell that something isn’t quite right (or at least that something isn’t easily scalable… more on this later!). Let me show you the tools in the toolbox and then wrap up by waxing poetic on people, processes, and technology. "},{"title":"Boxes and crow's feet","type":1,"pageTitle":"How Information Is Organized... In Organizations","url":"articles/2020/06/16/how-information-is-organized#boxes-and-crows-feet","content":"![]({{ site.baseurl }}/assets/images/box5.png) The box is my favorite. It represents an entity in your data system. Entities (like teachers) have attributes (like name, phone number, date of birth,gender, etc.) Some people like thinking of entities as simple forms. The “Teacher Registration Form” will ask for the teacher’s name, phone number, gender, etc. These are the fields on your teacher entity. By submitting one of these forms, you’ll add a new teacher to your database. If you’re an Excel person, the attributes are columns in your teachers table. ![]({{ site.baseurl }}/assets/images/crowsfeet2.png) The crow’s foot is my second favorite. It’s used to show relationships between entities. We know that teachers are related to the sessions that they conduct. (And session might be another entity, with fields like date,subject taught, and venue, to name just a few.) The crow’s foot allows us to specify exactly how they are related. On that session entity, we’ll need to specify the name (or ID) of the teacher who led it. On the teacher entity, however, there won’t be a field to specify the name or ID of the session… because a single teacher can lead MANY sessions. This is a one-to-many relationship. The crow’s foot (that little three-pronged fella) denotes the many. One teacher can have many sessions. One session, however, can only have one teacher. See the diagram below. ![]({{ site.baseurl }}/assets/images/objectmodel3.png) If we focus just on teacher and session and think back to MS Excel, we can envision a teachers table and a sessions table. Let’s put them on different sheets in the same workbook. On the teachers table, there is no column forsession, but on the sessions table, there is a column for teacher ID. We’ve just established a one-to-many relationship. Next time, we’ll talk about what’s going with the attendance entity above. It’s sometimes called a “junction object” or a “join table”, and it’s what allows MANY students to be related to MANY sessions. I’ll write more on this next time, but there is no magic going on, no technicalities here. The way that many students are related to many sessions is through this Real World Concept that we call attendance. Attendance is what happens when a student shows up at a session. It’s so important to get the language right in these discussions, and make sure that you’re talking about real-world concepts. "},{"title":"Relational object models with lots of confusing terms are not \"technical\". They are \"bad.\"","type":1,"pageTitle":"How Information Is Organized... In Organizations","url":"articles/2020/06/16/how-information-is-organized#relational-object-models-with-lots-of-confusing-terms-are-not-technical-they-are-bad","content":"Remember that as you start to put pen to paper. And allow yourselves time (and multiple drafts) to get the boxes and terminology right. Understanding relational object modelling is an incredibly powerful way to organize a company. As I said before, if you can’t model it with boxes and arrows, it’s a smell that something might not be conceptually sound. "},{"title":"A disclaimer and some thoughts on scaling:","type":1,"pageTitle":"How Information Is Organized... In Organizations","url":"articles/2020/06/16/how-information-is-organized#a-disclaimer-and-some-thoughts-on-scaling","content":"Some organizations do amazing work without good conceptual systems. They rely on humans, instinct, improvisation, nouse, and other not-so-clearly-defined things. They might do really great work. They might get the job done. But they need to be well aware of their condition and face it head on. If you can’t systematize your program implementation processes, then you need to focus tremendous effort on finding and retaining the right people. A friend once told me that “people are not scalable.” I couldn’t agree more, and defend my earlier stance that if your organization’s information structure can’t be defined with boxes and crow’s feet, it may be very hard for you to scale responsibly. However, if you can create a ruthlessly efficient, world-class “people operations” system (recruitment, training, management, compensation, HR, etc.) that ensures you’ve always got the right people to figure things out you might be better off than those operating a well defined assembly-line with interchangeable parts. Alas, the middle way is probably the best. That’s all for now. More soon. Need help organizing or scaling your organization's information or process flows? Contact our team of ICT4D specialists at support@openfn.org. "},{"title":"Allow Yourself to Fail","type":0,"sectionRef":"#","url":"articles/2020/07/02/allow-yourself-to-fail","content":"Hi all, this is a very short post with a simple message: design for failure. Even if you've never heard ofMSSQL (orAzure, or Microsoft?), I want to talk for one moment about the importance of upserts and a funny developer term called \"idempotence.\" We just extended ourlanguage-mssql adaptor with a custom function that allows upserts (an upsert is when you either insert a new record or update an existing record based on some identifier). Before, you'd need to write something tedious like: sql({ query: `MERGE my_table AS [Target] USING (SELECT '8675309' AS some_unique_id, 'writing_blog_posts' AS skill) AS [Source] ON [Target].some_unique_id = [Source].some_unique_id WHEN MATCHED THEN UPDATE SET [Target].some_unique_id=8675309, [Target].skill='writing_blog_posts' WHEN NOT MATCHED THEN INSERT (some_unique_id, skill) VALUES ([Source].some_unique_id, [Source].skill);`, }); Copy whereas now you can simply write: upsert('my_table', 'some_unique_id', { some_unique_id: 8675309, skill: 'writing blog posts', }); Copy For an operation to be idempotent means that it can be repeated time and time again without producing an unintended result. This is SUPER important for creating S3 (Secure, Stable and Scalable—more on thathere) integrations because it provides you with two \"get-out-of-jail-free\" cards. If a destination application fails, if a connection times out, or if (for whatever reason) you're not sure if the job was completed (say... making a payment to CHW) then an idempotent operation can be RETRIED without fear of making a double-payment. If you make some change to how your job works, make some modification to one of your destination systems, or just because you want to be extra extra sure that all the data in a 9 month survey made it to the national public health reporting system, you can REPROCESS every single message that's come through OpenFn at the click of a button, without having to worry about duplicates. So... when clients let me mess around with their jobs, I always recommend we design for idempotence. It's common sense when you're passing messages between two different systems that are bound to evolve, go offline, have a bad day, etc — Taylor Sign up{: .btn} to set up a project today, absolutely free. Reach out{: .btn} for more information.","keywords":""},{"title":"Tracked entity instances in DHIS2","type":0,"sectionRef":"#","url":"articles/2020/12/09/upsert-in-dhis2","content":"","keywords":""},{"title":"A bit more...","type":1,"pageTitle":"Tracked entity instances in DHIS2","url":"articles/2020/12/09/upsert-in-dhis2#a-bit-more","content":"An “UPSERT” is a portmanteau of the database functions UPDATE and INSERT. It’s critical to handle upserts properly when integrating systems. As of version 35 of the API, DHIS2 does not allow for an administrator to upsert tracked entity instances (“TEIs”). OpenFn’s ownChaiwa Berian has come up with a solution that highlights the utility of helper functions in our dhis2 adaptor. By combining various DHIS2 APIs through an upsertTEI function in OpenFn, DHIS2 users can now perform upserts to TEIs. If you’re curious, check out his implementationhere. "},{"title":"Even more!","type":1,"pageTitle":"Tracked entity instances in DHIS2","url":"articles/2020/12/09/upsert-in-dhis2#even-more","content":"A tracked entity instance in DHIS2 is a type of entity that can be tracked through the system. It can be anything from a person to a commodity like a medicine. If I am a database administrator presiding over two different systems that are connected to one another, let’s call them “System A” and “System B,” I would like for any updates made to the TEI of a user named “Jim Smith” in System A to also appear in Jim’s record in System B. Before upserts came about, doing so was difficult because of the possibility of duplicate record creation. Because an upsert simultaneously UPDATES and INSERTS, it prevents duplicates. Upserts are important and good because they cut down on the risk of duplicate data entry and they also allow for transactions to be retried over and over to ensure data integrity. That last bit is called “idempotency” and you can read about it over here. Please don’t hesitate to reach out to one of OpenFn’s implementation specialists if you’d like to learn more. — Taylor Sign up{: .btn} to set up a project today, absolutely free. Reach out{: .btn} for more information. "},{"title":"Product News: Enhanced Scheduled/Periodic Job Control","type":0,"sectionRef":"#","url":"articles/2020/07/14/cron-is-better-than-a-timer","content":"","keywords":""},{"title":"Scheduling is better than timing.","type":1,"pageTitle":"Product News: Enhanced Scheduled/Periodic Job Control","url":"articles/2020/07/14/cron-is-better-than-a-timer#scheduling-is-better-than-timing","content":"Using cron, you can choose to run a job every minute by typing * * * * *. Or maybe you've got a batch sync that you want to take place while your users are asleep—why not run it every night at 11pm with 23 * * * *. What if you've got to submit reuqests for medical inventory only during the onset of flu season? Simply type 0 0 1 2-4 * and your job will run at midnight the 1st of the month, from February through April. You can still run jobs at the click of a button and create timers with expressions like */10 * * * * for \"every 10 minutes\", but scheduling with cron gives OpenFn.org users so much more control over how they run their organizations. (And that's a good thing.) If you're keen on learning by doing but don't have an OpenFn account yet,sign up for free or mess around with cron expressions at crontab.guru, a brilliant site to quickly build complex cron expressions. That's all from product for today. Speak soon. Taylor "},{"title":"Welcome","type":0,"sectionRef":"#","url":"blog/welcome","content":"Welcome to the new docs.openfn.org!","keywords":""},{"title":"We ❤️ documentation.","type":0,"sectionRef":"#","url":"documentation/","content":"","keywords":""},{"title":"OpenFn Documentation","type":1,"pageTitle":"We ❤️ documentation.","url":"documentation/#openfn-documentation","content":"This documentation is for the suite of OpenFn data integration, interoperability, and automation tools. Note that some technical documentation and source code for OpenFn's FOSS integration tools and adaptors can also be found in their respective repositories atGithub.com/OpenFn. Check out the sections on the left. They'll show you how to get up and running, as well as how to design, build, deploy, and manage data integration and interoperability projects on OpenFn applications. Please feel free to point out issueswith this documentation or, if you can't find the right repo, issues with the tools themselves. (The more feedback the better!). If you want to propose some new language for the documentation, you can make those changes by clicking the\"Edit this page\" link at the bottom of any page and submit a pull request! If you have any questions, please don't hesitate to emailadmin@openfn.org. "},{"title":"The OpenFn Community on Discourse","type":1,"pageTitle":"We ❤️ documentation.","url":"documentation/#the-openfn-community-on-discourse","content":"Finally, please make sure to check out our discourse forum atcommunity.openfn.org. Sign up and join the conversation. Usually, that's the quickest way to get help if you've got questions that aren't answered here. "},{"title":"About","type":0,"sectionRef":"#","url":"documentation/about","content":"","keywords":""},{"title":"Open Function Group","type":1,"pageTitle":"About","url":"documentation/about#open-function-group","content":"Open Function Group is a team of ICT4D specialists that have been working exlcusively in data integration, automation and interoperbaility since 2014. We maintain OpenFn.org, the sector's leading integration platform as a service, and a huge number of open-source integration and \"ETL\" tools which you can find on our Github. The platform is trusted by some of the leading development organizations in the world, including UNCIEF, the IRC, and Population Council. You can learn more about OpenFn's leadership here. "},{"title":"Credentials","type":0,"sectionRef":"#","url":"documentation/build/credentials","content":"","keywords":""},{"title":"Credentials","type":1,"pageTitle":"Credentials","url":"documentation/build/credentials#credentials","content":"Credentials are used to authorize connections to destination systems. In the future, our adaptors will use credentials to fetch meta-data from source and destination applications and make the job writing process easier. Some systems (Salesforce, OpenMRS, DHIS2) require an instanceUrl, host, or ApiUrl. Leave off the final \"/\" in these Urls: https://login.salesforce.com orhttp://demo.openmrs.org/openmrs or https://play.dhis2.org. Credentials can only be viewed, or edited by a single user — their \"owner\" (or the person that created that credential). All the collaborators on a particular project can choose those credentials for use when defining a job. There are two special types of credentials, in addition to the myriad standard application-specific and authentication protocol-specific credentials. "},{"title":"Raw Credentials","type":1,"pageTitle":"Credentials","url":"documentation/build/credentials#raw-credentials","content":"Raw credentials are valid JSON documents which are passed into a job's runtime state. Note that owners of these credentials will be able to view them, in their entirety, in the clear. "},{"title":"Keychain Credentials","type":1,"pageTitle":"Credentials","url":"documentation/build/credentials#keychain-credentials","content":"Keychain credentials allow for a single job to make use of multiple credentials. They work by inspecting the data in the job's runtime state (i.e., state.data) and checking for the value of a predetermined identifier. Based on that value, present in the data for a given source message, for example, anothercredential will be selected and applied for that particular job run. "},{"title":"Your Inbox","type":0,"sectionRef":"#","url":"documentation/build/inbox","content":"","keywords":""},{"title":"How it works","type":1,"pageTitle":"Your Inbox","url":"documentation/build/inbox#how-it-works","content":"On the platform, each project has their own unique inbox URL, something likehttps://www.openfn.org/inbox/54804f1a-4a70-4392-97cb-1f350e98e9c8. That big string of numbers and letters is called a UUID. It's your address, and the \"place\" on the web that you'll send data for processing by OpenFn if you're doing real-time or \"event-based\" integration. Your project will always be listening, and whenever an HTTP request is received at that URL, we'll respond with a 202/Accepted and start processing the data sent either in the body or the parameters of that request. "},{"title":"202/Accepted vs 201/Created","type":1,"pageTitle":"Your Inbox","url":"documentation/build/inbox#202accepted-vs-201created","content":"You've probably heard of 200/OK or other common \"status codes\", but the difference between a 201 and a 202 is very interesting from an integration perspective. The 201/Created means that we've completed processing whatever data was sent to us by the requester. Usually, this response is accompanied by a payload with a new id for whatever resource what created. This is not what OpenFn does, instead we send a 202/Accepted indicating that your request was acceptable and we'll get to work. tip OpenFn sends a 202/Accepted indicating that your request has passed our initial validation (i.e. the data is valid JSON or parseable XML and the inbox URL exists) and that we've enqueued it for processing. Behind the scenes, we've now a system of simple, durable queues that ensure we don't \"drop\" this event at any point in time from here on forward. We'll load it into the database and soon it will appear as a new \"message\" record in your \"Inbox\" page.We'll check the triggers for all the active jobs in your project and if it matches one of those triggers we'll send it to another queue for job running.We'll make sure your project is configured properly and that you haven't exceeded your usage limits.We'll start executing a job run, which may itself may hundreds of unique HTTP requests to other endpoints.And finally we'll report back on the status of that run and soon it will appear as a new \"run\" in your \"Activity History\" page. Depending on how many requests your job makes, how much data is being processed, and the response time of your other systems, all of this could take quite some time—anywhere from 200ms to 20 minutes! If the system that sends the data to OpenFn needs to know whether all the operations in step 4 completed successfully (what do you count as a success with these various custom actions, by the way?) you should consider implementing a SAGA pattern, whereby after all this processing is complete you trigger another request back to the initial system reporting on the downstream tasks. This can be done in OpenFn with Flow Triggers. "},{"title":"Synchronous vs. Asynchronous Processing","type":1,"pageTitle":"Your Inbox","url":"documentation/build/inbox#synchronous-vs-asynchronous-processing","content":"In OpenFn/engine, we've created a way to set up inbox endpoints as \"synchronous\", meaning they'll actually hold a connection open until all of the processing above is completed, and then respond with a 2XX, 4xx, or5XX. This is not recommended for high volume systems, but may be a requirement for some implementations; the sprit of OpenFn/engine is to give as much control as possible to whoever is deploying it on their servers. "},{"title":"Messages","type":0,"sectionRef":"#","url":"documentation/build/messages","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Messages","url":"documentation/build/messages#overview","content":""},{"title":"Data from the outside world that gets sent to your integration platform","type":1,"pageTitle":"Messages","url":"documentation/build/messages#data-from-the-outside-world-that-gets-sent-to-your-integration-platform","content":""},{"title":"How it gets put into state","type":1,"pageTitle":"Messages","url":"documentation/build/messages#how-it-gets-put-into-state","content":""},{"title":"On the Platform","type":1,"pageTitle":"Messages","url":"documentation/build/messages#on-the-platform","content":""},{"title":"On Microservice","type":1,"pageTitle":"Messages","url":"documentation/build/messages#on-microservice","content":""},{"title":"Runs","type":0,"sectionRef":"#","url":"documentation/build/runs","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Runs","url":"documentation/build/runs#overview","content":""},{"title":"Exit Codes","type":1,"pageTitle":"Runs","url":"documentation/build/runs#exit-codes","content":""},{"title":"Logs","type":1,"pageTitle":"Runs","url":"documentation/build/runs#logs","content":""},{"title":"Persistence","type":1,"pageTitle":"Runs","url":"documentation/build/runs#persistence","content":""},{"title":"On the platform, runs will be saved to a db","type":1,"pageTitle":"Runs","url":"documentation/build/runs#on-the-platform-runs-will-be-saved-to-a-db","content":""},{"title":"On microservice, they are available in the logs to be consumed by __","type":1,"pageTitle":"Runs","url":"documentation/build/runs#on-microservice-they-are-available-in-the-logs-to-be-consumed-by-__","content":""},{"title":"Triggers","type":0,"sectionRef":"#","url":"documentation/build/triggers","content":"","keywords":""},{"title":"Trigger types","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#trigger-types","content":""},{"title":"Message Filter Triggers","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#message-filter-triggers","content":"Message Filter triggers watch for inbound messages and check to see if the data in those message match their criteria. If they do, and there is an active job configured to use that trigger, a run will be started. You, as a user, specify the filter criteria which determines which inbound messages should trigger job runs. This means that if any segment of a message body matches the string of JSON you gave as a filter, the filter will run and trigger a job (assuming you created one). The filter criteria takes the form of a string of valid JSON. In a SQL query, this string will be used in the WHERE clause, for example: SELECT * FROM receipts WHERE body::jsonb @> '{\"Name\":\"Aleksa Iwobi\"}'::jsonb; Copy There is a more detailed explanation of filter matching below. "},{"title":"Cron Triggers (formerly timers)","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#cron-triggers-formerly-timers","content":"Cron triggers run jobs based on a cron scheuled. They can run as frequently as once every minutes, or as infrequently as you desire and can be scheuled on very specific dates or times. Each time a timed job succeeds, its final_state will be saved and used as the initial_state for its next run. See \"Managing state\" and \"Keeping a cursor\" below for implementation help. The best way to learn about cron, if you're not already familiar, is through the OpenFn interface or crontab.guru . "},{"title":"Flow Triggers","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#flow-triggers","content":"Flow triggers will execute a job after another specified job finishes successfully. E.g., a flow trigger which specifies the succesful run of Job A can be used by Job B. Each time Job A succeeds, Job B will start to run with thefinal_state of Job A as its initial_state. "},{"title":"Fail Triggers","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#fail-triggers","content":"Fail, or \"catch\", triggers work just like flow triggers, except that they watch for the failure, rather than the success, of a specified job. (E.g., Job A pays a CHW via MPESA. If Job A fails we should initiate Job B, which sends an SMS to the district manager instructing them to manually pay the CHW.) "},{"title":"Processing cron jobs","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#processing-cron-jobs","content":"On-demand processing for cron jobs. If you’re leveraging cron triggers to run jobs at specific times, you can also run that cron triggered job on demand. This way you don’t have to wait for the timer to expire before testing! Simply click the process/ “play” button now available via the Job, Run, and Activity History pages.   "},{"title":"Filter Matching in Detail","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#filter-matching-in-detail","content":"To illustrate filter matching, refer to the JSON strings below. Message \"a\" will match filter '1', but message \"b\" will not. "},{"title":"Filter 1","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#filter-1","content":"{ \"formID\": \"patient_registration_v7\" } Copy Message a (MATCH)# { \"submissionDate\": \"2016-01-15\", \"formID\": \"patient_registration_v7\", \"name\": \"Jack Wilshere\", \"dob\": \"1986-05-16\", \"medications\": [\"anaphlene\", \"zaradood\", \"morphofast\"] } Copy Message b (NO MATCH)# { \"submissionDate\": \"2016-01-16\", \"formID\": \"patient_registration_v8\", \"name\": \"Larry Bird\", \"dob\": \"1982-03-21\", \"medications\": [\"anaphlene\", \"zaradood\", \"morphofast\"] } Copy Message 'b' does not include \"formID\":\"patient_registration_v7\" and will not match filter '1'. Keeping a cursor in state for timer Jobs# Because many timer jobs require keeping some sort of record of their previous run to modify their later actions, state is passed between the runs. One example might be keeping a \"cursor\" to select only new records from a database. We'd expect the following logic: job-1 fetches patients from the databasejob-1 does something important with those patient recordsjob-1 saves the id of the last successfully processed patient tofinal_statewhen job-1 runs again, it fetches patients whose id is greater than theid of the last successfully processed patient. To achieve this you might write: fetchPatient({ type: 'referral', offset: state.lastId }, state => { // Assuming the system returned an array of patients in the \"data\" key. state.lastId = state.data.patients.sort((a, b) => b.id - a.id)[0]; return state; }); Copy The initial offset will be null, but the subsequent runs will automatically only fetch \"new\" patients. Managing the size of state for Timer Jobs# Since state is passed between each run of a timer job, if your job adds something new to state each time it runs, it may quickly become too large to be practically handled. Imagine if a server response were adding, viaarray.push(...), to state.references each time the job ran. OpenFn supports up to 50,000 bytes (via Erlang's byte_size), though most final_state byte sizes are between 100 and 1000. If the size of your final_state exceeds 10,000 bytes, OpenFn will send project collaborators a warning email. If it exceeds 50,000 bytes, your run will still succeed but its final_state will not be saved and the next time that job runs it will inherit the previous, un-updated final state. (I.e., the last state that was < 50,000 bytes.) A quick fix for final state bloat# Most often, final state bloat is due to improper handling of state.referencesor state.data. This can be fixed by adding the following lines either to the callback of your language-package's operation (if it allows for one) or by appending an alterState(...) operation after your operation. alterState(state => { state.custom = somethingIntentional; state.data = {}; state.references = []; return state; }); Copy "},{"title":"More filter samples","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#more-filter-samples","content":""},{"title":"Match messages WHERE the formId is \"Robot_Photo_21.04.2015\"","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#match-messages-where-the-formid-is-robot_photo_21042015","content":"{ \"formId\": \"Robot_Photo_21.04.2015\" } Copy "},{"title":"Match a message WHERE this AND that are both included","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#match-a-message-where-this-and-that-are-both-included","content":"{ \"formId\": \"Robot_Photo_21.04.2015\", \"secret_number\": 8 } Copy "},{"title":"Match a message with two fragments inside an array called data","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#match-a-message-with-two-fragments-inside-an-array-called-data","content":"(This is useful when gathering data via ODK) { \"data\": [{ \"outlet_call\": \"TRUE\", \"new_existing\": \"Existing\" }] } Copy "},{"title":"Match a message with a fragment inside another object called form","type":1,"pageTitle":"Triggers","url":"documentation/build/triggers#match-a-message-with-a-fragment-inside-another-object-called-form","content":"{ \"form\": { \"@xmlns\": \"http://openrosa.org/formdesigner/F732194-3278-nota-ReAL-one\" } } Copy "},{"title":"Core","type":0,"sectionRef":"#","url":"documentation/deploy/core","content":"","keywords":""},{"title":"On DIY implementations using OpenFn/core","type":1,"pageTitle":"Core","url":"documentation/deploy/core#on-diy-implementations-using-openfncore","content":"OpenFn's core ETL tools are all open-source, and here we will explain how those tools can be used to perform ETL operations from your command line. You can even take this further and wrap them together in your own hosted service! To create an integration service like OpenFn.org, you will need to build a REST endpoint that allows JSON or XML to be posted to it, returning a 2XX and checking the body of that message to see if it matches some criteria. If the criteria match for that message, you must perform execute from fn-lang, using the message data and some stored configuration as state. See a sample state.json below: "},{"title":"State.json","type":1,"pageTitle":"Core","url":"documentation/deploy/core#statejson","content":"{ \"data\": { \"word_count\": 284, \"last_update\": \"2016-11-10 13:58:47\", \"folder_name\": \"Civil Disobedience\", \"file_owner\": \"student@school.org.za\", \"file_name\": \"Mock Journal Article\" }, \"configuration\": { \"host\": \"109.XXX.11X.2XX\", \"port\": \"5432\", \"database\": \"data-warehouse\", \"user\": \"postgres\", \"password\": \"secret-password\", \"ssl\": true } } Copy Make sure to store your logs. If you'd like to be able to retry transactions, persist the message data and provide an interface for manipulating that data by hand, or re-running certain transactions after the job expression has been altered. Make sure that a single inbound message can kick off the running of multiple jobs. To get started, or just run fn-lang manually, from your command line, check outopenfn-devtools. With windows and linux install scripts, it's the fastest way to get up and running with OpenFn on your local machine. "},{"title":"Sample files for DIY getting started","type":1,"pageTitle":"Core","url":"documentation/deploy/core#sample-files-for-diy-getting-started","content":"Below you can find sample code to fill the 3 files required to run fn-lang -message.json, expression.js and config.json. message.json# { \"xform_ids\": [], \"version\": null, \"user_id\": \"user1\", \"server_date_opened\": null, \"server_date_modified\": null, \"properties\": { \"prop_c\": \"2013-05-18\", \"prop_b\": \"Female\", \"prop_a\": 99, \"owner_id\": null, \"external_id\": null, \"date_opened\": null, \"date\": \"2013-05-17\", \"case_type\": \"case_type\", \"case_name\": \"Demo\" }, \"indices\": {} } Copy expression.js# event( fields( field('program', 'eBAyeGv0exc'), field('orgUnit', 'DiszpKrYNg8'), field('eventDate', dataValue('properties.date')), field('status', 'COMPLETED'), field('storedBy', 'admin'), field('coordinate', { latitude: '59.8', longitude: '10.9', }), field('dataValues', function (state) { return [ { dataElement: 'qrur9Dvnyt5', value: dataValue('properties.prop_a')(state), }, { dataElement: 'oZg33kd9taw', value: dataValue('properties.prop_b')(state), }, { dataElement: 'msodh3rEMJa', value: dataValue('properties.prop_c')(state), }, ]; }) ) ); Copy config.json# { \"username\": \"admin\", \"password\": \"district\", \"apiUrl\": \"https://play.dhis2.org/demo\" } Copy "},{"title":"Devtools","type":0,"sectionRef":"#","url":"documentation/deploy/devtools","content":"We're in the process of migrating the docs for OpenFn/devtools over here. In the meantime, check out https://openfn.github.io/devtools/","keywords":""},{"title":"Microservices","type":0,"sectionRef":"#","url":"documentation/deploy/microservices","content":"important We're in the process of migrating the docs for devtools over here. In the meantime, check out https://openfn.github.io/microservice/","keywords":""},{"title":"Planning for Deployment","type":0,"sectionRef":"#","url":"documentation/deploy/options","content":"Outlining the various ways of deploying or scaling up an OpenFn implementation. wip...","keywords":""},{"title":"Introduction to Jobs","type":0,"sectionRef":"#","url":"documentation/build/jobs","content":"","keywords":""},{"title":"The properties of a job","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#the-properties-of-a-job","content":"Name - a human-readable nameProject - the project the job belongs toTrigger - the trigger that is used to control initiation of the jobAdaptor - the adaptor that is used to provide tool-specific functionality for this job (e.g., language-dhis2 or language-commcare.)Auto-process? - a true/false switch which sets the job to automatically run on matching messages when they arrive.Expression - the job \"script\" itself, a sequence of operations which tell the job what to do. Here, we'll focus on the expression. "},{"title":"Composing job expressions","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#composing-job-expressions","content":"In most cases, a job expression is a series of create or upsert actions that are run after a message arrives, using data from that message. It could look like this: "},{"title":"A basic expression","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#a-basic-expression","content":"create( 'Patient__c', fields(field('Name', dataValue('form.surname')), field('Age__c', 7)) ); Copy That would create a new Patient__c in some other system. The patient's Namewill be determined by the triggering message (the value inside form.surname, specifically) and the patient's Age__c will always be 7. See how we hard coded it? What you see above is OpenFn's own syntax, and you've got access to dozens of common \"helper functions\" like dataValue(path) and destination specific functions like create(object,attributes). While most cases are covered out-of-the-box, jobs are evaluated as Javascript. This means that you can write your own custom, anonymous functions to do whatever your heart desires: "},{"title":"An expression with custom Javascript","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#an-expression-with-custom-javascript","content":"create( 'Patient__c', fields( field('Name', state => { console.log('Manipulate state to get your desired output.'); return Array.apply(null, state.data.form.names).join(', '); }), field('Age__c', 7) ) ); Copy Here, the patient's name will be a comma separated concatenation of all the values in the patient_names array from our source message. "},{"title":"Available Javascript Globals","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#available-javascript-globals","content":"For security reasons, users start with access to the following standard Javascript globals, and can request more by opening an issue on Github: ArrayconsoleJSONNumberPromiseString *N.B. The runtime environment on the server is Node v6.17.0. Other than the expression tree, Jobs have certain attributes that must be set: Filter - The message filter that will triggers the job.Adaptor - The adaptor for the destination system you're connecting to.Credential - The credential that will be used to gain access to that destination system.Active? - A boolean which determines whether the job runs in real-time when matching messages arrive. "},{"title":"Examples of adaptor-specific functions","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#examples-of-adaptor-specific-functions","content":"N.B.: This is just a sample. There are lots more available in the language-packs. "},{"title":"language-common","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#language-common","content":"field('destination_field_name__c', 'value') Returns a key, value pair in an array.(source)fields(list_of_fields) zips key value pairs into an object.(source)dataValue('JSON_path') Picks out a single value from source data.(source)each(JSON_path, operation(...)) Scopes an array of data based on a JSONPath(source). See beta.each when using multiple each()'s in an expression.each(merge(dataPath(\"CHILD_ARRAY[*]\"),fields(field(\"metaId\", dataValue(\"*meta-instance-id*\")),field(\"parentId\", lastReferenceValue(\"id\")))), create(...))merges data into an array then creates for each item in the array(source)lastReferenceValue('id') gets the sfID of the last item created(source)function(state){return state.references[state.references.length-N].id}) gets the sfID of the nth item created beta.each# beta.each(JSON_path, operation(...)) Copy Scopes an array of data based on a JSONPath but then returns to the state it was given upon completion(source). This is necessary if you string multiple each(...) functions together in-line in the same expression. (E.g., Given data which has multiple separate 'repeat groups' in a form which are rendered as arrays, you want to create new records for each item inside the first repeat group, then RETURN TO THE TOP LEVEL of the data, and then create new records for each item in the second repeat group. Using beta.each(...) lets you enter the first array, create your records, then return to the top level and be able to enter the second array. "},{"title":"Salesforce","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#salesforce","content":"create(\"DEST_OBJECT_NAME__C\", fields(...)) Create a new object. Takes 2 parameters: An object and attributes.(source)upsert(\"DEST_OBJECT_NAME__C\", \"DEST_OBJECT_EXTERNAL_ID__C\", fields(...))Creates or updates an object. Takes 3 paraneters: An object, an ID field and attributes.(source)relationship(\"DEST_RELATIONSHIP_NAME__r\", \"EXTERNAL_ID_ON_RELATED_OBJECT__C\", \"SOURCE_DATA_OR_VALUE\")Adds a lookup or 'dome insert' to a record.(source) "},{"title":"dhis2","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#dhis2","content":"event(...) Creates an event.(source)dataValueSet(...) Send data values using the dataValueSets resource(source) "},{"title":"OpenMRS","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#openmrs","content":"person(...) Takes a payload of data to create a person(source)patient(...) Takes a payload of data to create a patient(source) "},{"title":"Snippets and samples","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#snippets-and-samples","content":"Below you can find some examples of block code for different functions and data handling contexts. "},{"title":"Job expression (for CommCare to SF)","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#job-expression-for-commcare-to-sf","content":"The following job expression will take a matching receipt and use data from that receipt to upsert a Patient__c record in Salesforce and create multiple newPatient_Visit__c (child to Patient) records. upsert( 'Patient__c', 'Patient_Id__c', fields( field('Patient_Id__c', dataValue('form.patient_ID')), relationship('Nurse__r', 'Nurse_ID_code__c', dataValue('form.staff_id')), field('Phone_Number__c', dataValue('form.mobile_phone')) ) ), each( join('$.data.form.visits[*]', '$.references[0].id', 'Id'), create( 'Visit__c', fields( field('Patient__c', dataValue('Id')), field('Date__c', dataValue('date')), field('Reason__c', dataValue('why_did_they_see_doctor')) ) ) ); Copy "},{"title":"Accessing the \"data array\" in Open Data Kit submissions","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#accessing-the-data-array-in-open-data-kit-submissions","content":"Notice how we use \"each\" to get data from each item inside the \"data array\" in ODK. each( '$.data.data[*]', create( 'ODK_Submission__c', fields( field('Site_School_ID_Number__c', dataValue('school')), field('Date_Completed__c', dataValue('date')), field('comments__c', dataValue('comments')), field('ODK_Key__c', dataValue('*meta-instance-id*')) ) ) ); Copy "},{"title":"ODK to Salesforce: create parent record with many children from parent data","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#odk-to-salesforce-create-parent-record-with-many-children-from-parent-data","content":"Here, the user brings time_end and parentId onto the line items from the parent object. each( dataPath('data[*]'), combine( create( 'transaction__c', fields( field('Transaction_Date__c', dataValue('today')), relationship( 'Person_Responsible__r', 'Staff_ID_Code__c', dataValue('person_code') ), field('metainstanceid__c', dataValue('*meta-instance-id*')) ) ), each( merge( dataPath('line_items[*]'), fields( field('end', dataValue('time_end')), field('parentId', lastReferenceValue('id')) ) ), create( 'line_item__c', fields( field('transaction__c', dataValue('parentId')), field('Barcode__c', dataValue('product_barcode')), field('ODK_Form_Completed__c', dataValue('end')) ) ) ) ) ); Copy NB - there was a known bug with the combine function which has been resolved. combine can be used to combine two operations into one and is commonly used to run multiple create's inside an each(path, operation). The source code for combine can be found here:language-common: combine "},{"title":"Create many child records WITHOUT a repeat group in ODK","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#create-many-child-records-without-a-repeat-group-in-odk","content":"beta.each( '$.data.data[*]', upsert( 'Outlet__c', 'Outlet_Code__c', fields( field('Outlet_Code__c', dataValue('outlet_code')), field('Location__Latitude__s', dataValue('gps:Latitude')), field('Location__Longitude__s', dataValue('gps:Longitude')) ) ) ), beta.each( '$.data.data[*]', upsert( 'Outlet_Call__c', 'Invoice_Number__c', fields( field('Invoice_Number__c', dataValue('invoice_number')), relationship('Outlet__r', 'Outlet_Code__c', dataValue('outlet_code')), relationship('RecordType', 'name', 'No Call Card'), field('Trip__c', 'a0FN0000008jPue'), relationship( 'Sales_Person__r', 'Sales_Rep_Code__c', dataValue('sales_rep_code') ), field('Date__c', dataValue('date')), field('Comments__c', dataValue('comments')) ) ) ); Copy "},{"title":"Salesforce: perform an update","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#salesforce-perform-an-update","content":"update(\"Patient__c\", fields( field(\"Id\", dataValue(\"pathToSalesforceId\")), field(\"Name__c\", dataValue(\"patient.first_name\")), field(...) )); Copy "},{"title":"Salesforce: Set record type using 'relationship(...)'","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#salesforce-set-record-type-using-relationship","content":"create( 'custom_obj__c', fields( relationship( 'RecordType', 'name', dataValue('submission_type'), field('name', dataValue('Name')) ) ) ); Copy "},{"title":"Salesforce: Set record type using record Type ID","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#salesforce-set-record-type-using-record-type-id","content":"each( '$.data.data[*]', create( 'fancy_object__c', fields( field('RecordTypeId', '012110000008s19'), field('site_size', dataValue('size')) ) ) ); Copy "},{"title":"Telerivet: Send SMS based on Salesforce workflow alert","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#telerivet-send-sms-based-on-salesforce-workflow-alert","content":"send( fields( field( 'to_number', dataValue( 'Envelope.Body.notifications.Notification.sObject.phone_number__c' ) ), field('message_type', 'sms'), field('route_id', ''), field('content', function (state) { return 'Hey there. Your name is '.concat( dataValue('Envelope.Body.notifications.Notification.sObject.name__c')( state ), '.' ); }) ) ); Copy "},{"title":"HTTP: fetch but don't fail!","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#http-fetch-but-dont-fail","content":"// ============= // We use \"fetchWithErrors(...)\" so that when the // SMS gateway returns an error the run does not \"fail\". // It \"succeeds\" and then delivers that error message // back to Salesforce with the \"Update SMS Status\" job. // ============= fetchWithErrors({ getEndpoint: 'send_to_contact', query: function (state) { return { msisdn: state.data.Envelope.Body.notifications.Notification.sObject .SMS__Phone_Number__c, message: state.data.Envelope.Body.notifications.Notification.sObject .SMS__Message__c, api_key: 'some-secret-key', }; }, externalId: state.data.Envelope.Body.notifications.Notification.sObject.Id, postUrl: 'https://www.openfn.org/inbox/another-secret-key', }); Copy "},{"title":"Sample DHIS2 events API job:","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#sample-dhis2-events-api-job","content":"event( fields( field('program', 'eBAyeGv0exc'), field('orgUnit', 'DiszpKrYNg8'), field('eventDate', dataValue('properties.date')), field('status', 'COMPLETED'), field('storedBy', 'admin'), field('coordinate', { latitude: '59.8', longitude: '10.9', }), field('dataValues', function (state) { return [ { dataElement: 'qrur9Dvnyt5', value: dataValue('properties.prop_a')(state), }, { dataElement: 'oZg33kd9taw', value: dataValue('properties.prop_b')(state), }, { dataElement: 'msodh3rEMJa', value: dataValue('properties.prop_c')(state), }, ]; }) ) ); Copy "},{"title":"Sample DHIS2 data value sets API job:","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#sample-dhis2-data-value-sets-api-job","content":"dataValueSet( fields( field('dataSet', 'pBOMPrpg1QX'), field('orgUnit', 'DiszpKrYNg8'), field('period', '201401'), field('completeData', dataValue('date')), field('dataValues', function (state) { return [ { dataElement: 'f7n9E0hX8qk', value: dataValue('prop_a')(state) }, { dataElement: 'Ix2HsbDMLea', value: dataValue('prop_b')(state) }, { dataElement: 'eY5ehpbEsB7', value: dataValue('prop_c')(state) }, ]; }) ) ); Copy "},{"title":"sample openMRS expression, creates a person and then a patient","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#sample-openmrs-expression-creates-a-person-and-then-a-patient","content":"person( fields( field('gender', 'F'), field('names', function (state) { return [ { givenName: dataValue('form.first_name')(state), familyName: dataValue('form.last_name')(state), }, ]; }) ) ), patient( fields( field('person', lastReferenceValue('uuid')), field('identifiers', function (state) { return [ { identifier: '1234', identifierType: '8d79403a-c2cc-11de-8d13-0010c6dffd0f', location: '8d6c993e-c2cc-11de-8d13-0010c6dffd0f', preferred: true, }, ]; }) ) ); Copy "},{"title":"merge many values into a child path","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#merge-many-values-into-a-child-path","content":"each( merge( dataPath(\"CHILD_ARRAY[*]\"), fields( field(\"metaId\", dataValue(\"*meta-instance-id*\")), field(\"parentId\", lastReferenceValue(\"id\")) ) ), create(...) ) Copy "},{"title":"arrayToString","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#arraytostring","content":"arrayToString(arr, separator_string); Copy "},{"title":"access an image URL from an ODK submission","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#access-an-image-url-from-an-odk-submission","content":"// In ODK the image URL is inside an image object... field(\"Photo_URL_text__c\", dataValue(\"image.url\")), Copy "},{"title":"alterState (alter state) to make sure data is in an array","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#alterstate-alter-state-to-make-sure-data-is-in-an-array","content":"// Here, we make sure CommCare gives us an array to use in each(merge(...), ...) alterState(state => { const idCards = state.data.form.ID_cards_given_to_vendor; if (!Array.isArray(idCards)) { state.data.form.ID_cards_given_to_vendor = [idCards]; } return state; }); // Now state has been changed, and we carry on... each( merge( dataPath('form.ID_cards_given_to_vendor[*]'), fields( field('Vendor_Id', dataValue('form.ID_vendor')), field('form_finished_time', dataValue('form.meta.timeEnd')) ) ), upsert( 'Small_Packet__c', 'sp_id__c', fields( field('sp_id__c', dataValue('ID_cards_given_to_vendor')), relationship('Vendor__r', 'Badge_Code__c', dataValue('Vendor_Id')), field( 'Small_Packet_Distribution_Date__c', dataValue('form_finished_time') ) ) ) ); Copy "},{"title":"Login in to a server with a custom SSL Certificate","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#login-in-to-a-server-with-a-custom-ssl-certificate","content":"This snippet describes how you would connect to a secure server ignoring SSL certificate verification. Set strictSSL: false in the options argument of thepost function in language-http. post( `${state.configuration.url}/${path}`, { headers: { 'content-type': 'application/json' }, body: { email: 'Luka', password: 'somethingSecret', }, strictSSL: false, }, callback ); Copy "},{"title":"Anonymous Functions","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#anonymous-functions","content":"Different to Named Functions, Anonymous functions are generic pieces of javascript which you can write to suit your needs. Here are some examples of these custom functions: "},{"title":"Custom replacer","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#custom-replacer","content":"field('destination__c', state => { console.log(something); return dataValue('path_to_data')(state).toString().replace('cats', 'dogs'); }); Copy This will replace all \"cats\" with \"dogs\" in the string that lives atpath_to_data. NOTE: The JavaScript replace() function only replaces the first instance of whatever argument you specify. If you're looking for a way to replace all instances, we suggest you use a regex like we did in theexample below. "},{"title":"Custom arrayToString","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#custom-arraytostring","content":"field(\"target_specie_list__c\", function(state) { return Array.apply( null, sourceValue(\"$.data.target_specie_list\")(state) ).join(', ') }), Copy It will take an array, and concatenate each item into a string with a \", \" separator. "},{"title":"Custom concatenation","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#custom-concatenation","content":"field('ODK_Key__c', function (state) { return dataValue('metaId')(state).concat('(', dataValue('index')(state), ')'); }); Copy This will concatenate two values. "},{"title":"Concatenation of null values","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#concatenation-of-null-values","content":"This will concatenate many values, even if one or more are null, writing them to a field called Main_Office_City_c. ... field(\"Main_Office_City__c\", function(state) { return arrayToString([ dataValue(\"Main_Office_City_a\")(state) === null ? \"\" : dataValue(\"Main_Office_City_a\")(state).toString().replace(/-/g, \" \"), dataValue(\"Main_Office_City_b\")(state) === null ? \"\" : dataValue(\"Main_Office_City_b\")(state).toString().replace(/-/g, \" \"), dataValue(\"Main_Office_City_c\")(state) === null ? \"\" : dataValue(\"Main_Office_City_c\")(state).toString().replace(/-/g, \" \"), dataValue(\"Main_Office_City_d\")(state) === null ? \"\" : dataValue(\"Main_Office_City_d\")(state).toString().replace(/-/g, \" \"), ].filter(Boolean), ',') }) Copy Notice how this custom function makes use of the regex /-/g to ensure that all instances are accounted for (g = global search). "},{"title":"Custom Nth reference ID","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#custom-nth-reference-id","content":"If you ever want to retrieve the FIRST object you created, or the SECOND, or the Nth, for that matter, a function like this will do the trick. field('parent__c', function (state) { return state.references[state.references.length - 1].id; }); Copy See how instead of taking the id of the \"last\" thing that was created in Salesforce, you're taking the id of the 1st thing, or 2nd thing if you replace \"length-1\" with \"length-2\". "},{"title":"Convert date string to standard ISO date for Salesforce","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#convert-date-string-to-standard-iso-date-for-salesforce","content":"field('Payment_Date__c', function (state) { return new Date(dataValue('payment_date')(state)).toISOString(); }); Copy NOTE: The output of this function will always be formatted according to GMT time-zone. "},{"title":"Use external ID fields for relationships during a bulk load in Salesforce","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#use-external-id-fields-for-relationships-during-a-bulk-load-in-salesforce","content":"array.map(item => { return { Patient_Name__c: item.fullName, 'Clinic__r.Unique_Clinic_Identifier__c': item.clinicId, 'RecordType.Name': item.type, }; }); Copy "},{"title":"Bulk upsert with an external ID in salesforce","type":1,"pageTitle":"Introduction to Jobs","url":"documentation/build/jobs#bulk-upsert-with-an-external-id-in-salesforce","content":"bulk( 'Visit_new__c', 'upsert', { extIdField: 'commcare_case_id__c', failOnError: true, allowNoOp: true, }, dataValue('patients') ); Copy "},{"title":"Platform","type":0,"sectionRef":"#","url":"documentation/deploy/platform","content":"","keywords":""},{"title":"Considerations for platform deployments","type":1,"pageTitle":"Platform","url":"documentation/deploy/platform#considerations-for-platform-deployments","content":""},{"title":"Compliance","type":1,"pageTitle":"Platform","url":"documentation/deploy/platform#compliance","content":"Check out https://www.openfn.org/compliance for an overview of how to consider OpenFn and the GDPR. "},{"title":"Trust","type":1,"pageTitle":"Platform","url":"documentation/deploy/platform#trust","content":"Learn more about S3, how OpenFn manages security, stability, and scalability athttps://www.openfn.org/trust "},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"documentation/deploy/troubleshooting","content":"","keywords":""},{"title":"Create your account","type":1,"pageTitle":"Troubleshooting","url":"documentation/deploy/troubleshooting#create-your-account","content":""},{"title":"Lost password","type":1,"pageTitle":"Troubleshooting","url":"documentation/deploy/troubleshooting#lost-password","content":""},{"title":"Helpful Tips","type":0,"sectionRef":"#","url":"documentation/design/design-integration","content":"","keywords":""},{"title":"when-to-integrate","type":0,"sectionRef":"#","url":"documentation/design/when-to-integrate","content":"","keywords":""},{"title":"dhis2","type":0,"sectionRef":"#","url":"documentation/dhis2","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"dhis2","url":"documentation/dhis2#overview","content":"The District Health Information Software 2 (DHIS2)] is an open source, web-based health management information system (HMIS) platform. Today, DHIS2 is the world's largest HMIS platform, in use by 73 low and middle-income countries. Approximately 2.4 billion people live in countries where DHIS2 is used. Including NGO-based programs, DHIS2 is in use in more than 100 countries. The core DHIS2 software development is managed by the Health Information Systems Program (HISP) at the University of Oslo (UiO). HISP is a global network comprised of 13 in-country and regional organizations, providing day-in, day-out direct support to government ministries and local implementers of DHIS2. DHIS2 exposes its data and service method integration pipeline through aRESTful Web Application Programing Ineterface(API). TheDHIS2 Web API is a component which makes it possible for external systems to access and manipulate data stored in an instance of DHIS 2. More precisely, it provides a programmatic interface to a wide range of exposed data and service methods for applications such as third-party software clients, web portals and internal DHIS 2 modules. "},{"title":"Integration Use Cases","type":1,"pageTitle":"dhis2","url":"documentation/dhis2#integration-use-cases","content":"DHIS2 has been expanding its reach into many health systems. Starting from its familiar grounds of aggregate data sets for routine data it has included patient related data and then data in the areas of HR, finance, logistics and laboratory management. For several years now, DHIS2 has grown its data management activities organically, allowing the actual usage to lead to sometimes unforeseen solutions. However, there are also limits to where leveraging DHIS2 seems useful. In the following sections, special systems will be described. Example user stories# 1 Logistics Management(LMIS) LMIS is an area where a multitude of parallel, overlapping or competing software solutions can be found in a single countryAlthough a basic LMIS configuration based on aggregate data can take you very far, in some cases a transactional LMIS is necessary if you need to track such detailed operations as returns, transfer between facilities, barcode reading, batch and expiry managemenIn such a situation... 2 Data Sharing for Health and Nutrition, Water Sanitation and Hygiene Projects Case management sytsems such as CommCare are widely preffered in collecting case data(or patient level data) due to its dominance in the sector and easy of adoption. In such scenarios, ... 3 DHIS2 Instance Synchronization Different DHIS2 instances in a given organisation or government ministry may be deployed on separate servers which places the need for synchronization in both metadata and data values. DHIS2 provides API endpoints to enable which enable organisations to automate the synchronization process of data/metadata across a cluster of DHIS2 servers. "},{"title":"Further Reading:","type":1,"pageTitle":"dhis2","url":"documentation/dhis2#further-reading","content":"1 DHIS2 Web API 2DHIS2 Integration Concepts 3DHIS2 Integration Scenarios 4Interoperable DHIS2-LMIS in Senegal, Tanzania and Ghana 5CRVS Fellowship report SmartVA and DHIS2 integration in Sri Lanka "},{"title":"Integration Options","type":1,"pageTitle":"dhis2","url":"documentation/dhis2#integration-options","content":"Data integration via DHIS2 Web API.. Metadata integration via DHIS2 Web API... "},{"title":"OpenFn Adaptor","type":1,"pageTitle":"dhis2","url":"documentation/dhis2#openfn-adaptor","content":"About & link to language-dhis2 "},{"title":"Integration Examples","type":1,"pageTitle":"dhis2","url":"documentation/dhis2#integration-examples","content":"Links to sample jobs/ code snippets "},{"title":"Developing Connected Apps","type":0,"sectionRef":"#","url":"documentation/for-devs","content":"","keywords":""},{"title":"Sending data to OpenFn","type":1,"pageTitle":"Developing Connected Apps","url":"documentation/for-devs#sending-data-to-openfn","content":"To send data to OpenFn, your application must be able to make an HTTPS post to an external URL with a valid JSON object as the post body. See the following example using cURL: curl -X POST \\ -H \"Content-Type: application/json\" \\ -H \"Cache-Control: no-cache\" \\ -d '{\"foo\":\"bar\", \"baz\":\"qux\"}' \\ \"https://staging.openfn.org/inbox/some-secret-api-key\" Copy OpenFn will respond with a 200 and an empty JSON object in the event of a successful post. 400s mean that the user's external URL is wrong, and 500s means that there is an application error on OpenFn. While 500s are rare, they could be due to invalid JSON in your POST body. If you cannot notifiy an external URL when some event takes place, you can still integrate with OpenFn if you have a JSON-based REST API. OpenFn users can make HTTP GET requests to your application and perform additional actions based on your response. You should allow either basic or token authentication and responsd to a valid GET with JSON. There is no specific format for your response, as users can parse it any way they'd like, extracting relevant data and then performing other actions—like loading it into a destination system—with that data. See language-http for details on how users make these generic HTTP requests. "},{"title":"Receiving data from OpenFn","type":1,"pageTitle":"Developing Connected Apps","url":"documentation/for-devs#receiving-data-from-openfn","content":"To make it easy for users to connect to your application, it's highly recommended that you create a language-package with your required authentication and a set of simple, allowable actions nicely abstracted into \"helper functions\". See language-dhis2for an example of a language-package which creates a simpler interface for a traditional JSON-based REST api. Language packages are written in Javascript and execute in Node. You can convert OpenFn's JSON into XML, or any other format before sending it to your application and you may make use of any node modules you'd like. Seelanguage-postgresql for an example of a language package that connects directly to PostgreSQL databases using a popular NPM module called \"pg\". To receive data from OpenFn's generic language-http langauge package, your application must allow either basic, token, or digest authenticated POST, PUT, or GET requests. (Though it is not advisable to create an API that requires GET requests to create or update data.) "},{"title":"Frequently Asked Questions","type":0,"sectionRef":"#","url":"documentation/faqs","content":"","keywords":""},{"title":"What is OpenFn?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#what-is-openfn","content":"OpenFn is an integration platform as a service. This means our prime directive is to move data quickly and securely between different software systems. In most cases: A source application sends messages to your project’s inbox when something happens. Jobs will be triggered, based on your filters, and use the data in those messages to attempt specific actions in destination systems. The logs are recorded so you can see precisely what happened and when and where it happened to take action in the event of a failed attempt—like editing the job or even the source message and trying it again. "},{"title":"Who uses OpenFn?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#who-uses-openfn","content":"OpenFn is used by organizations big and small, but the individuals interacting with the platform range from system administrators to Javascript developers. With a basic understanding of Javascript, the flexibility of the platform is almost limitless. "},{"title":"What is a job?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#what-is-a-job","content":"OpenFn automation centers around jobs, which define the specific series of tasks or database actions OpenFn should perform. They can be set to be activated (triggered) at certain time intervals or when data matching specified criteria is received. You can think of jobs as a set of instructions you might give a data entry staff member (e.g., create a new Patient record in OpenMRS when a form containing a newly registered client is received from CommCare, export data to DHIS2 every week on Friday 11pm, send SMS with payment confirmation number when payment confirmation message is received etc.). note Jobs are fully configurable and reusable. They can also be chained together to create multi-step automation flows, two-way syncs. and to keep data consistent between multiple applications (using multi-app Saga patterns). You can read more on two-way synching below. "},{"title":"What is a run?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#what-is-a-run","content":"A run is each individual execution of a job. Imagine that a job is configured to create a new patient in OpenMRS whenever a case is opened in CommCare. Over the next week, if 5 cases are opened in CommCare, you’ll see 5 different runs of this one job in OpenFn. If 4 runs are successful and one has failed, you’ll see 4 new patients in OpenMRS, and your system administrator will have been notified that one of those patients couldn’t be created (or whatever more robust error-handling you’ve set up will take place.) Note that there’s not always a 1-to-1 mapping between runs and the real-world things you’re working with. I might define a job that gets all updated event data from DHIS2 for the last 2 weeks and publishes it to a public map using CartoDB. This job will be triggered at specified time intervals, every 2 weeks in this case, and after a month, we’ll only see 2 runs in OpenFn (that’s one run every two weeks). Each run will have succeeded or failed, and each one might have processed thousands of events from DHIS2. note For one last example, a single form submission in Open Data Kit might trigger a job that creates new contacts and attendance records in Salesforce. In this case, you’ll find a run for each ODK form submission, but each run will create lots of different records in Salesforce—specifically, at least one contact and N number of attendance records, corresponding to the number of items in your ODK form’s “attendance repeat group”. "},{"title":"Is OpenFn open-source?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#is-openfn-open-source","content":"OpenFn is a suite of different technologies with different licenses. We have built and maintain dozens of open-source data transformation and API wrapper software packages. Those are, for the most part, licensed under the LGPL and can be used freely to extract, transform, and load data from a command line, or as part of another software application. OpenFn also hosts a proprietary web-application that ties these tools together (www.openfn.org) into an out-of-the-box integration management platform. This platform is open-core, providing the powerful ETL tools that sit at the heart of the proprietary OpenFn.org iPaaS as free and open-source software (FOSS). All of the jobs running on OpenFn.org, as well as all of the underlying adaptors, can be run offline using our FOSS tools. note OpenFn will also soon offer an enhanced FOSS implementation option calledOpenFn/microservice. This FOSS microservice approach is currently in development with funding from theDIAL Open Source Center,Digital Square, and theFCDO(formerly DFID). Please note that this pathway does not provide the entire OpenFn platform as free and open source software (FOSS). In situations where a particular partner or government is unable to use the proprietary platform (though it can be deployed on local servers with an unlimited use license), this approach ensures that all jobs, triggers, and project configuration can be exported from OpenFn.org and used, in conjunction with OpenFn's FOSS ETL tools to deploy a microservices-style implementation which incurs zero licence costs and provides the basic data processing that OpenFn's platform does. While at the outset there will be no web interface and no ability to reprocess messages, etc., these features could be built by partners in time to replace the features of the OpenFn platform. I.E., none of the initial investment in OpenFn will be lost if the partners choose to build their own, fully open-source integration platform based on our powerful open-source ETL tools. "},{"title":"How much does OpenFn cost?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#how-much-does-openfn-cost","content":""},{"title":"Design & implementation costs","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#design--implementation-costs","content":"OFG offers a range of packages to ensure successful first-time implementations, which include integration consulting, design, configuration, and capacity-building. Typical engagements take 1-5 days to complete, and our most popular package is the Integration QuickStart, in which we spend 1 week to design and configure ~5 integration flows end-to-end and provide administrative training to your staff for $5,000. "},{"title":"Ongoing costs","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#ongoing-costs","content":"OpenFn.org offers a free plan for users seeking to trial the platform or implement projects handling low data volumes (up to 100 runs/month). Usage of OpenFn.org, the proprietary integration-platform-as-a-service (iPaaS), incurs ongoing costs, which are largely dependent on the expected data volumes to be processed. OpenFn offers monthly subscriptions, enterprise licenses for annual and multi-year agreements, as well as unlimited and local deployment options. Contact enterprise@openfn.org to learn more and for a tailored cost estimate. There are also available DIY options, as well as bespoke training services to develop your capacity to implement and manage OpenFn independently. "},{"title":"Can I trial the platform?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#can-i-trial-the-platform","content":"Yes. As a matter of fact, you can use it for free, forever. OpenFn.org offers a free plan to all users (sign up here). Try it out using OpenFn Docs, or contact our team for a free consultation and help getting started. Change your OpenFn plan at any time (no lock-in!), or contact enterprise@openfn.org to learn more about annual, enterprise, and unlimited licenses. tip At low volumes, or for prototyping, you can use the hosted platform for free forever. "},{"title":"How reliable is the hosted service?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#how-reliable-is-the-hosted-service","content":"OpenFn has harnessed the extreme stability and scalability of Erlang to coordinate these actions and provide users with email alerts, project management tools, and an online job writing IDE. We constantly monitor our own status with independent infrastructure atstatus.openfn.org. You can subscribe to notifications there or follow @openfnstatus. We've been delivering this service continuously since 2014. "},{"title":"Can OpenFn integrate with my custom app?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#can-openfn-integrate-with-my-custom-app","content":"Yes, OpenFn can integrate with any application. If your technology has a REST endpoint or webhooks service, it will likely work right out of the box. This covers most web applications (e.g., CommCare, Kobo, ODK, DHIS2, Salesforce, MS Dynamics, MPesa, etc.). OpenFn can also integrate with most databases, like Postgres, MySql, and Mongo, custom applications, legacy government systems, and can even parse CSV files–so long as these can be accessed from an online location. Read more aboutconnecting source applications, or check out the Apps page for applications widely implemented. We offer pre-built connectors (called “language-packages” or API “adaptors”) for our users’ most popular apps to make the integration setup quicker and more user-friendly when connecting with these tools. For example, users can implement language-http to send basic HTTP requests to any web application, or implement language-dhis2 to automatically handle DHIS2 authentication and access helper functions like fetchData()to export DHIS2 datasets. "},{"title":"Does OpenFn support two-way syncing?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#does-openfn-support-two-way-syncing","content":"Yes, OpenFn can support two-way syncing of applications. UtilizingFlow Triggers, OpenFn jobs can be chained together to facilitate real-time two-way data sync,multi-step automation and data cleaning processes, and complex branching logic. Users can also implement bi-directional data syncs, as well as complex Saga Patterns to implement a transaction that spans multiple applications by configuring webhooks in their endpoint applications and performing updates in both systems when events take place in either. "},{"title":"Do I need to know how to code?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#do-i-need-to-know-how-to-code","content":"No, but it helps to have written a formula in MS Excel! Many OpenFn users are familiar with data, not development, and quickly get comfortable with OpenFn jobs. If your project is leveraging an OpenFn adaptor (e.g.., language-dhis2), you have access to pre-built helper functions (e.g., getPatient, update) so that you don’t need to write custom code, and rather can use OpenFn documentation or existing job scripts to write your own job. See OpenFn Github for inspiration and open-source job code shared by OpenFn users. You’ll notice that these functions work in the same way that functions do in Excel… sum(A1, A2, A3) Jobs can be written and extended using raw Javascript for advanced data cleaning and manipulation. Therefore, you may want to implement Javascript to achieve specific requirements or to extend existing OpenFn language-packages, which are open-source! "},{"title":"Where is my data stored?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#where-is-my-data-stored","content":"OpenFn is a middleware provider rather than a data storage system. We move information from system A to system B, and integrations can be set up to be compliant with GDPR, HIPAA, and other policies. To make auditing and reprocessing easy, OpenFn temporarily stores message data and job run history, but we're not the single source of truth nor the final resting point for these data. When organizations choose to use our hosted OpenFn platform at OpenFn.org, no data processed by OpenFn is stored locally and our platform runs on the Google Cloud Platform (GCP). Read more on ourCompliance page. OpenFn.org currently offers hosting on U.S. and Swiss-based cloud servers. OpenFn local and in-country cloud deployments are also available upon request. Contact enterprise@openfn.org to learn more. "},{"title":"Is my data secure?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#is-my-data-secure","content":"Yes, OpenFn prioritizes security, stability, and scalability (what we callS³) above all else, and many of our users implement OpenFn to comply with GDPR, HIPAA, and other policies. Read more on our Trust,Compliance, andPrivacy pages. OpenFn.org runs on the Google Cloud Platform, an infrastructure protected by more than 500 top experts in information, application, and network security. For organizations with specific compliance and data governance requirements, OpenFn can also be deployed on designated local- or cloud-infrastructure. "},{"title":"What if I have more questions?","type":1,"pageTitle":"Frequently Asked Questions","url":"documentation/faqs#what-if-i-have-more-questions","content":"Open Function Group is a team of ICT4D and integration specialists, waiting to help you get started. Click the chat icon in the bottom right hand corner of this page to talk now. Or Email our team at admin@openfn.org, chat us on OpenFn.org, or post a question in ourCommunity Forum. "},{"title":"Deployment Options","type":0,"sectionRef":"#","url":"documentation/getting-started/deployment-options","content":"Deployment Option\tInformation\tPlatform\thosted service that can be used to do the following Microservices\tcentered Devops\tare neat\t","keywords":""},{"title":"Automation Inspiration","type":0,"sectionRef":"#","url":"documentation/getting-started/automation-inspiration","content":"This article is a work in progress. Check back soon :)","keywords":""},{"title":"Language Glossary","type":0,"sectionRef":"#","url":"documentation/getting-started/glossary","content":"This article is a work in progress. Check back soon :)","keywords":""},{"title":"Designing Integrations","type":0,"sectionRef":"#","url":"documentation/getting-started/designing-integrations","content":"This article is a work in progress. Check back soon :)","keywords":""},{"title":"Quick-start","type":0,"sectionRef":"#","url":"documentation/getting-started/quick-start","content":"","keywords":""},{"title":"1. Create your account","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#1-create-your-account","content":"If you haven't already, create an account atOpenFn.org "},{"title":"2. Log In","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#2-log-in","content":"After logging into your new account, you will see an overview of your current projects and the job runs associated with that project. This is called the outerDashboard. Click on one project to start. "},{"title":"3. Review the navigation bar","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#3-review-the-navigation-bar","content":"You should now be looking at the OpenFn User dashboard for a particular project. Review the following navigation tabs: Jobs | Triggers | Credentials |Inbox | Run History | Version Control | Access & Security |Project Settings "},{"title":"Jobs","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#jobs","content":"A job defines the specific series of tasks or database actions to be performed when a triggering message is received or a scheduled/recurring time is reached. Jobs are like the “instructions” you might give a data entry staff member (e.g., create new Patient record in the database, send SMS with payment confirmation number, etc.). "},{"title":"Triggers","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#triggers","content":"A trigger runs jobs based on events, including incoming messages (this is known as a filter trigger), on a cron schedule (a cron trigger) or based on the success or failure of another job(a flow or catch trigger). "},{"title":"Credentials","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#credentials","content":"A credential is used to authorize connection to a destination system (e.g., Salesforce username, password & login URL). "},{"title":"Inbox","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#inbox","content":"Your inbox contains the history of all messages that have passed in to your project, which may or may not have triggered a specific job. Messages are stored payloads or data (e.g., an incoming SMS, a submitted CommCare form) that were sent via HTTP post to your inbox. "},{"title":"Run History","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#run-history","content":"Runs are OpenFn attempts made on a destination system by running a message through a job. Runs can be viewed here and re-processed if there were any errors flagged when running a job. "},{"title":"Version Control","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#version-control","content":"Sync your project with a GitHub repository so that every change is tracked using git and jobs can be 'rolled back' to previous commits at the touch of a button. "},{"title":"Access & Security","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#access--security","content":"Invite other OpenFn users to collaborate with you on your project and create authentication methods for your project to restrict which applications can send data to your inbox. "},{"title":"Project Settings","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#project-settings","content":"Monitor your usage and update your project settings here. "},{"title":"4. Check your inbox","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#4-check-your-inbox","content":"Click on the Inbox tab to view messages—receipts of data that was sent to your project inbox. Click on the Inbox tab. "},{"title":"5. Run a job","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#5-run-a-job","content":"You should see your first message associated with a \"sample job\". Click on it. You can now choose to do the following: Edit the message (mainly for the purpose of fixing mistakes in data),Manually run the job associated with a filter which has identified your first message as a trigger. See the Current Potential section for all jobs that can be run against this message based on their triggers and the message body. Click run. "},{"title":"6. View the Associated Runs","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#6-view-the-associated-runs","content":"After running the job, view the run logs in this section below. Click into a run to see what happened to the data inside of the message. In the logs, you should be able to see the status (success/error) of the run.Go to the \"Run History\" navigation tab to also view every job run log and its status. "},{"title":"8. Set up some live data sources","type":1,"pageTitle":"Quick-start","url":"documentation/getting-started/quick-start#8-set-up-some-live-data-sources","content":"Most modern web applications have a feature that allows you to push,publish, or post data to another URL when a certain event takes place. This event could be a form submission, mobile payment, patient registration, or barcode scan submission from a mobile app. The key is that your source application will notify OpenFn when something happens. Go to the \"settings\" or \"administration\" page for your source app, and look for a Webhook API, Data Forwarding API, or Notifications API. Write to the developers of your application if none is provided out of the box. When setting up forwarding, select to send messages in JSON to your project's inbox URL. This is a UUID that serves as your API token. You can find and copy your secure inbox URL by clicking on the \"copy URL\" link in the bottom-right corner of the project in question on yourproject dashboard page or by using the \"Copy URL\" button on your project's \"Inbox\" page. Soon you'll see new messages arrive in your Inbox. See Connecting Data Sources for specific instructions for connecting common applications. "},{"title":"Overview","type":0,"sectionRef":"#","url":"documentation/getting-started/overview","content":"","keywords":""},{"title":"What's OpenFn?","type":1,"pageTitle":"Overview","url":"documentation/getting-started/overview#whats-openfn","content":"OpenFn is a suite of data integration, interoperability, and workflow automation tools that's used by governments, NGOs, and social enterprises, primarily in the health and humanitarian sectors. tip In essence, it's software that makes it easier for these organizations to connect the different technologies they use, share data, drive critical business processes, and scale their interventions. "},{"title":"What's this site?","type":1,"pageTitle":"Overview","url":"documentation/getting-started/overview#whats-this-site","content":"It's the one-stop-shop documentation site for all of OpenFn's products. You're in the getting started section. Here you will learn how to use OpenFn to build automation workflows that can be as short and simple or as long and complex as you like. You also will learn about all of the ways you can choose to deploy the automation flows you create. Before you dive into the quick start, let's start off with some key terminology before we get started. "},{"title":"Key terms","type":1,"pageTitle":"Overview","url":"documentation/getting-started/overview#key-terms","content":""},{"title":"Jobs","type":1,"pageTitle":"Overview","url":"documentation/getting-started/overview#jobs","content":"OpenFn automation centers around jobs, which define the specific series of tasks or database actions OpenFn should perform. They can be set to be activated (triggered) at certain time intervals or when data matching specified criteria is received. You can think of jobs as a set of instructions you might give a data entry staff member (e.g., create a new Patient record in OpenMRS when a form containing a newly registered client is received from CommCare, export data to DHIS2 every week on Friday 11pm, send SMS with payment confirmation number when payment confirmation message is received etc.). note Jobs are fully configurable and reusable. They can also be chained together to create multi-step automation flows, two-way syncs. and to keep data consistent between multiple applications (using multi-app Saga patterns). You can read more on two-way synching below. "},{"title":"Runs","type":1,"pageTitle":"Overview","url":"documentation/getting-started/overview#runs","content":"A run is each individual execution of a job. Imagine that a job is configured to create a new patient in OpenMRS whenever a case is opened in CommCare. Over the next week, if 5 cases are opened in CommCare, you’ll see 5 different runs of this one job in OpenFn. If 4 runs are successful and one has failed, you’ll see 4 new patients in OpenMRS, and your system administrator will have been notified that one of those patients couldn’t be created (or whatever more robust error-handling you’ve set up will take place.) note There’s not always a 1-to-1 mapping between runs and the real-world things you’re working with. I might define a job that gets all updated event data from DHIS2 for the last 2 weeks and publishes it to a public map using CartoDB. This job will be triggered at specified time intervals, every 2 weeks in this case, and after a month, we’ll only see 2 runs in OpenFn (that’s one run every two weeks). Each run will have succeeded or failed, and each one might have processed thousands of events from DHIS2. "},{"title":"Triggers","type":1,"pageTitle":"Overview","url":"documentation/getting-started/overview#triggers","content":"Each job must be initiated with an event that acts as a trigger. Triggers can be activated at a certain time (scheduled), when another job completes, when another job fails, or when a certain message is received. "},{"title":"Credentials","type":1,"pageTitle":"Overview","url":"documentation/getting-started/overview#credentials","content":"A credential is used to authorize connection to a destination system (e.g., Salesforce username, password & login URL). "},{"title":"Adaptors","type":1,"pageTitle":"Overview","url":"documentation/getting-started/overview#adaptors","content":"Adaptors, sometimes referred to as \"language packages\", are small, open-source modules that provide your jobs with the features they need to communicate with a particular system's API. Some examples are language-salesforce,language-dhis2, language-commcare, etc. There are ~50 active adaptors at the moment, and anyone if free to build or enhance them. "},{"title":"Exit Codes & Errors","type":0,"sectionRef":"#","url":"documentation/jobs/errors","content":"","keywords":""},{"title":"Standard Exit Codes","type":1,"pageTitle":"Exit Codes & Errors","url":"documentation/jobs/errors#standard-exit-codes","content":""},{"title":"0: Success","type":1,"pageTitle":"Exit Codes & Errors","url":"documentation/jobs/errors#0-success","content":"Exit code 0 is a success (run succeeded, e.g. a destination system responded with a 200) "},{"title":"1: Error","type":1,"pageTitle":"Exit Codes & Errors","url":"documentation/jobs/errors#1-error","content":"Exit code 1 is a normally-handled error (run failed normally, e.g. a destination system responded with a 4XX, 5XX, or some specializedRequiredFieldMissing error.) "},{"title":"2: Timeout","type":1,"pageTitle":"Exit Codes & Errors","url":"documentation/jobs/errors#2-timeout","content":"Exit code 2 means that your run timed out. It exceeded the timeout you set for your job, or if you're using the hosted platform on a non-enterprise plan, it exceeded 100 seconds. "},{"title":"10: Core Error","type":1,"pageTitle":"Exit Codes & Errors","url":"documentation/jobs/errors#10-core-error","content":"Exit code 10 means there was an error in @openfn/core/cli.js execute. It's possible that you job can't be run how it's written, but that various validation checks failed to warn you earlier. "},{"title":"Special Exit Codes (Platform)","type":1,"pageTitle":"Exit Codes & Errors","url":"documentation/jobs/errors#special-exit-codes-platform","content":"The OpenFn platform controls the execution of all of your jobs via the ErlangVM. The following exit codes are applied at the level of this controlling VM, rather than down inside your run's NodeVM. "},{"title":"3: Failed to start","type":1,"pageTitle":"Exit Codes & Errors","url":"documentation/jobs/errors#3-failed-to-start","content":"Exit code 3 means the run could not be started due to an Erlang error (could relate to network traffic, but very rare as an error before the run is started will be retried from Redis with an exponential backoff for a very long time) "},{"title":"4: The NodeVM is unresponsive","type":1,"pageTitle":"Exit Codes & Errors","url":"documentation/jobs/errors#4-the-nodevm-is-unresponsive","content":"Exit code 4 means that the NodeVM running your job became unresponsive. It attempted to exit after the timeout but couldn't, so we shut down the process from the controlling ErlangVM. "},{"title":"5: Elixir/ErlangVM Error","type":1,"pageTitle":"Exit Codes & Errors","url":"documentation/jobs/errors#5-elixirerlangvm-error","content":"Exit code 5 means we encountered an unexpected error during the execution of your job which could only be caught by the controlling ErlangVM. Errors like this are very rare and trigger an internal audit by the OpenFN engineering team. "},{"title":"A thought on errors","type":1,"pageTitle":"Exit Codes & Errors","url":"documentation/jobs/errors#a-thought-on-errors","content":"Errors are your friends. The most important thing you can do when encountering an error in any step of a data integration project is to read what's on the screen. While this may sound obvious, it's very easy to see a big block of technical language and switch off... often, there are simple business reasons that a run is failing and they can be identified from the error messages displayed by @openfn/core. "},{"title":"Use Cases","type":0,"sectionRef":"#","url":"documentation/getting-started/use-cases","content":"This article is a work in progress. Check back soon :)","keywords":""},{"title":"What's an operation?","type":0,"sectionRef":"#","url":"documentation/jobs/operations","content":"An Operation is a function which returns a function which takes state and returns a Promise or state. The purpose of an Operation is to act as an unresolved unit of behaviour. For example, when creating an expression - the code itself doesn't know what the state is going to be, only what it's going to do. Language packs all follow this convention, where the functions that are provided all return Operations. create('My_Custom_Object__c', { Custom_Field__c: dataValue('foo'), }); Copy In the snippet above, the create function doesn't know anything about credentials, or any dynamic data that you may be available at runtime. function create(objectName, data) { return function (state) { // expand the data argument using state // actually do the work }; } Copy In this snippet is a simple example of what most functions in OpenFn look like. The create function returns a function that takes state, this is anOperation. The runtime using execute will call all Operations with state.","keywords":""},{"title":"Using multiple operations","type":0,"sectionRef":"#","url":"documentation/jobs/multiple-operations","content":"","keywords":""},{"title":"Flow jobs vs multiple operations in a single job vs posting back to the inbox","type":1,"pageTitle":"Using multiple operations","url":"documentation/jobs/multiple-operations#flow-jobs-vs-multiple-operations-in-a-single-job-vs-posting-back-to-the-inbox","content":""},{"title":"Reasons to use flow jobs","type":1,"pageTitle":"Using multiple operations","url":"documentation/jobs/multiple-operations#reasons-to-use-flow-jobs","content":"Each operation needs to use functions that are only available in different adaptors.You must have different credentials for each operationYou want to see success and failure at the level of each operationEach individual run takes a long time and you're worried about your NodeVM being timed out. (On platform, this happens after 100s for non-enterprise users; on microservice you've likely configured your own timeout duration.) "},{"title":"Reasons to use multiple operations in a single job","type":1,"pageTitle":"Using multiple operations","url":"documentation/jobs/multiple-operations#reasons-to-use-multiple-operations-in-a-single-job","content":"The job must be atomic, you want the whole thing to count as a failure if any part of it fails.You run jobs manually and you want a single button to click to retry the entire sequence of operations.You update a cursor in a series of operations that involve GET and POST. When the POST fails, you don't want to update the cursor for the subsequent job run which contains the GET.Your operations don't take too long (<100s in total for platform) and you want to reduce the number of executions. "},{"title":"Reasons to post back to the inbox","type":1,"pageTitle":"Using multiple operations","url":"documentation/jobs/multiple-operations#reasons-to-post-back-to-the-inbox","content":"You might decide to send data from a GET back to your inbox and let another job be triggered by a message filter. get('somePath', { query: { after: '2020-10-12' } }, post('my-inbox-uuid')); Copy You'd like to store the result of the first operation for later use or inspection and not have to retry that operation in order to reproduce the data.You don't care about small delays between the first and second job being run. "},{"title":"A closer look at jobs","type":0,"sectionRef":"#","url":"documentation/jobs/understanding","content":"","keywords":""},{"title":"Project Management","type":0,"sectionRef":"#","url":"documentation/manage/platform-mgmt","content":"","keywords":""},{"title":"Activity","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#activity","content":"In this section of the portal, you can view a list of all \"runs\" - i.e. individual job runs. This list is essentially a compilation of all jobs, messages and credentials flowing through your OpenFn account towards your destination system(s). "},{"title":"Runs","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#runs","content":"Runs are attempts made on a destination system by running a receipt through a Job Description. Runs can be viewed and re-processed. Each submission has asuccess, started_at, finsihed_at, job_description_id, and receipt_idattribute. Started_at and finished_at are the timestamps when the submission began and ended. Note: Some runs may take a really long time, particularly if they are performing multiple actions in a destination system or if they are fetching lots of data from a REST api at the start of a migration. They will appear as red if they have failed. In the case of failure, refer to ourTroubleshooting section below. "},{"title":"Filter runs in the Activity view","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#filter-runs-in-the-activity-view","content":"You can filter the run logs in the Activity View by: Text - Remember to be patient as a full log text search can take time process. Leverage this feature to search for runs with specific error messages to support with troubleshooting any failed runs. Date - Filter the view to only show runs that failed in the last few hours/ days/ year – or a custom date range! Note that the default activity history view shows runs from the last 30 days. "},{"title":"Bulk retry runs","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#bulk-retry-runs","content":"Need to re-process a series of runs? This could be helpful if you had multiple runs fail due to an error message. Simply click on the new Retry button via the Runs view. Specify the ID range for the runs that you want to re-process. Choose to filter by Job and/or Status to only reprocess runs associated with a specific job or runs that have failed/ succeeded. Remember that OpenFn plans are run-based, and you can monitor usage in Project Settings to ensure that you don’t hit any run limits when bulk reprocessing! "},{"title":"Export runs to CSV","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#export-runs-to-csv","content":"You can download your run logs by exporting to a CSV file. Via the Runs Activity History view, filter the runs you’d like to export. Choose to filter by text, date, job, and status. Click the Export as CSV button to generate an export. The link to download this file will be sent to your email address. "},{"title":"Inbox","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#inbox","content":"Your inbox contains the history of all messages that have passed in to your project, which may or may not have triggered a specific job. Messages are stored payloads or data that were sent via HTTP post to your inbox. They can be viewed in formatted JSON, edited, or manually processed (if they did not match a filter when they were originally delivered.) To edit a message, click the \"pencil and paper\" icon next to that receipt. Be careful, as no original copy will be persisted. "},{"title":"Filter messages in your inbox","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#filter-messages-in-your-inbox","content":"To help you more quickly find relevant messages, you can now filter your inbox by: Body Text - Search your messages for specific text (e.g., find surveys that contain “India” in the body). As individual projects may have millions of messages containing tens of thousands of lines of JSON each, we’ve implemented a “tsvector” search strategy. Please be patient and note that this text-based search may take a moment to return results.. If you’re curious about how tsvector works from a technical perspective, check out theofficial documentation.Date - Choose a relative date range (e.g., “Last 90 Days”) or define a custom date range yourself. Note that the default inbox view shows “Last 30 Days”.  "},{"title":"Bulk reprocess messages","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#bulk-reprocess-messages","content":"Need to re-run a series of messages? If you had a job fail because of an error for multiple messages, or need to re-process the data in OpenFn to re-send to a destination application, then this feature will help you do so more quickly! Simply click on the new Reprocess button via the Inbox view. Specify the ID range for messages that you want to re-run (e.g., messages with IDs 4622741 through 4622749 → 9 messages to reprocess). Note when bulk reprocessing messages# This simulates the chain of events that starts when messages first arrive in your inbox. In other words, reprocessed messages will be handled by message filter triggers for any jobs that have the autoprocess setting “on”. If you've got messages that match certain triggers, but the associated jobs are switched \"off\" they will not be run when those messages are reprocessed. Remember that OpenFn plans are run-based, and you can monitor usage inProject Settings to ensure that you don’t hit any run limits when bulk reprocessing!  "},{"title":"Export messages to CSV","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#export-messages-to-csv","content":"You can now download and review OpenFn message data by exporting to a CSV file. In your inbox, filter the messages you’d like to export to CSV. Choose to filter by text, date, trigger, and run state. Click the Export as CSV button to generate an export. The link to download this file will be sent to your email address.  "},{"title":"Account Management","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#account-management","content":"(work in progress) "},{"title":"Add a credit card","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#add-a-credit-card","content":"(work in progress) "},{"title":"Change plan","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#change-plan","content":"(work in progress) "},{"title":"Lost password","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#lost-password","content":"(work in progress) "},{"title":"Project settings","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#project-settings","content":"(work in progress) "},{"title":"Change concurrency","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#change-concurrency","content":"(work in progress) "},{"title":"Add collaborators","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#add-collaborators","content":"(work in progress) "},{"title":"Inbox Security","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#inbox-security","content":"OpenFn project administrators can choose to configure additional authentication for any inbound requests made to the project's inbox URL. In the \"Access & Security\" page of their OpenFn project, Administrators can choose from API Key and Basic Auth types, which will prompt administrators to either generate an API token or to setup a username:password credential. Once this inbox authentication is configured, any HTTP requests made to the OpenFn Inbox URL must include either this token or username:password in the request header. Rotating auth methods# Because more than one auth method may be accepted at a given time, some organizations choose to periodically rotate their auth methods for extra security and can do so without disrupting live production integrations. To rotate your inbox auth methods: Create a second valid auth method with a new token or user:pass combination.Provide that token to your external systems so that they can start using it in their webhooks/requests to OpenFn.Once you are certain that all external services are now using the new auth token, revoke the old auth token. You can repeat this process as frequently as is required by your organization's internal security protocols. "},{"title":"Creating a compatible notifications service","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#creating-a-compatible-notifications-service","content":"If you are a developer, looking to set up a compatible notifications API for OpenFn, please see ourApplication Developers section. "},{"title":"GitHub version control","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#github-version-control","content":"You're ready to manage your jobs via GitHub, the leading hosted version control software on the web? Great, this section describes the steps necessary to get going. N.B.: GitHub integration is currently only available for enterprise users. Contact enterprise@openfn.org to build a custom plan for your needs. "},{"title":"Motivation","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#motivation","content":"Managing large numbers of jobs with multiple contributors is complicated. We developed the GitHub integration so that OpenFn projects can be linked to GitHub repositories. You can work collaboratively on your jobs. When commits are made to a particular branch OpenFn will automatically update the linked job with the new job file from GitHub. "},{"title":"Setup Steps","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#setup-steps","content":"Github: Settings -> Personal Access Tokens ->Generate New Token: This token should have full control of private repositories.OpenFn: User Settings: Once the token is generated, copy and paste it into the \"GitHub Access Token\" field on your user settings page.OpenFn: Project -> Version Control: Specify the repository owner, repository name and branch for automatic deploys. You'd also select to turn on or off automatic deploys.GitHub: Repoistory -> Settings -> Webhooks -> Add webhookCopy Payload URL from OpenFn Version Control page and paste into GitHub.Select application/json as the Content Type.Copy Secret from OpenFn Version Control page into GitHub.Leave \"Just the push event\" and \"Active\" selected, then click \"Add Webook\".OpenFn: Project -> Jobs -> Job Edit: To link an individual job to a file in a GitHub repo, edit that job and paste in the path to the job from the root of your GitHub repo. If your repo looks like this, you'd type sample_job_1.jsor some_folder/some_other_job.js to link your OpenFn job to the select file in your repo. "},{"title":"Advanced Version Control","type":1,"pageTitle":"Project Management","url":"documentation/manage/platform-mgmt#advanced-version-control","content":"Using this GitHub integration, you can revert to previous version of jobs quickly by resending old GitHub Webhook Events. Access the \"Manage Webhook\" interface on GitHub to see a list of all past events and send whichever version of the job you'd like deployed to your OpenFn project. "},{"title":"Key Terms and Concepts","type":1,"pageTitle":"A closer look at jobs","url":"documentation/jobs/understanding#key-terms-and-concepts","content":"core (https://github.com/openfn/core) is the Javascript program which executes jobs for OpenFn in an emphemeral Node.js environment.state is a .JSON file that is built and passed into the Node environment. It contains at least two keys, configuration and data. Configuration will be populated with your credential and it used by language packages for authentication, and data will be populated with message data if the job was triggered by an incoming message. { \"configuration\": { \"username\": \"taylor\", \"password\": \"shhhhhh\", \"loginUrl\": \"https://login.salesforce.com\" }, \"data\": { \"a\": 1, \"b\": { \"x\": [1, 2, 3] } } } Copy expressions are sequences of operations to be executed. They are part of \"jobs\", which also include a credential, a trigger, a label, and (sometimes) a github filepath.operations are named functions, exported for use by specific language-packages, which take state and return state. "},{"title":"State is passed to operations. Operations Return state.","type":1,"pageTitle":"A closer look at jobs","url":"documentation/jobs/understanding#state-is-passed-to-operations-operations-return-state","content":"This is a key concept. When you write: create('object', fields( field(...) )); Copy The execute function in your language-package (e.g., language-salesforce) will execute each operation with state, then return state. If you want to execute operations inside another custom function, you must explicitly pass in state. alterState(state => { return create('object', fields( field(...) ))(state) }); Copy "},{"title":"Sequences of operations inside custom functions.","type":1,"pageTitle":"A closer look at jobs","url":"documentation/jobs/understanding#sequences-of-operations-inside-custom-functions","content":"Using execute you can string together several sequential operations inside a custom function. alterState(state => { const { userName } = state.data.form.meta; if (userName != 'tester') { return execute( upsert(\"person__c\", \"Name\", fields( field(...), field(...) )), beta.each( dataPath(\"form.array[*]\"), upsert(\"object\", \"Name\", fields( field(...) )) ) )(state) } return state; }); Copy "},{"title":"Controlling timing between operations with async functions.","type":1,"pageTitle":"A closer look at jobs","url":"documentation/jobs/understanding#controlling-timing-between-operations-with-async-functions","content":"To get really complex, you might want to execute a number of async functions inside an alterState operation, but WAIT for those functions to resolve before moving on to your next operation. If execute doesn't work for your use case, you could use Promise.all and return an async function. alterState(state => { console.log('Here we will await the result of a LOT of async operations.'); console.log('First we define a bunch of different async functions.'); const postClinics = async c => { return post(state.configuration.inboxUrl, { body: { clinics: c }, })(state); }; const postPatients = async p => { return post(state.configuration.inboxUrl, { body: { patients: p }, })(state); }; const postVisits = async v => { return post(state.configuration.inboxUrl, { body: { visits: v }, })(state); }; console.log( 'Then we define a single function that wraps them all up and waits for all the individual functions to resolve.' ); async function makePosts() { return Promise.all([ ...state.data.clinicSets.map(item => postClinics(item)), ...state.data.patientSets.map(item => postPatients(item)), ...state.data.visitSets.map(item => postVisits(item)), ]); } console.log( 'Then we return that function, forcing our next operation to await the result of this one.' ); return makePosts(); }); alterState(state => { console.log('I get called AFTER those async functions are resolved.'); return state; }); Copy "},{"title":"Portability Proposal","type":0,"sectionRef":"#","url":"documentation/portability","content":"","keywords":""},{"title":"Proposal v1","type":1,"pageTitle":"Portability Proposal","url":"documentation/portability#proposal-v1","content":"const project = { async: true, triggers: { uniqueTriggerId: { // trigger properties }, otherTrigger: { // other trigger properties }, }, credentials: { // for now, credentials will not be synced // // secret1: { // username: 'mamadou', // pass: 'shhh', }, staticData: { // static objects that can be accessed from any job }, jobs: { payHealthWorker: { trigger: 'otherTrigger' }, syncToSalesforce: { expression: 'uri://github.com/jobs/expresion.js', trigger: 'uniqueTriggerId', credential: 'secret1', }, }, }; Copy "},{"title":"Release Notes","type":0,"sectionRef":"#","url":"documentation/release-notes","content":"","keywords":""},{"title":"Version 1.87.8 (2021-01-28)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-1878-2021-01-28","content":"New features: Improved logging on timeouts: We've enhanced job timeouts significantly, splitting into two separate types of timeouts. Exit code 2 is a standard timeout which allows us to display the full Javascript logs up to the moment of the timeout instead of a mysterious \"we timed out your run\" message. Exit code 4 will be used for when the NodeVM fails to time itself out and becomes unresponsive. This second case is extremely rare. "},{"title":"Version 1.75.0 (2020-07-14)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-1750-2020-07-14","content":"New features: Scheduled jobs replace timer jobs: In the past \"interval trigger.\" behaved like sand timers, executing your jobs every x seconds. This functionality has been completely overhauled, giving users much greater control over when jobs get executed by introducing cron expressions. Learn about cron via the OpenFn UI, or atcrontab.guru. "},{"title":"Version 1.72.17 (2020-06-21)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-17217-2020-06-21","content":"New features: Credential sharing: Users can now share credentials across multiple projects and transfer credential ownership to other users.Enhanced credential security: Project owners can now disable consolefor particular jobs in their projects. This can be used to stop unintentional or malicious printing of credential data to the logs.Test mode for HTTP jobs: Users can turn on \"test mode\" for jobs, which will intercept all outbound HTTP requests, print the request parameters to the log, and provide a 200 OK response. This can be used to test integrations for systems that are still in development.Enhanced debugging/open-source integration: Now using a new version of OpenFn/core which displays the current langauge-package version and Node JS version for better debugging and a tighter integration between our offline/open-source tools and the platform.Enhanced monitoring: Queue size monitor allows users to see approximately how many runs are in their queue—this is useful for estimating time to completing for big bulk reprocessing jobs. "},{"title":"Version 1.37.0 (2019-10-21)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-1370-2019-10-21","content":"New features: Submit ODK Collect forms (or any OpenRosa compliant form) directly to an OpenFn inbox, rather than to ODK Aggregate or some other server before forwarding. "},{"title":"Version 1.36.0 (2019-10-01)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-1360-2019-10-01","content":"New features: Allow messages to be deleted (in accordance with plan retention periods) despite having more recent runs related to them. We set the message to \"null\" for these younger runs, but the run logs will still be available until they're past the retention period. This allows sensitive data in the initial message payload to be purged with the retention period, while less sensitive data in the run logs is still kept.Added more specific exit codes to runs for non-standard exits. Note that exit codes above 2 are very rare. See below for new codes from v1.36.0 onwards. Enhanced Error Codes: 0: success (run succeeded, e.g. a destination system responded with a 200)1: error (run failed normally, e.g. a destination system responded with a4XX, 5XX, or some specialized RequiredFieldMissing error.)2: run timed out (runs >100s only supported in enterprise plans)3: run could not start due to error (could relate to network traffic, but very rare as an error before the run is started will be retried from Redis with an exponential backoff for a very long time)5: unexpected error during job execution10: error in core/cli.js execute "},{"title":"Version 1.35.0 (2019-10-01)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-1350-2019-10-01","content":"New features: Default navigation drawer to open and grouped nav items for easier accessVarious UI bug-fixesAdded new indexes on messages and runs for faster search and filter performance.Enhanced bulk-retry feature for runsEnhanced bulk-reprocess feature for messagesAdded user-warning when connecting a job to a GitHub filepath: the contents at that filepath will overwrite your current OpenFn job on the next GitHub commitAdded historical project usage viewAdded activity cleaning, as per www.openfn.org/pricing#plans to better comply with data protection regulations and improve UI performance "},{"title":"Version 1.22.0 (2019-03-10)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-1220-2019-03-10","content":"New features: Allow filtering by run status (any, success, failed) for bulk retrying runs in the Run Retry modal.Hovering over a message/run displays the full date-time at which it was received/started as well as the relative time (i.e., how long ago) of that action. "},{"title":"Version 1.21.0 (2019-03-09)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-1210-2019-03-09","content":"New features: Added buttons to the Job, Run, and Activity History pages that allow a user torun a time triggered job on demand so that they don't have to wait for the timer to expire to test. "},{"title":"Version 1.20.0 (2019-03-07)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-1200-2019-03-07","content":"New features: We've been busy, but negligent on release notes. To explain all that's changed we've broken the new features list into multiple sections. Messages & the \"Inbox\" view: Filter messages by body text. (Be patient, doing tsvector searching across millions of payloads.)Filter by date. (Default inbox view shows last 30 days.)Export messages as a CSV, based on your currently applied filters.Bulk reprocess messages in a series.All projects on paid plans now have their own job running queues.Partial loading to address inbox view performance issues: messages are loaded first on the inbox view, and then their related \"run states\" are calculated and loaded in a second action. Runs & the \"Activity History\" view: Filter runs by log text. (This is a full text search and may take some time.)Filter by date. (Default activity history view shows last 30 days.)Bulk retry runs in a series. (With the ability to limit retries to a certain job.)Export runs as a CSV, based on your currently applied filters. Authentication & Security: Require basic auth or token auth to make HTTP requests to a project inbox. Project Settings: View the \"inbox URL\" as text with a click-to-reveal button.Show \"pace\" of estimated usage to determine when a plan upgrade will be necessary. Jobs: Ability to create a job, and a trigger all from the same \"Wizard\" view. Triggers: Ability to create \"success\" and \"failure\" triggers so that jobs can be run based on the success or failure of another job run. "},{"title":"Version 1.10.0 (2017-05-04)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-1100-2017-05-04","content":"New features: GitHub integration now generally available for enterprise users. Self-setup interface completed. "},{"title":"Version 1.9.0 (2017-03-07)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-190-2017-03-07","content":"New features: View matching messages in the job writing interface when a message filter trigger is selected.\"Tree view\" exposed for job expression viewing. With valid syntax, you're able to see your expression as a syntax tree as we step slowly towards a more point-and-click interface. "},{"title":"Version 1.75.0 (2016-12-08)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-1750-2016-12-08","content":"New features: Hold control while clicking on navigation buttons to open the target in a new window.Filter messages in your inbox by their content by selecting a message-filter trigger. "},{"title":"Version 1.7.0 (2016-12-05)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-170-2016-12-05","content":"1.7 is all about user experience!# New features: Material design—more whitespace and cleaner lines.Goto page on inbox and activity tables—save time when processing errors.Change number of items per page on inbox and activity table—care with this one on slow connections!Go to next or previous message or run—makes working through an audit trail easierChange user profile settings without changing passwordSelect syntax style for code editors in user settings—clouds midnight is my new favoriteFilter projects, jobs, triggers by name—on the fly for quick navigationAdd adaptor logos to credentials list—quick identificationSpecify connection types on \"Apps\" list—seems there was some confusion about this. I know we're missing plenty of apps that have good APIs. Will consider logging API documentation as well.Shift second top-nav to a collapseable \"side nav\"—better use of screen real-esate.Use 'masonry' packing module for jobs, triggers, credentials, and project settings boxes—more efficient use of spaceAdd material design to this documentation page! "},{"title":"Version 1.6.0 (2016-11-24)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-160-2016-11-24","content":"New features: Updated payment receipts to include project names.Added update(...) to Salesforce adaptor v0.3.0Added fetchWithErrors to HTTP adaptor v0.3.1 New Salesforce helper function update(...): It takes an object and, so long as you're using the \"Id\" only updates. update(\"Patient__c\", fields( field(\"Id\", dataValue(\"pathToSalesforceId\"), field(\"Name__c\", dataValue(\"patient.first_name\")), field(...) )) Copy New http helper function fetchWithErrors(...): This function will perform a get request on an endpoint and return the response to another endpoint, regardless of whether the first GET suceeded or failed. It's currently being used to send message receipt confirmations back to a system of origin that uses OpenFn as an intermediary between it and an SMS gateway. If the SMS message doesn't get delivered because the phone number is invalid, we'd like that information the return all the way to Salesforce, rather than erroring out and staying in OpenFn. // ============= // We use \"fetchWithErrors(...)\" so that when the // SMS gateway returns an error the run does not \"fail\". // It \"succeeds\" and then delivers that error message // back to Salesforce with the \"Update SMS Status\" job. // ============= fetchWithErrors({ getEndpoint: 'send_to_contact', query: function (state) { return { msisdn: state.data.Envelope.Body.notifications.Notification.sObject .SMS__Phone_Number__c, message: state.data.Envelope.Body.notifications.Notification.sObject .SMS__Message__c, api_key: 'some-secret-key', }; }, externalId: state.data.Envelope.Body.notifications.Notification.sObject.Id, postUrl: 'https://www.openfn.org/inbox/another-secret-key', }); Copy "},{"title":"Version 1.5.0 (2016-10-05)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-150-2016-10-05","content":"New features: Delete credentialsDelete triggersArchive jobsContinual testing from status.openfn.org Delete credentials and triggers: Users can now delete credentials and triggers. Archive jobs: Users can now archive jobs, rendering them inactive. Click \"view archived jobs\" to see and restore old jobs. status.openfn.org: is now live, providing continual testing of key OpenFn services. We run both message-filter-based and timer-trigger-based jobs every five minutes to ensure availability, as well as measuring the round-trip time (in ms) that it takes for a server in a different geographical location to send valid JSON to OpenFn then receive and process the 200 response. (This time will vary according to the location of your servers, but it's important to note that we test the full round trip. Our servers typically send out 200s in about 5-6ms, but you can expect the round trip to complete in closer to 750ms.) "},{"title":"Version 1.4.0 (2016-09-26)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-140-2016-09-26","content":"New features: Run \"matches\" directly from your inbox view.Always display the latest notification, dismiss to scroll back in time.Login and signup server responses Run \"matches\" from inbox: Users can now run matches in a single click from their inbox, getting notifications that runs have successfully started without having to navigate to the Message Inspector page for a given message. Look for the blue \"play\" button next to each match. Simply click to start running that job with the message in question. Latest notifications: User notifications will now be displayednewest-on-top and when there are multiple stacked notifications users will be... well... notified. Click the small \"x\" to dismiss the latest notification, moving backwards in time until all have been read. Login/signup errors: Until now, invalid login messages and duplicate singup emails had been only displayed in your brower's logs. (That's our fault.) You'll now see a handy \"invalid credentials\" or \"email already registered\" message when trying to log in or sign up. "},{"title":"Version 1.3.0 (2016-09-20)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-130-2016-09-20","content":"New version of language-salesforce allows users to alterState with a custom function. alterState:documentation "},{"title":"Version 1.2.0 (2016-09-15)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-120-2016-09-15","content":"Users can now select specific adaptor versions for their jobs.Jobs will \"auto-upgrade\" unless locked to a specific version. Adaptor versions: This means that the code beneath your job, once saved with a specific adaptor version, will never change. This is an important step forward for the whole community, as it enables more rapid progress—especially considering the growing number of outside contributors—without risking introducing instability to existing jobs. Each new version of an adaptor will have release notes introducing the new features or changes to helper functions. To allow easy upgrades, we will still mandate that all new versions are backwards compatible. "},{"title":"Version 1.1.0 (2016-08-29)","type":1,"pageTitle":"Release Notes","url":"documentation/release-notes#version-110-2016-08-29","content":"New features: Users can now run jobs based on timers as well as filters.Users can now view logs for all runs, not just the most recent.Jobs are \"aware\" of their last running state.get(...) and post(...) are now supported using the language-http adaptor, allowing users to make their own HTTP calls in jobs. Timer triggers: On the triggers tab, users can set the trigger type to \"timer\" and input a whole number of seconds for the \"interval\". Any \"active\" jobs associated with this trigger will run periodically after the interval elapses. View logs for all runs: By clicking on an individual run from either the Activity tab or the Message Inspector, users can view the full logs for that run, regardless of whether or not a more recent run took place with the same job and message. Job state: When a job runs based on a timer, not an incoming message, it will preserve it's state for the next run. This feature is commonly used by language packs like language-surveycto, language-odk, and others to create a \"cursor\" to offset or limit database queries. For example, fetchSubmissions(...) in the language-surveycto adaptor takes three arguments: formId, afterDate, and postUrl. The first time this job runs it will only fetch submissions after the afterDate. If any submissions are received, it will take the last submission from the array (by date) and persist it in the job_state as lastSubmissionDate. The next time this job runs, say, 300 seconds (5 minutes) later, it will ignore afterDateand instead fetch submissions after lastSubmissionDate. While this particular helper function is very abstract (it does this one thing well) it's possible to write a job that simply alters the final \"state\" before completing, passing whatever data you'd like from THIS RUN to the NEXT RUNof the job. get(...) and post(...): Have a look at this complex job using language-http. See how it is possible to provide a query and a callback for get while posttakes a url and a body object. At the end, the user is setting state.lastSubmissionDate to submissions[submissions.length-1].SubmissionDate. See the functions themselves atlanguage-http. get('forms/data/wide/json/someForm', { query: function (state) { return { date: state.lastSubmissionDate || 'Aug 29, 2016 4:44:26 PM' }; }, callback: function (state) { // Pick submissions out in order to avoid `post` overwriting `response`. var submissions = state.response.body; // return submissions return submissions .reduce(function (acc, item) { // tag submissions as part of the \"someForm\" form item.formId = 'someForm'; return acc.then( post('https://www.openfn.org/inbox/some-inbox-uuid', { body: item }) ); }, Promise.resolve(state)) .then(function (state) { if (submissions.length) { state.lastSubmissionDate = submissions[submissions.length - 1].SubmissionDate; } return state; }) .then(function (state) { delete state.response; return state; }); }, }); Copy "},{"title":"Style Guide","type":0,"sectionRef":"#","url":"documentation/style-guide","content":"","keywords":""},{"title":"Markdown Syntax","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#markdown-syntax","content":"To serve as an example page when styling markdown based Docusaurus sites. "},{"title":"Headers","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#headers","content":"H1 - Create the best documentation# "},{"title":"H2 - Create the best documentation","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#h2---create-the-best-documentation","content":""},{"title":"H3 - Create the best documentation","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#h3---create-the-best-documentation","content":"H4 - Create the best documentation# H5 - Create the best documentation# H6 - Create the best documentation#  "},{"title":"Emphasis","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#emphasis","content":"Emphasis, aka italics, with asterisks or underscores. Strong emphasis, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. Strikethrough uses two tildes. Scratch this.  "},{"title":"Lists","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#lists","content":"First ordered list itemAnother item Unordered sub-list. Actual numbers don't matter, just that it's a number Ordered sub-list And another item. Unordered list can use asterisks Or minuses Or pluses  "},{"title":"Links","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#links","content":"I'm an inline-style link I'm an inline-style link with title I'm a reference-style link You can use numbers for reference-style link definitions Or leave it empty and use the link text itself. URLs and URLs in angle brackets will automatically get turned into links.http://www.example.com/ or http://www.example.com/ and sometimes example.com (but not on GitHub, for example). Some text to show that the reference links can follow later.  "},{"title":"Images","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#images","content":"Here's our logo (hover to see the title text): Inline-style: Reference-style:  Images from any folder can be used by providing path to file. Path should be relative to markdown file.   "},{"title":"Code","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#code","content":"var s = 'JavaScript syntax highlighting'; alert(s); Copy s = \"Python syntax highlighting\" print(s) Copy No language indicated, so no syntax highlighting. But let's throw in a <b>tag</b>. Copy function highlightMe() { console.log('This line can be highlighted!'); } Copy  "},{"title":"Tables","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#tables","content":"Colons can be used to align columns. Tables\tAre\tCoolcol 3 is\tright-aligned\t\\$1600 col 2 is\tcentered\t\\$12 zebra stripes\tare neat\t\\$1 There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown. Markdown\tLess\tPrettyStill\trenders\tnicely 1\t2\t3  "},{"title":"Blockquotes","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#blockquotes","content":"Blockquotes are very handy in email to emulate reply text. This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.  "},{"title":"Inline HTML","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#inline-html","content":"Definition list Is something people use sometimes. Markdown in HTML Does *not* work **very** well. Use HTML tags.  "},{"title":"Line Breaks","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#line-breaks","content":"Here's a line for us to start with. This line is separated from the one above by two newlines, so it will be aseparate paragraph. This line is also a separate paragraph, but... This line is only separated by a single newline, so it's a separate line in the same paragraph.  "},{"title":"Admonitions","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#admonitions","content":"note This is a note tip This is a tip important This is important caution This is a caution warning This is a warning "},{"title":"Tabs","type":1,"pageTitle":"Style Guide","url":"documentation/style-guide#tabs","content":"Note how we import tabs first, then use them as below: <Tabs defaultValue=\"apple\" values={[ { label: 'Apple', value: 'apple' }, { label: 'Orange', value: 'orange' }, { label: 'Banana', value: 'banana' }, ]} > <TabItem value=\"apple\">This is an apple 🍎</TabItem> <TabItem value=\"orange\">This is an orange 🍊</TabItem> <TabItem value=\"banana\">This is a banana 🍌</TabItem> </Tabs> Copy AppleOrangeBanana This is an apple 🍎 "},{"title":"Microsoft Azure","type":0,"sectionRef":"#","url":"documentation/tools/azure","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Microsoft Azure","url":"documentation/tools/azure#overview","content":"Azure is... Active Directory is.... Further Reading: Links.. "},{"title":"Integration Options","type":1,"pageTitle":"Microsoft Azure","url":"documentation/tools/azure#integration-options","content":"Data integration via Microsoph Web API... "},{"title":"OpenFn Adaptor","type":1,"pageTitle":"Microsoft Azure","url":"documentation/tools/azure#openfn-adaptor","content":"Currently there is no tool-specific adaptor, so language-http has been implemented to integrate via HTTP requests to the web API. "},{"title":"Integration Examples","type":1,"pageTitle":"Microsoft Azure","url":"documentation/tools/azure#integration-examples","content":"Links to sample jobs/ code snippets "},{"title":"BambooHR","type":0,"sectionRef":"#","url":"documentation/tools/bamboohr","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"BambooHR","url":"documentation/tools/bamboohr#overview","content":"BambooHR is... "},{"title":"Integration Use Cases","type":1,"pageTitle":"BambooHR","url":"documentation/tools/bamboohr#integration-use-cases","content":"Example user stories... "},{"title":"Further Reading:","type":1,"pageTitle":"BambooHR","url":"documentation/tools/bamboohr#further-reading","content":"Links... "},{"title":"Integration Options","type":1,"pageTitle":"BambooHR","url":"documentation/tools/bamboohr#integration-options","content":"Data integration via BambooHR Web API - link: .... Webhook service to push data to OpenFn endpoint - link: ... Notes about webhook setup... "},{"title":"OpenFn Adaptor","type":1,"pageTitle":"BambooHR","url":"documentation/tools/bamboohr#openfn-adaptor","content":"Currently there is no tool-specific adaptor, so language-http can be implemented to integrate via HTTP requests to the web API. "},{"title":"Integration Examples","type":1,"pageTitle":"BambooHR","url":"documentation/tools/bamboohr#integration-examples","content":"Links to sample jobs/ code snippets... "},{"title":"Generic Data Sources","type":0,"sectionRef":"#","url":"documentation/source-apps","content":"","keywords":""},{"title":"Standard webhook configuration","type":1,"pageTitle":"Generic Data Sources","url":"documentation/source-apps#standard-webhook-configuration","content":"This section describes how to enable push notifications from selected source applications or how to configure pull jobs to fetch data from those sources. If you don't see yours in the alphabetical list below feel free to add it with a pull request. Every OpenFn project has a unique Inbox URL address that can be used as an endpoint for any JSON webhook. To set up a data source, configure that source to make a POST over HTTPS to your Inbox URL. SeeConnecting Source Applications. To connect an application with standard JSON webhooks, copy your inbox URL from the \"Inbox\" page or your \"Project Settings\" screen and use it as the destination URL on your source application. Unless you have specifically configured it on the \"Access & Security\" page, no authentication is required. N.B.: This is by no means an exhaustive list. It is merely a list of common sources that external contributors have added. Remember that anything with a REST api or a JSON-based notification service can be used with OpenFn. "},{"title":"Magpi","type":1,"pageTitle":"Generic Data Sources","url":"documentation/source-apps#magpi","content":"Magpi is not able to push data to external URLs. In order to fetch data from Magpi, you must run a scheduled job with a cron trigger using langugage-magpi: fetchSurveyData({ surveyId: 37479, // the survey id afterDate: '2016-05-31', // the initial \"after\" date // after the first run, OpenFn will only fetch new submissions postUrl: 'https://www.openfn.org/inbox/secret-5c25-inbox-ba2c-url', // the inbox to post form data to. }); Copy Every time this job runs it will only fetch new data, by default. "},{"title":"SurveyCTO","type":1,"pageTitle":"Generic Data Sources","url":"documentation/source-apps#surveycto","content":"SurveyCTO is not able to push data to external URLs. In order to fetch data from SurveyCTO, you must run a job on a using language-surveycto: fetchSubmissions( 'form_id', // the form id 'Sep 1, 2016 3:56:02 PM', // the initial \"after\" date // after the first run, OpenFn will only fetch new submissions 'https://www.openfn.org/inbox/something-secret' // the inbox to post form data to. ); Copy Every time this job runs it will only fetch new data, by default. "},{"title":"Open Data Kit (ODK) Collect","type":1,"pageTitle":"Generic Data Sources","url":"documentation/source-apps#open-data-kit-odk-collect","content":"To bypass ODK Aggregate and submit forms directly to OpenFn make the following changes in your ODK Collect app. Select General Settings.Select Server Settings.Under Type, select Other.Under URL, enter `https://www.openfn.orgUnder Submission path, enter /inbox/your-unique-inbox-url (you can copy this from your OpenFn Inbox).Optional: If you have enabled auth methods on your inbox, enter yourusername and password on this same screen. Note that you cannot load forms from OpenFn. Forms must be loaded directly viaODK's direct method, which allows you to send forms as files via email/Whatsapp. Users can then choose to download the files and save them in the odk/ forms folder on their mobile. Note that if you want to reverse this setup and configure ODK Collect to re-connect to your Aggregate instance again:` Go back to General Settings.Select Server Settings.Under Type, select ODK Aggregate.Under URL, enter Your Aggregate URLUnder Submission path, enter /submissions.Enter your ODK Aggregate username and password on this same screen. "},{"title":"Open Data Kit (ODK) Aggregate","type":1,"pageTitle":"Generic Data Sources","url":"documentation/source-apps#open-data-kit-odk-aggregate","content":"To new submissions from ODK in real-time, click the \"Form Management\" tab at the top of your Aggregate interface.Click \"Publish\" next to the form you'd like to publish to OpenFn.A dialogue box will open.In the \"Publish To:\" picklist, select Z-ALPHA JSON Server.Choose which data to publish in the \"Data to Publish:\" picklist. You may:\"Upload Existing Data ONLY\" (ideal for migrations of finished data sets),\"Stream New Submission Data ONLY\" (ideal for new projects), or \"BOTH Upload Existing & Stream New Submission Data\" (ideal for connecting ongoing projects which are already running).In the \"URL to publish to:\" text box, enter your OpenFn Inbox UUID. (e.g.,https://www.openfn.org/inbox/8ad63a29-mUCh-sEcRET-cODes-wOW)Leave \"Authorization token:\" blank.Leave \"Include Media as:\" set to \"Links(URLs) to Media\".Click \"Publish\" and enter your email address in the dialogue box.Click the \"Published Data\" tab under \"Form Management\" and select your form to view the status of your publisher. You can also now check your OpenFn inbox to see ODK submissions arrive. "},{"title":"Ona.io","type":1,"pageTitle":"Generic Data Sources","url":"documentation/source-apps#onaio","content":"To push data from Ona.io, click on the drop-down menu next to a specific form and select Settings.On the left-side menu, select Webhooks.Paste your OpenFn inbox URL into the URL input field.Click \"Add webhook\".Ensure that the webhook is now listed with the JSON tag, indicating that it will forward data as JSON.Check to see that, once a form is submitted, it is forwarded to your OpenFn inbox. "},{"title":"Community Health Toolkit","type":1,"pageTitle":"Generic Data Sources","url":"documentation/source-apps#community-health-toolkit","content":"To push data from CHT applications to OpenFn, leverage theOutbound Pushfeature to forward specified data to your OpenFn project.When definining thedestination, specify your OpenFn inbox URL as the baseURL. No auth parameters are required, unless you have configured Inbox Security on your OpenFn project.Define the data to forward to OpenFn in themappingproperty. This will structure the payload that is sent to your OpenFn Inbox as a \"Message\". To send data to CHT applications, check out theCHT API. "},{"title":"Google Forms/Google Sheets","type":1,"pageTitle":"Generic Data Sources","url":"documentation/source-apps#google-formsgoogle-sheets","content":"You can send data to OpenFn whenever a new row is added to a Google Sheet, for example when a new submission is made to a Google Form. Below is some sample code you may add to your Google Sheet to make it push data to OpenFn whenever new rows are added. function sendToOpenFn(e) { var payload = JSON.stringify(e); var url = 'https://www.openfn.org/inbox/your-id-here'; var options = { method: 'post', contentType: 'application/json', payload: payload, }; var response = UrlFetchApp.fetch(url, options); } function isDate(v) { if (Object.prototype.toString.call(v) === '[object Date]') { if (isNaN(v.getTime())) { return false; } else { return true; } } else { return false; } } function isNumber(v) { if (Object.prototype.toString.call(v) === '[object Number]') { return true; } else { return false; } } function getReportData() { var bookReportData = { formId: 'bookReport', data: [] }; var data = SpreadsheetApp.getActiveSheet().getDataRange().getValues(); var pageCount = 0; var bookRating = 0; for (i in data) { if (isDate(data[i][0])) { // ignore header line if (isNumber(data[i][3])) { pageCount = data[i][3]; } if (isNumber(data[i][6])) { bookRating = data[i][6]; } bookReportData.data.push({ Timestamp: data[i][0], Title: data[i][1], Author: data[i][2], NumberOfPages: pageCount, Summary: data[i][4], Protagonist: data[i][5], Rating: bookRating, EmailTeacher: data[i][7], EmailStudent: data[i][8], SendStatus: data[i][9], }); } } // Logger.log(bookReportData); sendToOpenFn(bookReportData); } Copy "},{"title":"CommCare HQ","type":0,"sectionRef":"#","url":"documentation/tools/commcare","content":"","keywords":""},{"title":"Push cases and/or forms from CommCare to OpenFn","type":1,"pageTitle":"CommCare HQ","url":"documentation/tools/commcare#push-cases-andor-forms-from-commcare-to-openfn","content":"Go to \"Project Settings\".Click \"Data Forwarding\".\"Add a forwarding location\" for Cases, Forms, or both.Specify JSON, using your OpenFn inbox URL as the target. See theCommCare documentation.Create amessage-filter trigger like this.Set up a job running on that filter to process CommCare submissions or case updates. "},{"title":"Go.Data","type":0,"sectionRef":"#","url":"documentation/tools/godata","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Go.Data","url":"documentation/tools/godata#overview","content":"Go.Data is an outbreak investigation tool for field data collection during public health emergencies. "},{"title":"Integration Use Cases","type":1,"pageTitle":"Go.Data","url":"documentation/tools/godata#integration-use-cases","content":"Example user stories... "},{"title":"Further Reading","type":1,"pageTitle":"Go.Data","url":"documentation/tools/godata#further-reading","content":"OpenFn Go.Data notes -https://drive.google.com/file/d/12YDZXt9_-XUv8HcAiyzZsqRitBkedKqf/view?usp=sharingGo.Data User Guides –https://drive.google.com/drive/u/8/folders/1cTcXZLEM4XRxht6VvsSrKq8QGMie-knjGo.Data GitHub Repository – https://github.com/WorldHealthOrganization/godataGo.Data API Explorer - http://who-stable.clarisoft.com/explorer/#/ "},{"title":"Integration Options","type":1,"pageTitle":"Go.Data","url":"documentation/tools/godata#integration-options","content":"Data integration via the Go.Data web API - link here: ... "},{"title":"OpenFn Adaptor","type":1,"pageTitle":"Go.Data","url":"documentation/tools/godata#openfn-adaptor","content":"The open-source language-godataadaptor has been developed with a series of helper functions for common operations to expedite integration setup. Also, the genericlanguage-http can be used to make HTTP requests to the Go.Data API and can perform any operations not supported by language-godata. "},{"title":"Implementation Examples","type":1,"pageTitle":"Go.Data","url":"documentation/tools/godata#implementation-examples","content":"Links to jobs and code snippets... "},{"title":"Kobo Toolbox","type":0,"sectionRef":"#","url":"documentation/tools/kobo-toolbox","content":"","keywords":""},{"title":"Overview","type":1,"pageTitle":"Kobo Toolbox","url":"documentation/tools/kobo-toolbox#overview","content":"note Tool docs are (1) to ensure all OpenFn can more quickly and easily integrate with common tools, and (2) to educate any OpenFn user/the wider sector. "},{"title":"Integration Use Cases","type":1,"pageTitle":"Kobo Toolbox","url":"documentation/tools/kobo-toolbox#integration-use-cases","content":"Example user stories... "},{"title":"Further Reading","type":1,"pageTitle":"Kobo Toolbox","url":"documentation/tools/kobo-toolbox#further-reading","content":"Links to external sites and OpenFn docs... "},{"title":"Integration Options","type":1,"pageTitle":"Kobo Toolbox","url":"documentation/tools/kobo-toolbox#integration-options","content":""},{"title":"Data & Metadata integration via Kobo Web API","type":1,"pageTitle":"Kobo Toolbox","url":"documentation/tools/kobo-toolbox#data--metadata-integration-via-kobo-web-api","content":"Summary & links... Learning about Kobo API, what we can/cannot extract from different endpoints... "},{"title":"Webhook service to push submission data to OpenFn endpoint","type":1,"pageTitle":"Kobo Toolbox","url":"documentation/tools/kobo-toolbox#webhook-service-to-push-submission-data-to-openfn-endpoint","content":"To push data from Kobo, users must click the projects icon on their left-side nav bar. It's in the shape of a globe.Once selecting a project, the Project Settings link will appear at the top left side of the screen. Click it to open the Project Settings page.In the bottom left pane of the project settings page, users must paste their inbox URL from OpenFn into the Rest Services Service URL input area and select JSON Post as the Service Name.It's helpful to add a wrapper to your form data if you will be publishing multiple forms to OpenFn. You could use{\"form\":\"my_form\", \"body\": %SUBMISSION%}.Click Add Service to start forwarding new Kobo submissions to OpenFn.org. To test to integration, add a submission manually using theenter data in browser button. Head back to your history page at OpenFn to view the newly submitted data and write a new filter and job to map your Kobo data to any destination system on OpenFn. Here's a sample post from Kobo REST service. Note that questions inside groups are prefixed with groupname/ rather than sitting inside a group object like ODK: { \"meta/instanceID\": \"uuid:19d72997-8316-4e02-8016-4a8ddf6a2aa4\", \"group1/name\": \"twenty\", \"group1/age\": \"19\", \"formhub/uuid\": \"6f5773a110b046cb97e3d71f6c04e7a6\", \"first_q\": \"hello\", \"final_q\": \"why not?\", \"_xform_id_string\": \"groups\", \"_uuid\": \"19d72997-8316-4e02-8016-4a8ddf6a2aa4\", \"_userform_id\": \"taylordowns2000_groups\", \"_tags\": [], \"_submitted_by\": null, \"_submission_time\": \"2016-04-22T06:38:20\", \"_status\": \"submitted_via_web\", \"_notes\": [], \"_id\": 889409, \"_geolocation\": [null, null], \"_bamboo_dataset_id\": \"\", \"_attachments\": [] } Copy "},{"title":"OpenFn Adaptor","type":1,"pageTitle":"Kobo Toolbox","url":"documentation/tools/kobo-toolbox#openfn-adaptor","content":"Check outOpenFn/language-kobotoolbox "},{"title":"Integration Examples","type":1,"pageTitle":"Kobo Toolbox","url":"documentation/tools/kobo-toolbox#integration-examples","content":"Links to sample jobs/ code snippets... "},{"title":"Salesforce","type":0,"sectionRef":"#","url":"documentation/tools/salesforce","content":"","keywords":""},{"title":"Salesforce Integration Options","type":1,"pageTitle":"Salesforce","url":"documentation/tools/salesforce#salesforce-integration-options","content":"APIs: Salesforce has a robust set of RESTful APIs that support a wide range of operations. See OpenFn API adaptorlanguage-salesforce.Webhook: UsingOutbound Messagesand workflow automation, admins can configure notifications to be sent to OpenFn when a specific event occurs. "},{"title":"Salesforce Credentials","type":1,"pageTitle":"Salesforce","url":"documentation/tools/salesforce#salesforce-credentials","content":"Salesforce requires a username, password, login URL, and security token to authenticate via a user. Note every time you reset the user's password, the security token will reset and you need to update the Credential record used in your OpenFn job.  A \"Salesforce\" Credential record should include: UsernamePasswordSecurity Token (Salesforce will email you this when you set your password. If you cannot find \"security token\" in your inbox, see below for how to reset it.)Login URL: If a production system, use https://login.salesforce.com/ (unless you have a custom domain https://domainName.salesforce.com/). For sandbox environments, https://test.salesforce.com/.  For OpenFn/devtools or OpenFn/engine the raw JSON of the credential for inclusion in state should look like this: \"configuration\": { \"loginUrl\": \"https://login.salesforce.com/\", \"username\": \"openfn@salesforce.org\", \"password\": \"testing123\", \"securityToken\": \"Mh4gkye9BVZA9dDjD61Fnd1ba\" }, Copy "},{"title":"Resetting Your Security Token","type":1,"pageTitle":"Salesforce","url":"documentation/tools/salesforce#resetting-your-security-token","content":"See instructions hereor below screenshot. Once reset, you will receive an email from Salesforce. Please save this security token in your OpenFn Credential.  "},{"title":"Troubleshooting","type":0,"sectionRef":"#","url":"documentation/trouble-shooting","content":"","keywords":""},{"title":"Common Error Messages","type":1,"pageTitle":"Troubleshooting","url":"documentation/trouble-shooting#common-error-messages","content":"The most common error messages with English explanations are: DUPLICATE_VALUE: duplicate value found: ODK_uuid__c duplicates value on record with id: a0524000005wNw0 The insert is blocked because you are attempting to create a new record with a unique field with the same value as an existing record. Copy Required value missing Copy ExternalId not found Copy "},{"title":"Common errors and how to handle them","type":1,"pageTitle":"Troubleshooting","url":"documentation/trouble-shooting#common-errors-and-how-to-handle-them","content":"Are Master-detail relationships in Salesforce reparentable?# { INVALID_FIELD_FOR_INSERT_UPDATE: Unable to create/update fields: Contact__c. Please check the security settings of this field and verify that it is read/write for your profile or permission set. } Copy This error may arise if a master-detail relationship in Salesforce is not set as reparentable and the user attempts to run an upsert. "},{"title":"Welcome to The Library","type":0,"sectionRef":"#","url":"library/","content":"There have been over 3,000 distinct jobs written with OpenFn, and they provide the best way for newcomers to learn how to use the platform. We're currently designing a \"job library\" which organizations can opt into, which would share all their job expressions (without exposing source data, of course) and trigger patterns for the benefit of the broader community. While we get this all together you'll be able to browse and search these open-source jobs here. In the meantime, please feel free to submit your own jobs by submitting a pull request to this docs site if you think they'd help others.","keywords":""},{"title":"alter-state-before-operations","type":0,"sectionRef":"#","url":"library/jobs/alter-state-before-operations","content":"// Here, we make sure CommCare gives us an array to use in each(merge(...), ...) alterState(state => { const idCards = state.data.form.ID_cards_given_to_vendor; if (!Array.isArray(idCards)) { state.data.form.ID_cards_given_to_vendor = [idCards]; } return state; }); // Now state has been changed, and we carry on... each( merge( dataPath('form.ID_cards_given_to_vendor[*]'), fields( field('Vendor_Id', dataValue('form.ID_vendor')), field('form_finished_time', dataValue('form.meta.timeEnd')) ) ), upsert( 'Small_Packet__c', 'sp_id__c', fields( field('sp_id__c', dataValue('ID_cards_given_to_vendor')), relationship('Vendor__r', 'Badge_Code__c', dataValue('Vendor_Id')), field( 'Small_Packet_Distribution_Date__c', dataValue('form_finished_time') ) ) ) ); Copy","keywords":""},{"title":"async-and-array-dot-map","type":0,"sectionRef":"#","url":"library/jobs/async-and-array-dot-map","content":"alterState(state => { console.log('Here we will await the result of a LOT of async operations.'); console.log('First we needed to break large arrays into smaller chunks.'); function chunk(arr, chunkSize) { var R = []; for (var i = 0, len = arr.length; i < len; i += chunkSize) R.push(arr.slice(i, i + chunkSize)); return R; } const clinicSets = chunk(state.data.Clinic, 10); const patientSets = chunk(state.data.Patient, 10); const visitSets = chunk(state.data.Visit, 10); const deletedVisitSets = chunk(state.data.VisitDeleted, 10); console.log('Then we define a bunch of different async functions.'); const postClinics = async cs => { return post(state.configuration.inboxUrl, { body: { clinics: cs }, })(state); }; const postPatients = async ps => { return post(state.configuration.inboxUrl, { body: { patients: ps }, })(state); }; const postVisits = async vs => { return post(state.configuration.inboxUrl, { body: { visits: vs }, })(state); }; const postDeletedVisits = async dvs => { return post(state.configuration.inboxUrl, { body: { deletedVisits: dvs }, })(state); }; console.log( 'Then we define a single function that wraps them all up and waits for all the individual functions to resolve.' ); async function makePosts() { return Promise.all([ ...clinicSets.map(item => postClinics(item)), ...patientSets.map(item => postPatients(item)), ...visitSets.map(item => postVisits(item)), ...deletedVisitSets.map(item => postDeletedVisits(item)), ]); } console.log( 'Then we return that function, forcing our next operation to await the result of this one.' ); return makePosts(); }); alterState(state => { console.log('I show up AFTER those async functions are resolved.'); return state; }); Copy","keywords":""},{"title":"bring-formId-into-data-array-then-create-parent-and-children-in-salesforce","type":0,"sectionRef":"#","url":"library/jobs/bring-formId-into-data-array-then-create-parent-and-children-in-salesforce","content":"each( join('$.data.data[*]', '$.data.formId', 'formId'), create( 'ODK_Submission__c', fields( //bridgetest sandbox record type, comment out when not in use field('RecordTypeId', '012J00000005hlb'), //prduction record type, comment out when not in use //field(\"RecordType\", \"XXXXXXXXXXXXXXXX\"), // or //relationship(\"RecordType\", \"name\", dataValue(\"recort_type_name\")), field('Record_Type_Name__c', dataValue('record_type_id')), field('ODK_Form_Name__c', dataValue('formId')), field('Site_School_ID_Number__c', dataValue('site')), field('BT_Staff_ID__c', dataValue('recorded_by')), field('Date__c', dataValue('today')), field('Head_of_Household__c', dataValue('head_of_household')), field( 'Head_of_Household_Gender__c', dataValue('head_of_household_gender') ), field('Head_of_Household_age__c', dataValue('head_of_household_age')), field('Light_Source__c', dataValue('light_source')), field('communication__c', dataValue('communication')), field('transport__c', dataValue('transport')), field( 'number_of_children_in_household__c', dataValue('number_of_children') ), field('school_visits__c', dataValue('school_visits')), field('school_visit_reason__c', dataValue('school_visit_reason')), field('Village__c', dataValue('village')), field('ODK_Key__c', dataValue('*meta-instance-id*')) ) ) ), each( merge( dataPath('individual_na[*]'), fields( field('metaId', dataValue('*meta-instance-id*')), field('parentId', lastReferenceValue('id')), field('village', dataValue('$data.village')) ) ), create( 'ODK_Submission__c', fields( //bridgetest sandbox record type, comment out when not in use field('RecordTypeId', '012J00000005hla'), //prduction record type, comment out when not in use //field(\"RecordType\", \"XXXXXXXXXXXXXXXX\"), // or //relationship(\"RecordType\", \"name\", dataValue(\"recort_type_name\")), field('Related_ODK_Submission__c', dataValue('parentId')), field('family_name__c', dataValue('given_name')), field('school_coded__c', dataValue('school_coded')), field('school_type__c', dataValue('school_type')), field('gender__c', dataValue('gender')), field('Pays_School_Fees__c', dataValue('school_fees_yes_no')), field('in_primary_school__c', dataValue('in_primary_school')), field('School_Fee_Amount__c', dataValue('school_fees')), field('Age__c', dataValue('age')), field('surname__c', dataValue('surname')), field('out_of_school_reason__c', dataValue('out_of_school_reason')), field('class_level__c', dataValue('class_level')), field( 'other_out_of_school_reason__c', dataValue('other_out_of_school_reason') ), field('Village__c', dataValue('village')), // This is a concatenation, adding the unique child ID. field('ODK_Key__c', function (state) { return dataValue('metaId')(state).concat('(', index()(state), ')'); }) ) ) ); Copy","keywords":""},{"title":"complex-http-request-chains","type":0,"sectionRef":"#","url":"library/jobs/complex-http-request-chains","content":"each( dataPath('someArray[*]'), post( 'https://en7a5l7u3izq6.x.pipedream.net/', { body: state => { return { name: state.data.surname, age: state.data.age }; }, }, state => { console.log('in the callback'); console.log(state.data); get( 'https://en7a5l7u3izq6.x.pipedream.net/', {}, // Note how we don't use: `put(args)(state)` because state is already // provided by the parent operation, get(), to its callback... put('https://en7a5l7u3izq6.x.pipedream.net/') // ...but since we've called get() INSIDE an anonymous function, we'll // need to pass state to it manually: get(args)(state)... )(state); return state; } ) ); Copy","keywords":""},{"title":"complex-state-control","type":0,"sectionRef":"#","url":"library/jobs/complex-state-control","content":"// Example with language-salesforce alterState(state => { // return state => { return new Promise((resolve, reject) => { query('SELECT Name FROM Account')(state) .then(state => { console.log(state.references[0].records); console.log('doing stuff here'); return state; }) .then(state => { console.log('and in here'); resolve(state); }); }); // }; }); alterState(state => { console.log('and also in here!'); console.log(state.references); return state; }); Copy","keywords":""},{"title":"CommCare-FHIR","type":0,"sectionRef":"#","url":"library/jobs/CommCare-FHIR","content":"// CommCare form submission mapped to the FHIR patient encounter standard, // submitted by Simon Kelly @ Dimagi. encounter( fields( field('resourceType', 'Encounter'), field('status', 'finished'), field('type', function (state) { return [ { coding: [ { system: 'momconnect:type', code: '8', }, ], }, ]; }), field('contained', function (state) { return [ { resourceType: 'Patient', id: 'patient', identifier: [ { use: 'official', system: 'momconnect:sanid', value: dataValue('properties.id_number')(state), }, ], name: [ { use: 'official', family: [dataValue('properties.family_name')(state)], given: [dataValue('properties.given_name')(state)], text: dataValue('properties.given_name')(state).concat( ' ', dataValue('properties.family_name')(state) ), }, ], gender: 'female', birthDate: dataValue('properties.dob')(state), telecom: [ { system: 'phone', value: dataValue('properties.msisdn')(state), }, ], communication: [ { language: { coding: [ { system: 'urn:ietf:bcp:47', code: dataValue('properties.language_code')(state), }, ], }, preferred: true, }, ], }, { resourceType: 'Observation', id: 'edd', code: { coding: [ { system: 'http://loinc.org', code: '11778-8', display: 'Delivery date Estimated', }, ], }, valueDateTime: dataValue('properties.edd')(state), status: 'preliminary', }, ]; }), field('patient', function (state) { return { reference: '#patient', }; }), field('period', function (state) { return { start: dataValue('properties.visit_date')(state), }; }), field('extension', function (state) { return [ { url: 'momconnect:mha', valueInteger: 2, }, { url: 'momconnect:swt', valueInteger: 3, }, { url: 'momconnect:dmsisdn', valueString: '+27831111111', }, ]; }) ) ); Copy","keywords":""},{"title":"create-if-proposal","type":0,"sectionRef":"#","url":"library/jobs/create-if-proposal","content":"// Lots of custom functions: function(state) { if(dataValue(\"salesq9\")(state) !== undefined && dataValue(\"salesq9\")(state) !== null && dataValue(\"salesq9\")(state) !== 0 ) { create(\"Line_Item__c\", fields( relationship(\"RecordType\", \"name\", \"Sale Item\"), relationship(\"Outlet_Call__r\", \"Invoice_Number__c\", dataValue(\"invoice_number\")(state)), relationship(\"Product_Price__r\", \"Product_Price_ID__c\", function(state) { return ( dataValue(\"wat\")(state).concat( \"_\", dataValue(\"a_u9\")(state), \"_\", dataValue(\"prj_code9\")(state), \"_\", dataValue(\"channel\")(state) ) ); }), field(\"Sales_Quantity__c\", dataValue(\"salesq9\")(state)), field(\"Unit__c\", dataValue(\"a_u9\")(state)), field(\"Project_Code__c\", dataValue(\"prj_code9\")(state)), field(\"Channel__c\", dataValue(\"channel\")(state)), field(\"Unit_Price_c__c\", dataValue(\"unitp9\")(state)), field(\"Type__c\", \"Sale\"), relationship(\"Product__r\", \"Name\", dataValue(\"wat\")(state)) ), state ); } } //could be replaced with: createIf( // If this is TRUE... dataValue('salesq9') !== undefined && dataValue('salesq9') !== null && dataValue('salesq9') !== 0, // create a record of this object... 'Line_Item__c', // with these fields... fields( relationship('RecordType', 'name', 'Sale Item'), relationship( 'Outlet_Call__r', 'Invoice_Number__c', dataValue('invoice_number') ), // and make concatenation easier... relationship( 'Product_Price__r', 'Product_Price_ID__c', concatenate( dataValue('wat'), '_', dataValue('a_u9'), '_', dataValue('prj_code9'), '_', dataValue('channel') ) ), field('Sales_Quantity__c', dataValue('salesq9')), field('Unit__c', dataValue('a_u9')), field('Project_Code__c', dataValue('prj_code9')), field('Channel__c', dataValue('channel')), field('Unit_Price_c__c', dataValue('unitp9')), field('Type__c', 'Sale'), relationship('Product__r', 'Name', dataValue('wat')) ) ); Copy","keywords":""},{"title":"Create-SMS-Linked-to-Contact-in-SF","type":0,"sectionRef":"#","url":"library/jobs/Create-SMS-Linked-to-Contact-in-SF","content":"create(\"SMS__c\", fields( field(\"text__c\", dataValue(\"message_text\")), relationship(\"Contact__r\", \"Contact_Phone_Number__c\", dataValue(\"from_number\")), field(\"date__c\", dataValue(\"date\")) ) Copy","keywords":""},{"title":"DHIS2-DataValues-API","type":0,"sectionRef":"#","url":"library/jobs/DHIS2-DataValues-API","content":"// ---- // Add data to data value sets in DHIS2 using a generic JSON message, submitted // by Taylor Downs @ OpenFn. // --- dataValueSet( fields( field('dataSet', 'pBOMPrpg1QX'), field('orgUnit', 'DiszpKrYNg8'), field('period', '201401'), field('completeData', dataValue('form.date')), field('dataValues', function (state) { return [ dataElement('qrur9Dvnyt5', dataValue('form.prop_a')(state)), dataElement('oZg33kd9taw', dataValue('form.prop_b')(state)), dataElement('msodh3rEMJa', dataValue('form.prop_c')(state)), ]; }) ) ); Copy","keywords":""},{"title":"DHIS2-Events-API","type":0,"sectionRef":"#","url":"library/jobs/DHIS2-Events-API","content":"// ---- // Create new events in DHIS2 using a generic JSON message, submitted by // Taylor Downs @ OpenFn for demonstration porpoises. // --- event( fields( field('program', 'eBAyeGv0exc'), field('orgUnit', 'DiszpKrYNg8'), field('eventDate', dataValue('meta.date')), field('status', 'COMPLETED'), field('storedBy', 'admin'), field('coordinate', { latitude: '59.8', longitude: '10.9', }), field('dataValues', function (state) { return [ dataElement('qrur9Dvnyt5', dataValue('form.prop_a')(state)), dataElement('oZg33kd9taw', dataValue('form.prop_b')(state)), dataElement('msodh3rEMJa', dataValue('form.prop_c')(state)), ]; }) ) ); Copy","keywords":""},{"title":"ODK-Create-Many-Records-Moving-In-And-Out-Of-Repeat-Blocks","type":0,"sectionRef":"#","url":"library/jobs/ODK-Create-Many-Records-Moving-In-And-Out-Of-Repeat-Blocks","content":"/* Create many records from an ODK submission, moving in and out of repeat blocks, submitted by Taylor Downs @ OpenFn. */ beta.each( '$.data.data[*]', create( 'ODK__c', fields( field('Event_Type__c', dataValue('event_type')), field('Training_Type__c', dataValue('training_type')), field('Event_Leader_ID__c', dataValue('leader')), field('Event_Date__c', dataValue('date')), field('metainstanceid__c', dataValue('*meta-instance-id*')) ) ) ), beta.each( merge( dataPath('data[*].attendee_new[*]'), fields(field('parentId', lastReferenceValue('id'))) ), create( 'ODK_Child_2__c', fields( field('ODK__c', dataValue('parentId')), field('Barcode__c', dataValue('new_attendee_id')), field('First_Name__c', dataValue('new_attendee_first_name')), field('Last_Name__c', dataValue('new_attendee_last_name')), field('Phone_Number__c', dataValue('new_attendee_phone')) ) ) ), beta.each( merge( dataPath('data[*].attendee[*]'), fields( field('parentId', function (state) { return state.references[state.references.length - 1].id; }) // ^^ This will get the sfID of the 1st item created. ) ), create( 'ODK_Child_1__c', fields( field('ODK__c', dataValue('parentId')), field('Barcode__c', dataValue('attendee_id')), field('Late__c', dataValue('late')) ) ) ); Copy","keywords":""},{"title":"send-sms-from-salesforce-workflow","type":0,"sectionRef":"#","url":"library/jobs/send-sms-from-salesforce-workflow","content":"send( fields( field( 'to_number', dataValue( 'Envelope.Body.notifications.Notification.sObject.phone_number__c' ) ), field('message_type', 'sms'), field('route_id', ''), field('content', function (state) { return 'Hey there. Your name is '.concat( dataValue('Envelope.Body.notifications.Notification.sObject.name__c')( state ), '.' ); }) ) ); Copy","keywords":""},{"title":"timeout","type":0,"sectionRef":"#","url":"library/jobs/timeout","content":"// To properly use a timeout, wrap it in a promise. This job has two operations // and it executes the get(...) operation after the alterState(...) operation // waits for 4000ms. alterState(state => { return new Promise((resolve, reject) => { setTimeout(() => { console.log('wait, and then resolve'); resolve(state); }, 4000); }); }); get('https://jsonplaceholder.typicode.com/todos/1'); Copy","keywords":""},{"title":"upsert-many-items-in-array-with-value-outside-array","type":0,"sectionRef":"#","url":"library/jobs/upsert-many-items-in-array-with-value-outside-array","content":"each( merge( dataPath('form.ID_cards_given_to_vendor[*]'), fields( field('Vendor_Id', dataValue('form.ID_vendor')), field('form_finished_time', dataValue('form.meta.timeEnd')) ) ), upsert( 'Small_Packet__c', 'sp_id__c', fields( field('sp_id__c', dataValue('ID_cards_given_to_vendor')), relationship('Vendor__r', 'Badge_Code__c', dataValue('Vendor_Id')), field( 'Small_Packet_Distribution_Date__c', dataValue('form_finished_time') ) ) ) ); Copy","keywords":""},{"title":"workWithIdAfterInsertOrUpsert","type":0,"sectionRef":"#","url":"library/jobs/workWithIdAfterInsertOrUpsert","content":"create('Patient__c', fields( field('Name', 'John Doe'), field('Age__c', state.data.age) )); // NOTE: After inserts, Salesforce will return an sfID and it will be kept in // references. I'm using alterState here simply to log the output. It's not // necessary. alterState(state => { console.log(state.references); // References is an array: // references: [ { id: 'a0J0B00000QY9TbUAL', success: true, errors: [] } ], }); //NOTE: We've even got some helper functions for accessing that last refernce ID. create('Visit__c', fields( field('Date__c', state.data.date) field('Patient__c', lastReferenceValue('id')) // Or write it like this... // field(Patient__c, state.references[0].id) )); // NOTE: You can't work directly with sfIDs on upserts, but you don't need to! upsert('Patient__c', 'My_Ext_ID__c', fields( field('Name', 'John Doe'), field('Age__c', state.data.age), field('My_Ext_ID__c', state.data.patientNumber) // THIS unique ID is how you work with the record in SF. )); create('Visit__c', fields( field('Date__c', state.data.date), // Related to the patient you just upserted... relationship('Patient__r', 'My_Ext_ID__c', state.data.patientNumber) )); Copy","keywords":""},{"title":"concatenate-many-fields-with-nulls","type":0,"sectionRef":"#","url":"library/jobs/concatenate-many-fields-with-nulls","content":"each( '$.data.data[*]', create( 'Verification__c', fields( field('RecordTypeId', '01236000000Q6PT'), relationship( 'Supplier__r', 'Unique_Entity_ID__c', dataValue('Unique_Entity_ID') ), field('Currency_ISO_Code__c', dataValue('Currency_ISO_Code')), field('Date_Conducted__c', dataValue('Date_Conducted')), field('ODK_Key__c', dataValue('*meta-instance-id*')), field('Unique_Entity_ID__c', dataValue('Unique_Entity_ID')), field('Interviewee__c', dataValue('Interviewee')), field('Interviewee_Role__c', dataValue('Interviewee_Role')), field( 'Interviewee_Primary_Phone__c', dataValue('Interviewee_Primary_Phone') ), field('Interviewee_Phone_2__c', dataValue('Interviewee_Phone_2')), field('Interviewee_Phone_3__c', dataValue('Interviewee_Phone_3')), field( 'Interviewee_Primary_Email__c', dataValue('Interviewee_Primary_Email') ), field('Trade_Name__c', dataValue('Trade_Name')), field('Registered_Name__c', dataValue('Registered_Name')), field('Location_Description__c', dataValue('Location_Description')), field('Main_Office_Country__c', dataValue('Main_Office_Country')), field('Main_Office_Region_Province_or_County__c', function (state) { return arrayToString( [ dataValue('Main_Office_Region_Province_or_County_a')(state), dataValue('Main_Office_Region_Province_or_County_b')(state), dataValue('Main_Office_Region_Province_or_County_c')(state), dataValue('Main_Office_Region_Province_or_County_d')(state), ].filter(Boolean), ',' ); }), field('Main_Office_City__c', function (state) { return arrayToString( [ dataValue('Main_Office_City_a')(state), dataValue('Main_Office_City_b')(state), dataValue('Main_Office_City_c')(state), dataValue('Main_Office_City_d')(state), ].filter(Boolean), ',' ); }), field( 'Main_Office_Street_Address__c', dataValue('Main_Office_Street_Address') ), field('Geolocation__Latitude__s', dataValue('gps:Latitude')), field('Geolocation__Longitude__s', dataValue('gps:Longitude')), field('Main_Contact_First__c', dataValue('Main_Contact_First')), field('Main_Contact_Last__c', dataValue('Main_Contact_Last')), field('Main_Contact_Role__c', dataValue('Main_Contact_Role')), field('Main_Contact_Role_Other__c', dataValue('Main_Contact_Role_Other')), field( 'Main_Contact_Phone_Mobile__c', dataValue('Main_Contact_Phone_Mobile') ), field('Main_Contact_Phone_Work__c', dataValue('Main_Contact_Phone_Work')), field( 'Main_Contact_Phone_Other__c', dataValue('Main_Contact_Phone_Other') ), field('Main_Contact_Email_Work__c', dataValue('Main_Contact_Email_Work')), field('General_Phone__c', dataValue('General_Phone')), field('General_Email__c', dataValue('General_Email')), field('Website__c', dataValue('Website')), field('Interest_in_Website__c', dataValue('Interest_in_Website')), field( 'Hours_of_Operation_Start__c', dataValue('Hours_of_Operation_Start') ), field('Hours_of_Operation_End__c', dataValue('Hours_of_Operation_End')), field( 'Hours_of_Operation_Other__c', dataValue('Hours_of_Operation_Other') ), field( 'Hours_of_Operation_Other_Start__c', dataValue('Hours_of_Operation_Other_Start') ), field( 'Hours_of_Operation_Other_End__c', dataValue('Hours_of_Operation_Other_End') ), field( 'Goods_and_Services_Description__c', dataValue('Goods_and_Services_Description') ), field('Primary_Sector__c', dataValue('Primary_Sector')), field('Primary_Subsectors__c', function (state) { return arrayToString( [ dataValue('Primary_Subsectors_1')(state), dataValue('Primary_Subsectors_2')(state), dataValue('Primary_Subsectors_3')(state), dataValue('Primary_Subsectors_4')(state), dataValue('Primary_Subsectors_5')(state), dataValue('Primary_Subsectors_6')(state), dataValue('Primary_Subsectors_7')(state), dataValue('Primary_Subsectors_8')(state), dataValue('Primary_Subsectors_9')(state), dataValue('Primary_Subsectors_10')(state), dataValue('Primary_Subsectors_l1')(state), dataValue('Primary_Subsectors_12')(state), dataValue('Primary_Subsectors_13')(state), dataValue('Primary_Subsectors_14')(state), dataValue('Primary_Subsectors_15')(state), dataValue('Primary_Subsectors_16')(state), dataValue('Primary_Subsectors_17')(state), dataValue('Primary_Subsectors_18')(state), dataValue('Primary_Subsectors_19')(state), dataValue('Primary_Subsectors_20')(state), dataValue('Primary_Subsectors_21')(state), ].filter(Boolean), ',' ); }), field('Other_Sectors__c', function (state) { return arrayToString(dataValue('Other_Sectors')(state), ','); }), field('Other_Subsectors__c', function (state) { return arrayToString( [ dataValue('Other_Subsectors_1')(state), dataValue('Other_Subsectors_2')(state), dataValue('Other_Subsectors_3')(state), dataValue('Other_Subsectors_4')(state), dataValue('Other_Subsectors_5')(state), dataValue('Other_Subsectors_6')(state), dataValue('Other_Subsectors_7')(state), dataValue('Other_Subsectors_8')(state), dataValue('Other_Subsectors_9')(state), dataValue('Other_Subsectors_10')(state), dataValue('Other_Subsectors_l1')(state), dataValue('Other_Subsectors_12')(state), dataValue('Other_Subsectors_13')(state), dataValue('Other_Subsectors_14')(state), dataValue('Other_Subsectors_15')(state), dataValue('Other_Subsectors_16')(state), dataValue('Other_Subsectors_17')(state), dataValue('Other_Subsectors_18')(state), dataValue('Other_Subsectors_19')(state), dataValue('Other_Subsectors_20')(state), dataValue('Other_Subsectors_21')(state), ].filter(Boolean), ',' ); }), field( 'Entity_and_Registration_1__c', dataValue('Entity_and_Registration_1') ), field( 'Entity_and_Registration_2__c', dataValue('Entity_and_Registration_2') ), field( 'Entity_and_Registration_3__c', dataValue('Entity_and_Registration_3') ), field('Registration_Date__c', dataValue('Registration_Date')), field('Registration_Active__c', dataValue('Registration_Active')), field( 'Business_Operation_Licenses__c', dataValue('Business_Operation_Licenses') ), field( 'Business_Operation_Certificates__c', dataValue('Business_Operation_Certificates') ), field('Association_Memberships__c', dataValue('Association_Memberships')), field('Vendor_List_Memberships__c', dataValue('Vendor_List_Memberships')), field('Has_Marketing_Plan__c', dataValue('Has_Marketing_Plan')), field('Number_of_Competitors__c', dataValue('Number_of_Competitors')), field('Start_of_Operations__c', dataValue('Start_of_Operations')), field('Primary_Language__c', dataValue('Primary_Language')), field('Primary_Language_Other__c', dataValue('Primary_Language_Other')), field('English_Speakers__c', dataValue('English_Speakers')), field('Other_Languages__c', dataValue('Other_Languages')), field( 'Frequency_of_Internet_Access__c', dataValue('Frequency_of_Internet_Access') ), field( 'Method_of_Internet_Access__c', dataValue('Method_of_Internet_Access') ), field( 'Method_of_Internet_Access_Other__c', dataValue('Method_of_Internet_Access_Other') ), field('Frequency_of_Email_Use__c', dataValue('Frequency_of_Email_Use')), field('Type_of_Email_Use__c', dataValue('Type_of_Email_Use')), field('Counties_Regions_Serviced__c', function (state) { return arrayToString( [ dataValue('Counties_Regions_Serviced_a')(state), dataValue('Counties_Regions_Serviced_b')(state), dataValue('Counties_Regions_Serviced_c')(state), dataValue('Counties_Regions_Serviced_d')(state), ].filter(Boolean), ',' ); }), field('Additional_Branches__c', dataValue('Additional_Branches')), field('Branch_Locations__c', function (state) { return arrayToString( [ dataValue('Branch_Locations_a')(state), dataValue('Branch_Locations_b')(state), dataValue('Branch_Locations_c')(state), dataValue('Branch_Locations_d')(state), ].filter(Boolean), ',' ); }), field( 'Majority_Local_or_Foreign__c', dataValue('Majority_Local_or_Foreign') ), field('Num_of_Owners__c', dataValue('Num_of_Owners')), field('Num_of_Female_Owners__c', dataValue('Num_of_Female_Owners')), field('Num_of_Male_Owners__c', dataValue('Num_of_Male_Owners')), field( 'Primary_Owner_is_Same_as_Main_Contact__c', dataValue('Primary_Owner_is_Same_as_Main_Contact') ), field('Primary_Owner__c', dataValue('Primary_Owner')), field('Primary_Owner_Gender__c', dataValue('Primary_Owner_Gender')), field( 'Primary_Owner_Gender_Other__c', dataValue('Primary_Owner_Gender_Other') ), field( 'Primary_Owner_Nationality__c', dataValue('Primary_Owner_Nationality') ), field( 'Primary_Owner_Phone_Mobile__c', dataValue('Primary_Owner_Phone_Mobile') ), field( 'Primary_Owner_Phone_Work__c', dataValue('Primary_Owner_Phone_Work') ), field( 'Primary_Owner_Phone_Other__c', dataValue('Primary_Owner_Phone_Other') ), field('Primary_Owner_Email__c', dataValue('Primary_Owner_Email')), field('Num_of_Businesses_Owned__c', dataValue('Num_of_Businesses_Owned')), field( 'Names_of_Businesses_Owned__c', dataValue('Names_of_Businesses_Owned') ), field('Num_of_Managers__c', dataValue('Num_of_Managers')), field('Num_of_Female_Managers__c', dataValue('Num_of_Female_Managers')), field('Num_of_Male_Managers__c', dataValue('Num_of_Male_Managers')), field('Finance_Management__c', dataValue('Finance_Management')), field( 'Finance_Management_Other__c', dataValue('Finance_Management_Other') ), field('Dedicated_HR_Manager__c', dataValue('Dedicated_HR_Manager')), field( 'Num_of_Permanent_Full_Time_Employees__c', dataValue('Num_of_Permanent_Full_Time_Employees') ), field( 'Num_of_Perm_Full_Time_Female_Employees__c', dataValue('Num_of_Perm_Full_Time_Female_Employees') ), field( 'Num_of_Perm_Full_Time_Male_Employees__c', dataValue('Num_of_Perm_Full_Time_Male_Employees') ), field( 'Num_of_Full_Time_Temporary_Employees__c', dataValue('Num_of_Full_Time_Temporary_Employees') ), field( 'Num_of_Full_Time_Temp_Female_Employees__c', dataValue('Num_of_Full_Time_Temp_Female_Employees') ), field( 'Num_of_Full_Time_Temp_Male_Employees__c', dataValue('Num_of_Full_Time_Temp_Male_Employees') ), field( 'Num_of_Local_Staff_Full_Part_Time__c', dataValue('Num_of_Local_Staff_Full_Part_Time') ), field( 'Num_of_Expatriate_Staff_Full_Part_Time__c', dataValue('Num_of_Expatriate_Staff_Full_Part_Time') ), field( 'International_Client_in_Past_Six_Months__c', dataValue('International_Client_in_Past_Six_Months') ), field('Principal_Client_Name__c', dataValue('Principal_Client_Name')), field( 'Foreign_or_Domestic_Principal_Client__c', dataValue('Foreign_or_Domestic_Principal_Client') ), field('Principal_Client_Sector__c', dataValue('Principal_Client_Sector')), field( 'Goods_Services_Provided_to_this_Client__c', dataValue('Goods_Services_Provided_to_this_Client') ), field( 'End_of_Last_Contract_with_this_Client__c', dataValue('End_of_Last_Contract_with_this_Client') ), field( 'Value_Goods_Services_Sold_Last_6_Months__c', dataValue('Value_Goods_Services_Sold_Last_6_Months') ), field( 'Value_Goods_Sold_Last_6_Months_USD__c', dataValue('Value_Goods_Sold_Last_6_Months_USD') ), field( 'Access_to_Finance_Constraint_Ranking__c', dataValue('Access_to_Finance_Constraint_Ranking') ), field('Bank_Account__c', dataValue('Bank_Account')), field('Bank_Guarantee__c', dataValue('Bank_Guarantee')), field( 'Satisfied_with_Current_Bank__c', dataValue('Satisfied_with_Current_Bank') ), field( 'Describe_Satisfaction_with_Current_Bank__c', dataValue('Describe_Satisfaction_with_Current_Bank') ), field( 'Has_Received_a_Formal_Loan__c', dataValue('Has_Received_a_Formal_Loan') ), field('Formal_Loan_Provider__c', dataValue('Formal_Loan_Provider')), field( 'Formal_Loan_Amount_Received__c', dataValue('Formal_Loan_Amount_Received') ), field( 'Formal_Loan_Amount_Received_USD__c', dataValue('Formal_Loan_Amount_Received_USD') ), field( 'Date_Formal_Loan_Received__c', dataValue('Date_Formal_Loan_Received') ), field('Formal_Loan_Purpose__c', dataValue('Formal_Loan_Purpose')), field( 'Formal_Loan_Purpose_Other__c', dataValue('Formal_Loan_Purpose_Other') ), field('Formal_Loan_Repaid__c', dataValue('Formal_Loan_Repaid')), field('Interested_in_Loan__c', dataValue('Interested_in_Loan')), field('Interested_Loan_Amount__c', dataValue('Interested_Loan_Amount')), field( 'Interested_Loan_Amount_USD__c', dataValue('Interested_Loan_Amount_USD') ), field( 'Interested_Loan_Duration__c', dataValue('Interested_Loan_Duration') ), field('Interested_Loan_Purpose__c', dataValue('Interested_Loan_Purpose')), field( 'Interested_Loan_Purpose_Other__c', dataValue('Interested_Loan_Purpose_Other') ), field( 'Formal_Loan_Confidence_Ranking__c', dataValue('Formal_Loan_Confidence_Ranking') ), field( 'Received_Loan_from_Family_Friends__c', dataValue('Received_Loan_from_Family_Friends') ), field( 'Family_Friend_Loan_Amount__c', dataValue('Family_Friend_Loan_Amount') ), field( 'Family_Friend_Loan_Amount_USD__c', dataValue('Family_Friend_Loan_Amount_USD') ), field( 'Received_Loan_from_Informal_Lenders__c', dataValue('Received_Loan_from_Informal_Lenders') ), field( 'Informal_Lender_Loan_Amount__c', dataValue('Informal_Lender_Loan_Amount') ), field( 'Informal_Lender_Loan_Amount_USD__c', dataValue('Informal_Lender_Loan_Amount_USD') ), field( 'Interested_in_Investor_Business_Partner__c', dataValue('Interested_in_Investor_Business_Partner') ), field( 'Total_Turnover_Previous_Month__c', dataValue('Total_Turnover_Previous_Month') ), field( 'Total_Turnover_Previous_Month_USD__c', dataValue('Total_Turnover_Previous_Month_USD') ), field( 'Total_Turnover_Previous_Fiscal_Year__c', dataValue('Total_Turnover_Previous_Fiscal_Year') ), field( 'Total_Turnover_Previous_Fiscal_Yr_USD__c', dataValue('Total_Turnover_Previous_Fiscal_Yr_USD') ), field( 'Total_Profit_Previous_Fiscal_Year__c', dataValue('Total_Profit_Previous_Fiscal_Year') ), field( 'Total_Profit_Previous_Fiscal_Year_USD__c', dataValue('Total_Profit_Previous_Fiscal_Year_USD') ), field( 'Accepted_Modes_of_Payment__c', dataValue('Accepted_Modes_of_Payment') ), field( 'Accepted_Modes_of_Payment_Other__c', dataValue('Accepted_Modes_of_Payment_Other') ), field( 'Avg_Expen_Spent_on_Imported_Goods_Year__c', dataValue('Avg_Expen_Spent_on_Imported_Goods_Year') ), field( 'Avg_Expen_Spent_on_Domestic_Goods_Year__c', dataValue('Avg_Expen_Spent_on_Domestic_Goods_Year') ), field( 'Avg_Expen_on_Domestic_Suppliers_Year__c', dataValue('Avg_Expen_on_Domestic_Suppliers_Year') ), field( 'Avg_Expen_on_Intl_Suppliers_Year__c', dataValue('Avg_Expen_on_Intl_Suppliers_Year') ), field( 'Avg_Expen_Spent_on_Salaries_Year__c', dataValue('Avg_Expen_Spent_on_Salaries_Year') ), field( 'Balance_Sheet_Statement_Available__c', dataValue('Balance_Sheet_Statement_Available') ), field('Profit_Loss_Statement__c', dataValue('Profit_Loss_Statement')), field('Directly_Imports_Goods__c', dataValue('Directly_Imports_Goods')), field( 'Avg_of_Total_Costs_from_Imports__c', dataValue('Avg_of_Total_Costs_from_Imports') ), field('Highest_Costing_Import__c', dataValue('Highest_Costing_Import')), field( 'Origin_Country_of_Highest_Costing_Import__c', dataValue('Origin_Country_of_Highest_Costing_Import') ), field('Other_Import_Countries__c', dataValue('Other_Import_Countries')), field('Exports_Products__c', dataValue('Exports_Products')), field( 'Avg_of_Total_Revenue_from_Exports__c', dataValue('Avg_of_Total_Revenue_from_Exports') ), field('Primary_Export__c', dataValue('Primary_Export')), field('Destination_of_Exports__c', dataValue('Destination_of_Exports')), field( 'Profits_Expectation_Next_Six_Months__c', dataValue('Profits_Expectation_Next_Six_Months') ), field( 'Staff_Expectation_Next_Six_Months__c', dataValue('Staff_Expectation_Next_Six_Months') ), field( 'Int_l_Entities_Represent_Good_Opp__c', dataValue('Int_l_Entities_Represent_Good_Opp') ), field( 'Int_l_Concessionaires_Represent_Good_Opp__c', dataValue('Int_l_Concessionaires_Represent_Good_Opp') ), field( 'Sectors_Representing_Best_Local_Opps__c', dataValue('Sectors_Presenting_Best_Local_Opps') ), field( 'Obstacle_Working_with_Intl_Entities__c', dataValue('Obstacle_Working_with_Intl_Entities') ), field( 'Biggest_Challenge_Next_6_Months__c', dataValue('Biggest_Challenge_Next_6_Months') ), field( 'Second_Biggest_Challenge_Next_6_Months__c', dataValue('Second_Biggest_Challenge_Next_6_Months') ), field( 'Financial_Management_Ranking__c', dataValue('Financial_Management_Ranking') ), field( 'Access_to_Finance_Ranking__c', dataValue('Access_to_Finance_Ranking') ), field('Administration_Ranking__c', dataValue('Administration_Ranking')), field('Human_Resources_Ranking__c', dataValue('Human_Resources_Ranking')), field( 'Technical_Expertise_Ranking__c', dataValue('Technical_Expertise_Ranking') ), field( 'Training_Helps_Efficiency__c', dataValue('Training_Helps_Efficiency') ), field( 'Capacity_Building_Activities_Offered__c', dataValue('Capacity_Building_Activities_Offered') ), field( 'Capacity_Building_Offered_Other__c', dataValue('Capacity_Building_Offered_Other') ), field( 'Can_Provide_Quotations_WP_on_Request__c', dataValue('Can_Provide_Quotations_WP_on_Request') ), field('Knows_What_a_Tender_is__c', dataValue('Knows_What_a_Tender_is')), field( 'Frequency_Checking_for_Tenders__c', dataValue('Frequency_Checking_for_Tenders') ), field( 'Has_Submitted_a_Tender_Bid__c', dataValue('Has_Submitted_a_Tender_Bid') ), field( 'Has_Won_Tenders_in_Past_Six_Months__c', dataValue('Has_Won_Tenders_in_Past_Six_Months') ), field( 'Details_of_Recently_Won_Tenders__c', dataValue('Details_of_Recently_Won_Tenders') ), field( 'Num_of_Gov_t_Bids_in_Last_Six_Months__c', dataValue('Num_of_Govt_Bids_in_Last_Six_Months') ), field( 'Num_of_Private_Bids_in_Last_Six_Months__c', dataValue('Num_of_Private_Bids_in_Last_Six_Months') ), field( 'Num_of_NGO_INGO_IO_Bids_Last_Six_Months__c', dataValue('Num_of_NGO_INGO_IO_Bids_Last_Six_Months') ), field( 'Main_Reason_for_Lost_Bids__c', dataValue('Main_Reason_for_Lost_Bids') ), field( 'Main_Reason_for_Lost_Bids_Other__c', dataValue('Main_Reason_for_Lost_Bids_Other__c') ), field( 'Main_Reason_for_Not_Bidding_on_Tenders__c', dataValue('Main_Reason_for_Not_Bidding_on_Tenders') ), field( 'Main_Reason_Not_Bidding_Tenders_Others__c', dataValue('Main_Reason_Not_Bidding_Tenders_Others__c') ), field( 'Planning_to_Bid_on_Future_Tenders__c', dataValue('Planning_to_Bid_on_Tenders_in_the_Future') ), field( 'Services_That_Would_Help_to_Win_Tenders__c', dataValue('Services_That_Would_Help_to_Win_Tenders') ), field( 'Interested_in_Future_BM_Communications__c', dataValue('Interested_in_Future_BM_Communications') ), field( 'Future_BM_Communications__c', dataValue('Future_BM_Communications') ), field( 'Interested_in_Attending_Future_Training__c', dataValue('Interested_in_Attending_Future_Training') ), field( 'Training_Most_Interested_in_Attending__c', dataValue('Training_Most_Interested_in_Attending') ), field( 'Training_Most_Interested_in_Other__c', dataValue('Training_Most_Interested_in_Other') ), field( 'Amount_Willing_to_Pay_for_Training__c', dataValue('Amount_Willing_to_Pay_for_Training') ), field( 'Amount_Willing_to_Pay_for_Training__c', dataValue('Amount_Willing_to_Pay_for_Training') ), field( 'Training_Interested_In_but_Not_Offered__c', dataValue('Training_Interested_In_but_Not_Offered') ), field( 'Advice_to_Entrepreneurs_in_your_Country__c', dataValue('Advice_to_Entrepreneurs_in_your_Country') ), field('Interviewer_Comments__c', dataValue('Interviewer_Comments')) ) ) ); Copy","keywords":""},{"title":"Match a message with a fragment inside another object called `form`","type":0,"sectionRef":"#","url":"library/triggers/xmlns","content":"{ \"form\": { \"@xmlns\": \"http://openrosa.org/formdesigner/F732194-3278-nota-ReAL-one\" } } Copy","keywords":""}]